
Mo Hinh Da Nhiem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb70  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800bc80  0800bc80  0001bc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c208  0800c208  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c208  0800c208  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c208  0800c208  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c208  0800c208  0001c208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c20c  0800c20c  0001c20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e0  200001e4  0800c3f4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014c4  0800c3f4  000214c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001893f  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a2a  00000000  00000000  00038b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  0003c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112b  00000000  00000000  0003dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ade1  00000000  00000000  0003eceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f5d  00000000  00000000  00059acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009757a  00000000  00000000  00073a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000716c  00000000  00000000  0010afa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00112110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc68 	.word	0x0800bc68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800bc68 	.word	0x0800bc68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <vApplicationGetIdleTaskMemory+0x28>)
 8000be8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000200 	.word	0x20000200
 8000c04:	200002a0 	.word	0x200002a0

08000c08 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f023 030f 	bic.w	r3, r3, #15
 8000c18:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	f043 030c 	orr.w	r3, r3, #12
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
 8000c36:	f043 030c 	orr.w	r3, r3, #12
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c48:	f107 0208 	add.w	r2, r7, #8
 8000c4c:	2364      	movs	r3, #100	; 0x64
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2304      	movs	r3, #4
 8000c52:	214e      	movs	r1, #78	; 0x4e
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <lcd_send_cmd+0x5c>)
 8000c56:	f001 fd2d 	bl	80026b4 <HAL_I2C_Master_Transmit>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200004a0 	.word	0x200004a0

08000c68 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f023 030f 	bic.w	r3, r3, #15
 8000c78:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	f043 030d 	orr.w	r3, r3, #13
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	f043 0309 	orr.w	r3, r3, #9
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	f043 030d 	orr.w	r3, r3, #13
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ca0:	f043 0309 	orr.w	r3, r3, #9
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ca8:	f107 0208 	add.w	r2, r7, #8
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	214e      	movs	r1, #78	; 0x4e
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <lcd_send_data+0x5c>)
 8000cb6:	f001 fcfd 	bl	80026b4 <HAL_I2C_Master_Transmit>
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200004a0 	.word	0x200004a0

08000cc8 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <lcd_put_cur+0x18>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d005      	beq.n	8000cea <lcd_put_cur+0x22>
 8000cde:	e009      	b.n	8000cf4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce6:	603b      	str	r3, [r7, #0]
            break;
 8000ce8:	e004      	b.n	8000cf4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cf0:	603b      	str	r3, [r7, #0]
            break;
 8000cf2:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff85 	bl	8000c08 <lcd_send_cmd>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <lcd_init>:


void lcd_init (void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d0a:	2032      	movs	r0, #50	; 0x32
 8000d0c:	f001 f824 	bl	8001d58 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d10:	2030      	movs	r0, #48	; 0x30
 8000d12:	f7ff ff79 	bl	8000c08 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d16:	2005      	movs	r0, #5
 8000d18:	f001 f81e 	bl	8001d58 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d1c:	2030      	movs	r0, #48	; 0x30
 8000d1e:	f7ff ff73 	bl	8000c08 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d22:	2001      	movs	r0, #1
 8000d24:	f001 f818 	bl	8001d58 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d28:	2030      	movs	r0, #48	; 0x30
 8000d2a:	f7ff ff6d 	bl	8000c08 <lcd_send_cmd>
	HAL_Delay(10);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f001 f812 	bl	8001d58 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d34:	2020      	movs	r0, #32
 8000d36:	f7ff ff67 	bl	8000c08 <lcd_send_cmd>
	HAL_Delay(10);
 8000d3a:	200a      	movs	r0, #10
 8000d3c:	f001 f80c 	bl	8001d58 <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f7ff ff61 	bl	8000c08 <lcd_send_cmd>
	HAL_Delay(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f001 f806 	bl	8001d58 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d4c:	2008      	movs	r0, #8
 8000d4e:	f7ff ff5b 	bl	8000c08 <lcd_send_cmd>
	HAL_Delay(1);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f001 f800 	bl	8001d58 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff ff55 	bl	8000c08 <lcd_send_cmd>
	HAL_Delay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 fffa 	bl	8001d58 <HAL_Delay>
	HAL_Delay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f000 fff7 	bl	8001d58 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d6a:	2006      	movs	r0, #6
 8000d6c:	f7ff ff4c 	bl	8000c08 <lcd_send_cmd>
	HAL_Delay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 fff1 	bl	8001d58 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d76:	200c      	movs	r0, #12
 8000d78:	f7ff ff46 	bl	8000c08 <lcd_send_cmd>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d88:	e006      	b.n	8000d98 <lcd_send_string+0x18>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff68 	bl	8000c68 <lcd_send_data>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f4      	bne.n	8000d8a <lcd_send_string+0xa>
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)// Xử lý ngắt khi nhận dữ liệu qua UART
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
		 if(huart->Instance == huart1.Instance)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_UART_RxCpltCallback+0x48>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d115      	bne.n	8000dec <HAL_UART_RxCpltCallback+0x40>
		 {
		   HAL_UART_Transmit(&huart1," Updating Cycle...\n",sizeof(" Updating cycle...\n"), 10);//Gửi lại tín hiệu xác nhận đã có ngắt
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	2214      	movs	r2, #20
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <HAL_UART_RxCpltCallback+0x4c>)
 8000dc6:	480b      	ldr	r0, [pc, #44]	; (8000df4 <HAL_UART_RxCpltCallback+0x48>)
 8000dc8:	f003 f8ca 	bl	8003f60 <HAL_UART_Transmit>
		   HAL_UART_Receive_IT(&huart1,rxData, 2);// Kích hoạt lại ngắt nhận dữ liệu
 8000dcc:	2202      	movs	r2, #2
 8000dce:	490b      	ldr	r1, [pc, #44]	; (8000dfc <HAL_UART_RxCpltCallback+0x50>)
 8000dd0:	4808      	ldr	r0, [pc, #32]	; (8000df4 <HAL_UART_RxCpltCallback+0x48>)
 8000dd2:	f003 f948 	bl	8004066 <HAL_UART_Receive_IT>
		   t= atoi(rxData);// Chuyển dữ liệu nhận được sang dạng số nguyên
 8000dd6:	4809      	ldr	r0, [pc, #36]	; (8000dfc <HAL_UART_RxCpltCallback+0x50>)
 8000dd8:	f006 fad0 	bl	800737c <atoi>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_UART_RxCpltCallback+0x54>)
 8000de0:	6013      	str	r3, [r2, #0]
		   osSemaphoreRelease(myCountingSem01Handle);
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_UART_RxCpltCallback+0x58>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 fffe 	bl	8004de8 <osSemaphoreRelease>
		 }
	}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000053c 	.word	0x2000053c
 8000df8:	0800bc80 	.word	0x0800bc80
 8000dfc:	200005d8 	.word	0x200005d8
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000594 	.word	0x20000594

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b0a0      	sub	sp, #128	; 0x80
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f000 ff71 	bl	8001cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f8a3 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 f98f 	bl	8001138 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e1a:	f000 f8e5 	bl	8000fe8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e1e:	f000 f911 	bl	8001044 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e22:	f000 f95f 	bl	80010e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000e26:	f7ff ff6e 	bl	8000d06 <lcd_init>
  HAL_UART_Receive_IT(&huart1,rxData, 2);// G�?i ngắt nhận dữ liệu
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	493c      	ldr	r1, [pc, #240]	; (8000f20 <main+0x118>)
 8000e2e:	483d      	ldr	r0, [pc, #244]	; (8000f24 <main+0x11c>)
 8000e30:	f003 f919 	bl	8004066 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 8000e34:	483c      	ldr	r0, [pc, #240]	; (8000f28 <main+0x120>)
 8000e36:	f002 fc25 	bl	8003684 <HAL_TIM_Base_Start>
  init_dht11(&dht,&htim1,GPIOA, GPIO_PIN_1);// Khởi tạo cho cảm biến DHT11
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	4a3b      	ldr	r2, [pc, #236]	; (8000f2c <main+0x124>)
 8000e3e:	493a      	ldr	r1, [pc, #232]	; (8000f28 <main+0x120>)
 8000e40:	483b      	ldr	r0, [pc, #236]	; (8000f30 <main+0x128>)
 8000e42:	f000 fb1f 	bl	8001484 <init_dht11>
  lcd_send_cmd(0x40);
 8000e46:	2040      	movs	r0, #64	; 0x40
 8000e48:	f7ff fede 	bl	8000c08 <lcd_send_cmd>
  for(int i=0;i<8;i++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e50:	e009      	b.n	8000e66 <main+0x5e>
  {
	lcd_send_data(kytu[i]);
 8000e52:	4a38      	ldr	r2, [pc, #224]	; (8000f34 <main+0x12c>)
 8000e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff04 	bl	8000c68 <lcd_send_data>
  for(int i=0;i<8;i++)
 8000e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e62:	3301      	adds	r3, #1
 8000e64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e68:	2b07      	cmp	r3, #7
 8000e6a:	ddf2      	ble.n	8000e52 <main+0x4a>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myCountingSem01 */
  osSemaphoreDef(myCountingSem01);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	677b      	str	r3, [r7, #116]	; 0x74
 8000e70:	2300      	movs	r3, #0
 8000e72:	67bb      	str	r3, [r7, #120]	; 0x78
  myCountingSem01Handle = osSemaphoreCreate(osSemaphore(myCountingSem01), 4);
 8000e74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e78:	2104      	movs	r1, #4
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 ff27 	bl	8004cce <osSemaphoreCreate>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <main+0x130>)
 8000e84:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readTemperature */
  osThreadDef(readTemperature, ReadTempTask, osPriorityHigh, 0, 128);
 8000e86:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <main+0x134>)
 8000e88:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000e8c:	461d      	mov	r5, r3
 8000e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTemperatureHandle = osThreadCreate(osThread(readTemperature), NULL);
 8000e9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 feb4 	bl	8004c0e <osThreadCreate>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a25      	ldr	r2, [pc, #148]	; (8000f40 <main+0x138>)
 8000eaa:	6013      	str	r3, [r2, #0]

  /* definition and creation of readHumidity */
  osThreadDef(readHumidity, ReadHumiTask, osPriorityNormal, 0, 128);
 8000eac:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <main+0x13c>)
 8000eae:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ebc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readHumidityHandle = osThreadCreate(osThread(readHumidity), NULL);
 8000ec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 fea1 	bl	8004c0e <osThreadCreate>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <main+0x140>)
 8000ed0:	6013      	str	r3, [r2, #0]

  /* definition and creation of CycleTask */
  osThreadDef(CycleTask, CycleTask03, osPriorityLow, 0, 128);
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <main+0x144>)
 8000ed4:	f107 0420 	add.w	r4, r7, #32
 8000ed8:	461d      	mov	r5, r3
 8000eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ede:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CycleTaskHandle = osThreadCreate(osThread(CycleTask), NULL);
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fe8e 	bl	8004c0e <osThreadCreate>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <main+0x148>)
 8000ef6:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_Task */
  osThreadDef(uart_Task, Task_UART, osPriorityBelowNormal, 0, 128);
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <main+0x14c>)
 8000efa:	1d3c      	adds	r4, r7, #4
 8000efc:	461d      	mov	r5, r3
 8000efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_TaskHandle = osThreadCreate(osThread(uart_Task), NULL);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fe7d 	bl	8004c0e <osThreadCreate>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <main+0x150>)
 8000f18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f1a:	f003 fe71 	bl	8004c00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <main+0x116>
 8000f20:	200005d8 	.word	0x200005d8
 8000f24:	2000053c 	.word	0x2000053c
 8000f28:	200004f4 	.word	0x200004f4
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	200005a0 	.word	0x200005a0
 8000f34:	20000004 	.word	0x20000004
 8000f38:	20000594 	.word	0x20000594
 8000f3c:	0800bca4 	.word	0x0800bca4
 8000f40:	20000584 	.word	0x20000584
 8000f44:	0800bcd0 	.word	0x0800bcd0
 8000f48:	20000588 	.word	0x20000588
 8000f4c:	0800bcf8 	.word	0x0800bcf8
 8000f50:	2000058c 	.word	0x2000058c
 8000f54:	0800bd20 	.word	0x0800bd20
 8000f58:	20000590 	.word	0x20000590

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b090      	sub	sp, #64	; 0x40
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	2228      	movs	r2, #40	; 0x28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f007 fa81 	bl	8008472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 fedd 	bl	8002d64 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fb0:	f000 fa63 	bl	800147a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 f94a 	bl	8003268 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fda:	f000 fa4e 	bl	800147a <Error_Handler>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3740      	adds	r7, #64	; 0x40
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_I2C1_Init+0x50>)
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <MX_I2C1_Init+0x54>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_I2C1_Init+0x50>)
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_I2C1_Init+0x58>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_I2C1_Init+0x50>)
 8001006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_I2C1_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_I2C1_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_I2C1_Init+0x50>)
 8001026:	f001 fa01 	bl	800242c <HAL_I2C_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001030:	f000 fa23 	bl	800147a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200004a0 	.word	0x200004a0
 800103c:	40005400 	.word	0x40005400
 8001040:	000186a0 	.word	0x000186a0

08001044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_TIM1_Init+0x98>)
 8001062:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <MX_TIM1_Init+0x9c>)
 8001064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_TIM1_Init+0x98>)
 8001068:	2247      	movs	r2, #71	; 0x47
 800106a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_TIM1_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_TIM1_Init+0x98>)
 8001074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_TIM1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_TIM1_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_TIM1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <MX_TIM1_Init+0x98>)
 800108e:	f002 faa9 	bl	80035e4 <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001098:	f000 f9ef 	bl	800147a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_TIM1_Init+0x98>)
 80010aa:	f002 fcb5 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80010b4:	f000 f9e1 	bl	800147a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_TIM1_Init+0x98>)
 80010c6:	f002 fe8b 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010d0:	f000 f9d3 	bl	800147a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200004f4 	.word	0x200004f4
 80010e0:	40012c00 	.word	0x40012c00

080010e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <MX_USART1_UART_Init+0x50>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 800111c:	f002 fed0 	bl	8003ec0 <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001126:	f000 f9a8 	bl	800147a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000053c 	.word	0x2000053c
 8001134:	40013800 	.word	0x40013800

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_GPIO_Init+0x8c>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <MX_GPIO_Init+0x8c>)
 8001152:	f043 0320 	orr.w	r3, r3, #32
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_GPIO_Init+0x8c>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0320 	and.w	r3, r3, #32
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_GPIO_Init+0x8c>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <MX_GPIO_Init+0x8c>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_GPIO_Init+0x8c>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_GPIO_Init+0x8c>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <MX_GPIO_Init+0x8c>)
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_GPIO_Init+0x8c>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2102      	movs	r1, #2
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <MX_GPIO_Init+0x90>)
 800119a:	f001 f92e 	bl	80023fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800119e:	2302      	movs	r3, #2
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_GPIO_Init+0x90>)
 80011b6:	f000 ff85 	bl	80020c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010800 	.word	0x40010800

080011cc <display_Cycle>:

/* USER CODE BEGIN 4 */
void display_Cycle()// Hiển thị chu kỳ lấy mẫu
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	lcd_put_cur(1, 11);
 80011d0:	210b      	movs	r1, #11
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff fd78 	bl	8000cc8 <lcd_put_cur>
	lcd_send_string("T:");
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <display_Cycle+0x44>)
 80011da:	f7ff fdd1 	bl	8000d80 <lcd_send_string>
	lcd_put_cur(1, 13);
 80011de:	210d      	movs	r1, #13
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff fd71 	bl	8000cc8 <lcd_put_cur>
	if(t==1){
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <display_Cycle+0x48>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d103      	bne.n	80011f6 <display_Cycle+0x2a>
		lcd_send_string("01");
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <display_Cycle+0x4c>)
 80011f0:	f7ff fdc6 	bl	8000d80 <lcd_send_string>
 80011f4:	e002      	b.n	80011fc <display_Cycle+0x30>
	}
	else
	{
	lcd_send_string(rxData);
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <display_Cycle+0x50>)
 80011f8:	f7ff fdc2 	bl	8000d80 <lcd_send_string>
	}
	lcd_put_cur(1, 15);
 80011fc:	210f      	movs	r1, #15
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff fd62 	bl	8000cc8 <lcd_put_cur>
	lcd_send_string("s");
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <display_Cycle+0x54>)
 8001206:	f7ff fdbb 	bl	8000d80 <lcd_send_string>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	0800bd3c 	.word	0x0800bd3c
 8001214:	20000000 	.word	0x20000000
 8001218:	0800bd40 	.word	0x0800bd40
 800121c:	200005d8 	.word	0x200005d8
 8001220:	0800bd44 	.word	0x0800bd44

08001224 <readTemperature>:

void readTemperature(void)// �?�?c và gửi dữ liệu nhiệt độ
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	readDHT11(&dht);
 8001228:	4816      	ldr	r0, [pc, #88]	; (8001284 <readTemperature+0x60>)
 800122a:	f000 f97a 	bl	8001522 <readDHT11>
	Temp = dht.temperature;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <readTemperature+0x60>)
 8001230:	7b1b      	ldrb	r3, [r3, #12]
 8001232:	461a      	mov	r2, r3
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <readTemperature+0x64>)
 8001236:	601a      	str	r2, [r3, #0]
	itoa(Temp,str,10);
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <readTemperature+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	220a      	movs	r2, #10
 800123e:	4913      	ldr	r1, [pc, #76]	; (800128c <readTemperature+0x68>)
 8001240:	4618      	mov	r0, r3
 8001242:	f006 f8b7 	bl	80073b4 <itoa>
	lcd_put_cur(0,0);
 8001246:	2100      	movs	r1, #0
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fd3d 	bl	8000cc8 <lcd_put_cur>
	lcd_send_string("Temp: ");
 800124e:	4810      	ldr	r0, [pc, #64]	; (8001290 <readTemperature+0x6c>)
 8001250:	f7ff fd96 	bl	8000d80 <lcd_send_string>
	lcd_put_cur(0, 6);
 8001254:	2106      	movs	r1, #6
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff fd36 	bl	8000cc8 <lcd_put_cur>
	lcd_send_string(str);
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <readTemperature+0x68>)
 800125e:	f7ff fd8f 	bl	8000d80 <lcd_send_string>
	lcd_put_cur(0, 8);
 8001262:	2108      	movs	r1, #8
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fd2f 	bl	8000cc8 <lcd_put_cur>
	lcd_send_data(0);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fcfc 	bl	8000c68 <lcd_send_data>
	lcd_put_cur(0, 9);
 8001270:	2109      	movs	r1, #9
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fd28 	bl	8000cc8 <lcd_put_cur>
	lcd_send_string("C");
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <readTemperature+0x70>)
 800127a:	f7ff fd81 	bl	8000d80 <lcd_send_string>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200005a0 	.word	0x200005a0
 8001288:	20000598 	.word	0x20000598
 800128c:	200005b0 	.word	0x200005b0
 8001290:	0800bd48 	.word	0x0800bd48
 8001294:	0800bd50 	.word	0x0800bd50

08001298 <readHumidity>:

void readHumidity(void)// �?�?c và gửi dữ liệu độ ẩm
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	readDHT11(&dht);
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <readHumidity+0x50>)
 800129e:	f000 f940 	bl	8001522 <readDHT11>
	Humi = dht.humidty;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <readHumidity+0x50>)
 80012a4:	7b5b      	ldrb	r3, [r3, #13]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <readHumidity+0x54>)
 80012aa:	601a      	str	r2, [r3, #0]
	itoa(Humi,stt,10);
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <readHumidity+0x54>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	220a      	movs	r2, #10
 80012b2:	490f      	ldr	r1, [pc, #60]	; (80012f0 <readHumidity+0x58>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f006 f87d 	bl	80073b4 <itoa>
	lcd_put_cur(1,0);
 80012ba:	2100      	movs	r1, #0
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff fd03 	bl	8000cc8 <lcd_put_cur>
	lcd_send_string("Humi: ");
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <readHumidity+0x5c>)
 80012c4:	f7ff fd5c 	bl	8000d80 <lcd_send_string>
	lcd_put_cur(1, 6);
 80012c8:	2106      	movs	r1, #6
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff fcfc 	bl	8000cc8 <lcd_put_cur>
	lcd_send_string(stt);
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <readHumidity+0x58>)
 80012d2:	f7ff fd55 	bl	8000d80 <lcd_send_string>
	lcd_put_cur(1, 9);
 80012d6:	2109      	movs	r1, #9
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fcf5 	bl	8000cc8 <lcd_put_cur>
	lcd_send_string("%");
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <readHumidity+0x60>)
 80012e0:	f7ff fd4e 	bl	8000d80 <lcd_send_string>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200005a0 	.word	0x200005a0
 80012ec:	2000059c 	.word	0x2000059c
 80012f0:	200005c4 	.word	0x200005c4
 80012f4:	0800bd54 	.word	0x0800bd54
 80012f8:	0800bd5c 	.word	0x0800bd5c

080012fc <update_Cycle>:
void update_Cycle(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	display_Cycle();
 8001300:	f7ff ff64 	bl	80011cc <display_Cycle>
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <UART_Transmit>:
void UART_Transmit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, "Temperature: ", sizeof("Temperature: "), 10);
 800130c:	230a      	movs	r3, #10
 800130e:	220e      	movs	r2, #14
 8001310:	4911      	ldr	r1, [pc, #68]	; (8001358 <UART_Transmit+0x50>)
 8001312:	4812      	ldr	r0, [pc, #72]	; (800135c <UART_Transmit+0x54>)
 8001314:	f002 fe24 	bl	8003f60 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 10);
 8001318:	230a      	movs	r3, #10
 800131a:	2214      	movs	r2, #20
 800131c:	4910      	ldr	r1, [pc, #64]	; (8001360 <UART_Transmit+0x58>)
 800131e:	480f      	ldr	r0, [pc, #60]	; (800135c <UART_Transmit+0x54>)
 8001320:	f002 fe1e 	bl	8003f60 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, " C", sizeof(" C"), 10);
 8001324:	230a      	movs	r3, #10
 8001326:	2203      	movs	r2, #3
 8001328:	490e      	ldr	r1, [pc, #56]	; (8001364 <UART_Transmit+0x5c>)
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <UART_Transmit+0x54>)
 800132c:	f002 fe18 	bl	8003f60 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, " Humidity: ", sizeof(" Humidity: "), 10);
 8001330:	230a      	movs	r3, #10
 8001332:	220c      	movs	r2, #12
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <UART_Transmit+0x60>)
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <UART_Transmit+0x54>)
 8001338:	f002 fe12 	bl	8003f60 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) stt, sizeof(stt), 10);
 800133c:	230a      	movs	r3, #10
 800133e:	2214      	movs	r2, #20
 8001340:	490a      	ldr	r1, [pc, #40]	; (800136c <UART_Transmit+0x64>)
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <UART_Transmit+0x54>)
 8001344:	f002 fe0c 	bl	8003f60 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, " %\n", sizeof(" %\n"), 10);
 8001348:	230a      	movs	r3, #10
 800134a:	2204      	movs	r2, #4
 800134c:	4908      	ldr	r1, [pc, #32]	; (8001370 <UART_Transmit+0x68>)
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <UART_Transmit+0x54>)
 8001350:	f002 fe06 	bl	8003f60 <HAL_UART_Transmit>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800bd60 	.word	0x0800bd60
 800135c:	2000053c 	.word	0x2000053c
 8001360:	200005b0 	.word	0x200005b0
 8001364:	0800bd70 	.word	0x0800bd70
 8001368:	0800bd74 	.word	0x0800bd74
 800136c:	200005c4 	.word	0x200005c4
 8001370:	0800bd80 	.word	0x0800bd80

08001374 <ReadTempTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadTempTask */
void ReadTempTask(void const * argument)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //display_Cycle();
	  readTemperature();
 800137c:	f7ff ff52 	bl	8001224 <readTemperature>
	  osSemaphoreRelease(myCountingSem01Handle);
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <ReadTempTask+0x2c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fd2f 	bl	8004de8 <osSemaphoreRelease>
	  osDelay(t*1000);
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <ReadTempTask+0x30>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fc85 	bl	8004ca6 <osDelay>
	  readTemperature();
 800139c:	e7ee      	b.n	800137c <ReadTempTask+0x8>
 800139e:	bf00      	nop
 80013a0:	20000594 	.word	0x20000594
 80013a4:	20000000 	.word	0x20000000

080013a8 <ReadHumiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadHumiTask */
void ReadHumiTask(void const * argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadHumiTask */
  /* Infinite loop */
  for(;;)
  {
	  readHumidity();
 80013b0:	f7ff ff72 	bl	8001298 <readHumidity>
	  osSemaphoreRelease(myCountingSem01Handle);
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <ReadHumiTask+0x2c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fd15 	bl	8004de8 <osSemaphoreRelease>
	  osDelay(t*1000);
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <ReadHumiTask+0x30>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fc6b 	bl	8004ca6 <osDelay>
	  readHumidity();
 80013d0:	e7ee      	b.n	80013b0 <ReadHumiTask+0x8>
 80013d2:	bf00      	nop
 80013d4:	20000594 	.word	0x20000594
 80013d8:	20000000 	.word	0x20000000

080013dc <CycleTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CycleTask03 */
void CycleTask03(void const * argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CycleTask03 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <CycleTask03+0x48>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fcad 	bl	8004d4c <osSemaphoreWait>
	  osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <CycleTask03+0x48>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f04f 31ff 	mov.w	r1, #4294967295
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fca6 	bl	8004d4c <osSemaphoreWait>
	  osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <CycleTask03+0x48>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fc9f 	bl	8004d4c <osSemaphoreWait>
	  osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <CycleTask03+0x48>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f04f 31ff 	mov.w	r1, #4294967295
 8001416:	4618      	mov	r0, r3
 8001418:	f003 fc98 	bl	8004d4c <osSemaphoreWait>
	  update_Cycle();
 800141c:	f7ff ff6e 	bl	80012fc <update_Cycle>
	  osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 8001420:	e7e0      	b.n	80013e4 <CycleTask03+0x8>
 8001422:	bf00      	nop
 8001424:	20000594 	.word	0x20000594

08001428 <Task_UART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_UART */
void Task_UART(void const * argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_UART */
  /* Infinite loop */
  for(;;)
  {
	  UART_Transmit();
 8001430:	f7ff ff6a 	bl	8001308 <UART_Transmit>
	  osSemaphoreRelease(myCountingSem01Handle);
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <Task_UART+0x2c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fcd5 	bl	8004de8 <osSemaphoreRelease>
    osDelay(t*1000);
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <Task_UART+0x30>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fc2b 	bl	8004ca6 <osDelay>
	  UART_Transmit();
 8001450:	e7ee      	b.n	8001430 <Task_UART+0x8>
 8001452:	bf00      	nop
 8001454:	20000594 	.word	0x20000594
 8001458:	20000000 	.word	0x20000000

0800145c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146c:	d101      	bne.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800146e:	f000 fc57 	bl	8001d20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147e:	b672      	cpsid	i
}
 8001480:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001482:	e7fe      	b.n	8001482 <Error_Handler+0x8>

08001484 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	887a      	ldrh	r2, [r7, #2]
 80014a2:	809a      	strh	r2, [r3, #4]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
static void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]

	if(pMode == OUTPUT)
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d111      	bne.n	80014f2 <set_dht11_gpio_mode+0x44>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	889b      	ldrh	r3, [r3, #4]
 80014d2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f107 0208 	add.w	r2, r7, #8
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fdea 	bl	80020c4 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 80014f0:	e013      	b.n	800151a <set_dht11_gpio_mode+0x6c>
	}else if(pMode == INPUT)
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d110      	bne.n	800151a <set_dht11_gpio_mode+0x6c>
	  GPIO_InitStruct.Pin = dht->pin;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	889b      	ldrh	r3, [r3, #4]
 80014fc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fdd5 	bl	80020c4 <HAL_GPIO_Init>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b094      	sub	sp, #80	; 0x50
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800152e:	2300      	movs	r3, #0
 8001530:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001532:	2300      	movs	r3, #0
 8001534:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t tempVal = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	uint8_t parityVal = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 800154a:	2101      	movs	r1, #1
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ffae 	bl	80014ae <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	889b      	ldrh	r3, [r3, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	f000 ff4c 	bl	80023fa <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8001562:	2012      	movs	r0, #18
 8001564:	f000 fbf8 	bl	8001d58 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4618      	mov	r0, r3
 8001572:	f002 f887 	bl	8003684 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 8001576:	2100      	movs	r1, #0
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff98 	bl	80014ae <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001588:	e00b      	b.n	80015a2 <readDHT11+0x80>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	b29b      	uxth	r3, r3
 8001594:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001598:	d903      	bls.n	80015a2 <readDHT11+0x80>
  __ASM volatile ("cpsie i" : : : "memory");
 800159a:	b662      	cpsie	i
}
 800159c:	bf00      	nop
			__enable_irq();
			return 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	e129      	b.n	80017f6 <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f000 ff0d 	bl	80023cc <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d0e8      	beq.n	800158a <readDHT11+0x68>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80015c2:	e00b      	b.n	80015dc <readDHT11+0xba>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015d2:	d903      	bls.n	80015dc <readDHT11+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 80015d4:	b662      	cpsie	i
}
 80015d6:	bf00      	nop
			__enable_irq();
			return 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	e10c      	b.n	80017f6 <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	889b      	ldrh	r3, [r3, #4]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f000 fef0 	bl	80023cc <HAL_GPIO_ReadPin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0e8      	beq.n	80015c4 <readDHT11+0xa2>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001606:	e00b      	b.n	8001620 <readDHT11+0xfe>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	b29b      	uxth	r3, r3
 8001612:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001616:	d903      	bls.n	8001620 <readDHT11+0xfe>
  __ASM volatile ("cpsie i" : : : "memory");
 8001618:	b662      	cpsie	i
}
 800161a:	bf00      	nop
			__enable_irq();
			return 0;
 800161c:	2300      	movs	r3, #0
 800161e:	e0ea      	b.n	80017f6 <readDHT11+0x2d4>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f000 fece 	bl	80023cc <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d0e8      	beq.n	8001608 <readDHT11+0xe6>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8001640:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001642:	2b4a      	cmp	r3, #74	; 0x4a
 8001644:	d80c      	bhi.n	8001660 <readDHT11+0x13e>
 8001646:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001648:	2b55      	cmp	r3, #85	; 0x55
 800164a:	d909      	bls.n	8001660 <readDHT11+0x13e>
 800164c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800164e:	2b4a      	cmp	r3, #74	; 0x4a
 8001650:	d806      	bhi.n	8001660 <readDHT11+0x13e>
 8001652:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001654:	2b55      	cmp	r3, #85	; 0x55
 8001656:	d903      	bls.n	8001660 <readDHT11+0x13e>
  __ASM volatile ("cpsie i" : : : "memory");
 8001658:	b662      	cpsie	i
}
 800165a:	bf00      	nop
	{
		__enable_irq();
		return 0;
 800165c:	2300      	movs	r3, #0
 800165e:	e0ca      	b.n	80017f6 <readDHT11+0x2d4>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 8001660:	2300      	movs	r3, #0
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
 8001664:	e05d      	b.n	8001722 <readDHT11+0x200>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001670:	e00b      	b.n	800168a <readDHT11+0x168>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	b29b      	uxth	r3, r3
 800167c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001680:	d903      	bls.n	800168a <readDHT11+0x168>
  __ASM volatile ("cpsie i" : : : "memory");
 8001682:	b662      	cpsie	i
}
 8001684:	bf00      	nop
				__enable_irq();
				return 0;
 8001686:	2300      	movs	r3, #0
 8001688:	e0b5      	b.n	80017f6 <readDHT11+0x2d4>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	889b      	ldrh	r3, [r3, #4]
 8001692:	4619      	mov	r1, r3
 8001694:	4610      	mov	r0, r2
 8001696:	f000 fe99 	bl	80023cc <HAL_GPIO_ReadPin>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0e8      	beq.n	8001672 <readDHT11+0x150>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80016aa:	e00b      	b.n	80016c4 <readDHT11+0x1a2>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016ba:	d903      	bls.n	80016c4 <readDHT11+0x1a2>
  __ASM volatile ("cpsie i" : : : "memory");
 80016bc:	b662      	cpsie	i
}
 80016be:	bf00      	nop
				__enable_irq();
				return 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e098      	b.n	80017f6 <readDHT11+0x2d4>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	889b      	ldrh	r3, [r3, #4]
 80016cc:	4619      	mov	r1, r3
 80016ce:	4610      	mov	r0, r2
 80016d0:	f000 fe7c 	bl	80023cc <HAL_GPIO_ReadPin>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d0e8      	beq.n	80016ac <readDHT11+0x18a>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 80016e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016e6:	2b14      	cmp	r3, #20
 80016e8:	d906      	bls.n	80016f8 <readDHT11+0x1d6>
 80016ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016ec:	2b1d      	cmp	r3, #29
 80016ee:	d803      	bhi.n	80016f8 <readDHT11+0x1d6>
		{
			mBit = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80016f6:	e008      	b.n	800170a <readDHT11+0x1e8>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 80016f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016fa:	2b3c      	cmp	r3, #60	; 0x3c
 80016fc:	d905      	bls.n	800170a <readDHT11+0x1e8>
 80016fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001700:	2b4f      	cmp	r3, #79	; 0x4f
 8001702:	d802      	bhi.n	800170a <readDHT11+0x1e8>
		{
			 mBit = 1;
 8001704:	2301      	movs	r3, #1
 8001706:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 800170a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800170e:	b2d9      	uxtb	r1, r3
 8001710:	f107 020c 	add.w	r2, r7, #12
 8001714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001716:	4413      	add	r3, r2
 8001718:	460a      	mov	r2, r1
 800171a:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 800171c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800171e:	3301      	adds	r3, #1
 8001720:	647b      	str	r3, [r7, #68]	; 0x44
 8001722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001724:	2b27      	cmp	r3, #39	; 0x27
 8001726:	dd9e      	ble.n	8001666 <readDHT11+0x144>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4618      	mov	r0, r3
 800172e:	f001 fff3 	bl	8003718 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8001732:	b662      	cpsie	i
}
 8001734:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8001736:	2300      	movs	r3, #0
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
 800173a:	e011      	b.n	8001760 <readDHT11+0x23e>
	{
		humVal += mData[i];
 800173c:	f107 020c 	add.w	r2, r7, #12
 8001740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001742:	4413      	add	r3, r2
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800174a:	4413      	add	r3, r2
 800174c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 8001750:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 800175a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800175c:	3301      	adds	r3, #1
 800175e:	643b      	str	r3, [r7, #64]	; 0x40
 8001760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001762:	2b07      	cmp	r3, #7
 8001764:	ddea      	ble.n	800173c <readDHT11+0x21a>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8001766:	2310      	movs	r3, #16
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800176a:	e011      	b.n	8001790 <readDHT11+0x26e>
	{
		tempVal += mData[i];
 800176c:	f107 020c 	add.w	r2, r7, #12
 8001770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001772:	4413      	add	r3, r2
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800177a:	4413      	add	r3, r2
 800177c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 8001780:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 800178a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178c:	3301      	adds	r3, #1
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001792:	2b17      	cmp	r3, #23
 8001794:	ddea      	ble.n	800176c <readDHT11+0x24a>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8001796:	2320      	movs	r3, #32
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
 800179a:	e011      	b.n	80017c0 <readDHT11+0x29e>
	{
		parityVal += mData[i];
 800179c:	f107 020c 	add.w	r2, r7, #12
 80017a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a2:	4413      	add	r3, r2
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80017aa:	4413      	add	r3, r2
 80017ac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 80017b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 80017ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017bc:	3301      	adds	r3, #1
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c2:	2b27      	cmp	r3, #39	; 0x27
 80017c4:	ddea      	ble.n	800179c <readDHT11+0x27a>
	}

	parityVal = parityVal >> 1;
 80017c6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80017ca:	085b      	lsrs	r3, r3, #1
 80017cc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 80017d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 80017da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c



//	if(genParity == parityVal)

	dht->temperature = tempVal;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80017ea:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80017f2:	735a      	strb	r2, [r3, #13]

	return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3750      	adds	r7, #80	; 0x50
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_MspInit+0x68>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a17      	ldr	r2, [pc, #92]	; (8001868 <HAL_MspInit+0x68>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_MspInit+0x68>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_MspInit+0x68>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_MspInit+0x68>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x68>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	210f      	movs	r1, #15
 800183a:	f06f 0001 	mvn.w	r0, #1
 800183e:	f000 fb64 	bl	8001f0a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_MspInit+0x6c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_MspInit+0x6c>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000

08001870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <HAL_I2C_MspInit+0x70>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d123      	bne.n	80018d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_I2C_MspInit+0x74>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <HAL_I2C_MspInit+0x74>)
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_I2C_MspInit+0x74>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018a8:	23c0      	movs	r3, #192	; 0xc0
 80018aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ac:	2312      	movs	r3, #18
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	480b      	ldr	r0, [pc, #44]	; (80018e8 <HAL_I2C_MspInit+0x78>)
 80018bc:	f000 fc02 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_I2C_MspInit+0x74>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_I2C_MspInit+0x74>)
 80018c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ca:	61d3      	str	r3, [r2, #28]
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_I2C_MspInit+0x74>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40005400 	.word	0x40005400
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010c00 	.word	0x40010c00

080018ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_TIM_Base_MspInit+0x34>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d10b      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_TIM_Base_MspInit+0x38>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_TIM_Base_MspInit+0x38>)
 8001904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001908:	6193      	str	r3, [r2, #24]
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_TIM_Base_MspInit+0x38>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40012c00 	.word	0x40012c00
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <HAL_UART_MspInit+0x9c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d139      	bne.n	80019bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_UART_MspInit+0xa0>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <HAL_UART_MspInit+0xa0>)
 800194e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_UART_MspInit+0xa0>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_UART_MspInit+0xa0>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <HAL_UART_MspInit+0xa0>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_UART_MspInit+0xa0>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800197c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4619      	mov	r1, r3
 800198c:	480f      	ldr	r0, [pc, #60]	; (80019cc <HAL_UART_MspInit+0xa4>)
 800198e:	f000 fb99 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <HAL_UART_MspInit+0xa4>)
 80019a8:	f000 fb8c 	bl	80020c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2106      	movs	r1, #6
 80019b0:	2025      	movs	r0, #37	; 0x25
 80019b2:	f000 faaa 	bl	8001f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b6:	2025      	movs	r0, #37	; 0x25
 80019b8:	f000 fac3 	bl	8001f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40013800 	.word	0x40013800
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010800 	.word	0x40010800

080019d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08e      	sub	sp, #56	; 0x38
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <HAL_InitTick+0xe8>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a33      	ldr	r2, [pc, #204]	; (8001ab8 <HAL_InitTick+0xe8>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <HAL_InitTick+0xe8>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019fe:	f107 0210 	add.w	r2, r7, #16
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 fd9d 	bl	8003548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a18:	f001 fd6e 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8001a1c:	6378      	str	r0, [r7, #52]	; 0x34
 8001a1e:	e004      	b.n	8001a2a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a20:	f001 fd6a 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8001a24:	4603      	mov	r3, r0
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <HAL_InitTick+0xec>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0c9b      	lsrs	r3, r3, #18
 8001a34:	3b01      	subs	r3, #1
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_InitTick+0xf0>)
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <HAL_InitTick+0xf0>)
 8001a42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a46:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_InitTick+0xf0>)
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_InitTick+0xf0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_InitTick+0xf0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_InitTick+0xf0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001a60:	4817      	ldr	r0, [pc, #92]	; (8001ac0 <HAL_InitTick+0xf0>)
 8001a62:	f001 fdbf 	bl	80035e4 <HAL_TIM_Base_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11b      	bne.n	8001aac <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001a74:	4812      	ldr	r0, [pc, #72]	; (8001ac0 <HAL_InitTick+0xf0>)
 8001a76:	f001 fe75 	bl	8003764 <HAL_TIM_Base_Start_IT>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d111      	bne.n	8001aac <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a88:	201c      	movs	r0, #28
 8001a8a:	f000 fa5a 	bl	8001f42 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d808      	bhi.n	8001aa6 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	201c      	movs	r0, #28
 8001a9a:	f000 fa36 	bl	8001f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_InitTick+0xf4>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	e002      	b.n	8001aac <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001aac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3738      	adds	r7, #56	; 0x38
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	200005dc 	.word	0x200005dc
 8001ac4:	20000010 	.word	0x20000010

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
	...

08001af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <TIM2_IRQHandler+0x10>)
 8001afa:	f001 fe85 	bl	8003808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200005dc 	.word	0x200005dc

08001b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <USART1_IRQHandler+0x10>)
 8001b0e:	f002 facf 	bl	80040b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000053c 	.word	0x2000053c

08001b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_kill>:

int _kill(int pid, int sig)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b34:	f006 fd46 	bl	80085c4 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2216      	movs	r2, #22
 8001b3c:	601a      	str	r2, [r3, #0]
  return -1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_exit>:

void _exit (int status)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b52:	f04f 31ff 	mov.w	r1, #4294967295
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffe7 	bl	8001b2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b5c:	e7fe      	b.n	8001b5c <_exit+0x12>

08001b5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	e00a      	b.n	8001b86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b70:	f3af 8000 	nop.w
 8001b74:	4601      	mov	r1, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	60ba      	str	r2, [r7, #8]
 8001b7c:	b2ca      	uxtb	r2, r1
 8001b7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbf0      	blt.n	8001b70 <_read+0x12>
  }

  return len;
 8001b8e:	687b      	ldr	r3, [r7, #4]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e009      	b.n	8001bbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	60ba      	str	r2, [r7, #8]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbf1      	blt.n	8001baa <_write+0x12>
  }
  return len;
 8001bc6:	687b      	ldr	r3, [r7, #4]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_close>:

int _close(int file)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <_isatty>:

int _isatty(int file)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <_sbrk+0x5c>)
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <_sbrk+0x60>)
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <_sbrk+0x64>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <_sbrk+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d207      	bcs.n	8001c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c60:	f006 fcb0 	bl	80085c4 <__errno>
 8001c64:	4603      	mov	r3, r0
 8001c66:	220c      	movs	r2, #12
 8001c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e009      	b.n	8001c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <_sbrk+0x64>)
 8001c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20005000 	.word	0x20005000
 8001c90:	00000400 	.word	0x00000400
 8001c94:	20000624 	.word	0x20000624
 8001c98:	200014c8 	.word	0x200014c8

08001c9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca8:	f7ff fff8 	bl	8001c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cae:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cc4:	4c09      	ldr	r4, [pc, #36]	; (8001cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f006 fc7d 	bl	80085d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cd6:	f7ff f897 	bl	8000e08 <main>
  bx lr
 8001cda:	4770      	bx	lr
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ce4:	0800c210 	.word	0x0800c210
  ldr r2, =_sbss
 8001ce8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001cec:	200014c4 	.word	0x200014c4

08001cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC1_2_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_Init+0x28>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_Init+0x28>)
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f000 f8f5 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0a:	200f      	movs	r0, #15
 8001d0c:	f7ff fe60 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d10:	f7ff fd76 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000

08001d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_IncTick+0x1c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_IncTick+0x20>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a03      	ldr	r2, [pc, #12]	; (8001d40 <HAL_IncTick+0x20>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000014 	.word	0x20000014
 8001d40:	20000628 	.word	0x20000628

08001d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b02      	ldr	r3, [pc, #8]	; (8001d54 <HAL_GetTick+0x10>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000628 	.word	0x20000628

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff fff0 	bl	8001d44 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffe0 	bl	8001d44 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000014 	.word	0x20000014

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4906      	ldr	r1, [pc, #24]	; (8001e38 <__NVIC_EnableIRQ+0x34>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff4f 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1c:	f7ff ff64 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	f7ff ffb2 	bl	8001e90 <NVIC_EncodePriority>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff81 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff57 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d008      	beq.n	8001f88 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e020      	b.n	8001fca <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 020e 	bic.w	r2, r2, #14
 8001f96:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d005      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e051      	b.n	800209c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 020e 	bic.w	r2, r2, #14
 8002006:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <HAL_DMA_Abort_IT+0xd4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d029      	beq.n	8002076 <HAL_DMA_Abort_IT+0xa2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a21      	ldr	r2, [pc, #132]	; (80020ac <HAL_DMA_Abort_IT+0xd8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <HAL_DMA_Abort_IT+0x9e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <HAL_DMA_Abort_IT+0xdc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01a      	beq.n	800206c <HAL_DMA_Abort_IT+0x98>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_DMA_Abort_IT+0xe0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d012      	beq.n	8002066 <HAL_DMA_Abort_IT+0x92>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1c      	ldr	r2, [pc, #112]	; (80020b8 <HAL_DMA_Abort_IT+0xe4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00a      	beq.n	8002060 <HAL_DMA_Abort_IT+0x8c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_DMA_Abort_IT+0xe8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d102      	bne.n	800205a <HAL_DMA_Abort_IT+0x86>
 8002054:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002058:	e00e      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 800205a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800205e:	e00b      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 8002060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002064:	e008      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206a:	e005      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 800206c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002070:	e002      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 8002072:	2310      	movs	r3, #16
 8002074:	e000      	b.n	8002078 <HAL_DMA_Abort_IT+0xa4>
 8002076:	2301      	movs	r3, #1
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <HAL_DMA_Abort_IT+0xec>)
 800207a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
    } 
  }
  return status;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40020008 	.word	0x40020008
 80020ac:	4002001c 	.word	0x4002001c
 80020b0:	40020030 	.word	0x40020030
 80020b4:	40020044 	.word	0x40020044
 80020b8:	40020058 	.word	0x40020058
 80020bc:	4002006c 	.word	0x4002006c
 80020c0:	40020000 	.word	0x40020000

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b08b      	sub	sp, #44	; 0x2c
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	e169      	b.n	80023ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020d8:	2201      	movs	r2, #1
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f040 8158 	bne.w	80023a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a9a      	ldr	r2, [pc, #616]	; (8002364 <HAL_GPIO_Init+0x2a0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d05e      	beq.n	80021be <HAL_GPIO_Init+0xfa>
 8002100:	4a98      	ldr	r2, [pc, #608]	; (8002364 <HAL_GPIO_Init+0x2a0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d875      	bhi.n	80021f2 <HAL_GPIO_Init+0x12e>
 8002106:	4a98      	ldr	r2, [pc, #608]	; (8002368 <HAL_GPIO_Init+0x2a4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d058      	beq.n	80021be <HAL_GPIO_Init+0xfa>
 800210c:	4a96      	ldr	r2, [pc, #600]	; (8002368 <HAL_GPIO_Init+0x2a4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d86f      	bhi.n	80021f2 <HAL_GPIO_Init+0x12e>
 8002112:	4a96      	ldr	r2, [pc, #600]	; (800236c <HAL_GPIO_Init+0x2a8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d052      	beq.n	80021be <HAL_GPIO_Init+0xfa>
 8002118:	4a94      	ldr	r2, [pc, #592]	; (800236c <HAL_GPIO_Init+0x2a8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d869      	bhi.n	80021f2 <HAL_GPIO_Init+0x12e>
 800211e:	4a94      	ldr	r2, [pc, #592]	; (8002370 <HAL_GPIO_Init+0x2ac>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d04c      	beq.n	80021be <HAL_GPIO_Init+0xfa>
 8002124:	4a92      	ldr	r2, [pc, #584]	; (8002370 <HAL_GPIO_Init+0x2ac>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d863      	bhi.n	80021f2 <HAL_GPIO_Init+0x12e>
 800212a:	4a92      	ldr	r2, [pc, #584]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d046      	beq.n	80021be <HAL_GPIO_Init+0xfa>
 8002130:	4a90      	ldr	r2, [pc, #576]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d85d      	bhi.n	80021f2 <HAL_GPIO_Init+0x12e>
 8002136:	2b12      	cmp	r3, #18
 8002138:	d82a      	bhi.n	8002190 <HAL_GPIO_Init+0xcc>
 800213a:	2b12      	cmp	r3, #18
 800213c:	d859      	bhi.n	80021f2 <HAL_GPIO_Init+0x12e>
 800213e:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <HAL_GPIO_Init+0x80>)
 8002140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002144:	080021bf 	.word	0x080021bf
 8002148:	08002199 	.word	0x08002199
 800214c:	080021ab 	.word	0x080021ab
 8002150:	080021ed 	.word	0x080021ed
 8002154:	080021f3 	.word	0x080021f3
 8002158:	080021f3 	.word	0x080021f3
 800215c:	080021f3 	.word	0x080021f3
 8002160:	080021f3 	.word	0x080021f3
 8002164:	080021f3 	.word	0x080021f3
 8002168:	080021f3 	.word	0x080021f3
 800216c:	080021f3 	.word	0x080021f3
 8002170:	080021f3 	.word	0x080021f3
 8002174:	080021f3 	.word	0x080021f3
 8002178:	080021f3 	.word	0x080021f3
 800217c:	080021f3 	.word	0x080021f3
 8002180:	080021f3 	.word	0x080021f3
 8002184:	080021f3 	.word	0x080021f3
 8002188:	080021a1 	.word	0x080021a1
 800218c:	080021b5 	.word	0x080021b5
 8002190:	4a79      	ldr	r2, [pc, #484]	; (8002378 <HAL_GPIO_Init+0x2b4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002196:	e02c      	b.n	80021f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	623b      	str	r3, [r7, #32]
          break;
 800219e:	e029      	b.n	80021f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	3304      	adds	r3, #4
 80021a6:	623b      	str	r3, [r7, #32]
          break;
 80021a8:	e024      	b.n	80021f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	3308      	adds	r3, #8
 80021b0:	623b      	str	r3, [r7, #32]
          break;
 80021b2:	e01f      	b.n	80021f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	330c      	adds	r3, #12
 80021ba:	623b      	str	r3, [r7, #32]
          break;
 80021bc:	e01a      	b.n	80021f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021c6:	2304      	movs	r3, #4
 80021c8:	623b      	str	r3, [r7, #32]
          break;
 80021ca:	e013      	b.n	80021f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d4:	2308      	movs	r3, #8
 80021d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	611a      	str	r2, [r3, #16]
          break;
 80021de:	e009      	b.n	80021f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e0:	2308      	movs	r3, #8
 80021e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	615a      	str	r2, [r3, #20]
          break;
 80021ea:	e003      	b.n	80021f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
          break;
 80021f0:	e000      	b.n	80021f4 <HAL_GPIO_Init+0x130>
          break;
 80021f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2bff      	cmp	r3, #255	; 0xff
 80021f8:	d801      	bhi.n	80021fe <HAL_GPIO_Init+0x13a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	e001      	b.n	8002202 <HAL_GPIO_Init+0x13e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2bff      	cmp	r3, #255	; 0xff
 8002208:	d802      	bhi.n	8002210 <HAL_GPIO_Init+0x14c>
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	e002      	b.n	8002216 <HAL_GPIO_Init+0x152>
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	3b08      	subs	r3, #8
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	210f      	movs	r1, #15
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	401a      	ands	r2, r3
 8002228:	6a39      	ldr	r1, [r7, #32]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	431a      	orrs	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80b1 	beq.w	80023a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002244:	4b4d      	ldr	r3, [pc, #308]	; (800237c <HAL_GPIO_Init+0x2b8>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a4c      	ldr	r2, [pc, #304]	; (800237c <HAL_GPIO_Init+0x2b8>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6193      	str	r3, [r2, #24]
 8002250:	4b4a      	ldr	r3, [pc, #296]	; (800237c <HAL_GPIO_Init+0x2b8>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <HAL_GPIO_Init+0x2bc>)
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	3302      	adds	r3, #2
 8002264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002268:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a40      	ldr	r2, [pc, #256]	; (8002384 <HAL_GPIO_Init+0x2c0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d013      	beq.n	80022b0 <HAL_GPIO_Init+0x1ec>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3f      	ldr	r2, [pc, #252]	; (8002388 <HAL_GPIO_Init+0x2c4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00d      	beq.n	80022ac <HAL_GPIO_Init+0x1e8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3e      	ldr	r2, [pc, #248]	; (800238c <HAL_GPIO_Init+0x2c8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d007      	beq.n	80022a8 <HAL_GPIO_Init+0x1e4>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3d      	ldr	r2, [pc, #244]	; (8002390 <HAL_GPIO_Init+0x2cc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d101      	bne.n	80022a4 <HAL_GPIO_Init+0x1e0>
 80022a0:	2303      	movs	r3, #3
 80022a2:	e006      	b.n	80022b2 <HAL_GPIO_Init+0x1ee>
 80022a4:	2304      	movs	r3, #4
 80022a6:	e004      	b.n	80022b2 <HAL_GPIO_Init+0x1ee>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e002      	b.n	80022b2 <HAL_GPIO_Init+0x1ee>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <HAL_GPIO_Init+0x1ee>
 80022b0:	2300      	movs	r3, #0
 80022b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b4:	f002 0203 	and.w	r2, r2, #3
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	4093      	lsls	r3, r2
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022c2:	492f      	ldr	r1, [pc, #188]	; (8002380 <HAL_GPIO_Init+0x2bc>)
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	492c      	ldr	r1, [pc, #176]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ea:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	4928      	ldr	r1, [pc, #160]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4922      	ldr	r1, [pc, #136]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	60cb      	str	r3, [r1, #12]
 8002310:	e006      	b.n	8002320 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	43db      	mvns	r3, r3
 800231a:	491e      	ldr	r1, [pc, #120]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 800231c:	4013      	ands	r3, r2
 800231e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4918      	ldr	r1, [pc, #96]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	43db      	mvns	r3, r3
 8002342:	4914      	ldr	r1, [pc, #80]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 8002344:	4013      	ands	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d021      	beq.n	8002398 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_GPIO_Init+0x2d0>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
 8002360:	e021      	b.n	80023a6 <HAL_GPIO_Init+0x2e2>
 8002362:	bf00      	nop
 8002364:	10320000 	.word	0x10320000
 8002368:	10310000 	.word	0x10310000
 800236c:	10220000 	.word	0x10220000
 8002370:	10210000 	.word	0x10210000
 8002374:	10120000 	.word	0x10120000
 8002378:	10110000 	.word	0x10110000
 800237c:	40021000 	.word	0x40021000
 8002380:	40010000 	.word	0x40010000
 8002384:	40010800 	.word	0x40010800
 8002388:	40010c00 	.word	0x40010c00
 800238c:	40011000 	.word	0x40011000
 8002390:	40011400 	.word	0x40011400
 8002394:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_GPIO_Init+0x304>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	43db      	mvns	r3, r3
 80023a0:	4909      	ldr	r1, [pc, #36]	; (80023c8 <HAL_GPIO_Init+0x304>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	3301      	adds	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f47f ae8e 	bne.w	80020d8 <HAL_GPIO_Init+0x14>
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	372c      	adds	r7, #44	; 0x2c
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	40010400 	.word	0x40010400

080023cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e001      	b.n	80023ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]
 8002406:	4613      	mov	r3, r2
 8002408:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800240a:	787b      	ldrb	r3, [r7, #1]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002410:	887a      	ldrh	r2, [r7, #2]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002416:	e003      	b.n	8002420 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	041a      	lsls	r2, r3, #16
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e12b      	b.n	8002696 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff fa0c 	bl	8001870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2224      	movs	r2, #36	; 0x24
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800247e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800248e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002490:	f001 f832 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8002494:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a81      	ldr	r2, [pc, #516]	; (80026a0 <HAL_I2C_Init+0x274>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d807      	bhi.n	80024b0 <HAL_I2C_Init+0x84>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a80      	ldr	r2, [pc, #512]	; (80026a4 <HAL_I2C_Init+0x278>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	bf94      	ite	ls
 80024a8:	2301      	movls	r3, #1
 80024aa:	2300      	movhi	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e006      	b.n	80024be <HAL_I2C_Init+0x92>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4a7d      	ldr	r2, [pc, #500]	; (80026a8 <HAL_I2C_Init+0x27c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0e7      	b.n	8002696 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a78      	ldr	r2, [pc, #480]	; (80026ac <HAL_I2C_Init+0x280>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0c9b      	lsrs	r3, r3, #18
 80024d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a6a      	ldr	r2, [pc, #424]	; (80026a0 <HAL_I2C_Init+0x274>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d802      	bhi.n	8002500 <HAL_I2C_Init+0xd4>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	e009      	b.n	8002514 <HAL_I2C_Init+0xe8>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_I2C_Init+0x284>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	3301      	adds	r3, #1
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002526:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	495c      	ldr	r1, [pc, #368]	; (80026a0 <HAL_I2C_Init+0x274>)
 8002530:	428b      	cmp	r3, r1
 8002532:	d819      	bhi.n	8002568 <HAL_I2C_Init+0x13c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e59      	subs	r1, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002542:	1c59      	adds	r1, r3, #1
 8002544:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002548:	400b      	ands	r3, r1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_I2C_Init+0x138>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e59      	subs	r1, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fbb1 f3f3 	udiv	r3, r1, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	e051      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002564:	2304      	movs	r3, #4
 8002566:	e04f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d111      	bne.n	8002594 <HAL_I2C_Init+0x168>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e58      	subs	r0, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e012      	b.n	80025ba <HAL_I2C_Init+0x18e>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	0099      	lsls	r1, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Init+0x196>
 80025be:	2301      	movs	r3, #1
 80025c0:	e022      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10e      	bne.n	80025e8 <HAL_I2C_Init+0x1bc>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e58      	subs	r0, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	440b      	add	r3, r1
 80025d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e6:	e00f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6809      	ldr	r1, [r1, #0]
 800260c:	4313      	orrs	r3, r2
 800260e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6911      	ldr	r1, [r2, #16]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	000186a0 	.word	0x000186a0
 80026a4:	001e847f 	.word	0x001e847f
 80026a8:	003d08ff 	.word	0x003d08ff
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	10624dd3 	.word	0x10624dd3

080026b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	460b      	mov	r3, r1
 80026c2:	817b      	strh	r3, [r7, #10]
 80026c4:	4613      	mov	r3, r2
 80026c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fb3c 	bl	8001d44 <HAL_GetTick>
 80026cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	f040 80e0 	bne.w	800289c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2319      	movs	r3, #25
 80026e2:	2201      	movs	r2, #1
 80026e4:	4970      	ldr	r1, [pc, #448]	; (80028a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f964 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0d3      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_I2C_Master_Transmit+0x50>
 8002700:	2302      	movs	r3, #2
 8002702:	e0cc      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d007      	beq.n	800272a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2221      	movs	r2, #33	; 0x21
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2210      	movs	r2, #16
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	893a      	ldrh	r2, [r7, #8]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a50      	ldr	r2, [pc, #320]	; (80028ac <HAL_I2C_Master_Transmit+0x1f8>)
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800276c:	8979      	ldrh	r1, [r7, #10]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f89c 	bl	80028b0 <I2C_MasterRequestWrite>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e08d      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002798:	e066      	b.n	8002868 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fa22 	bl	8002be8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d107      	bne.n	80027c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06b      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b04      	cmp	r3, #4
 8002802:	d11b      	bne.n	800283c <HAL_I2C_Master_Transmit+0x188>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d017      	beq.n	800283c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	6a39      	ldr	r1, [r7, #32]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fa19 	bl	8002c78 <I2C_WaitOnBTFFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002862:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e01a      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	d194      	bne.n	800279a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	00100002 	.word	0x00100002
 80028ac:	ffff0000 	.word	0xffff0000

080028b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	460b      	mov	r3, r1
 80028be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d006      	beq.n	80028da <I2C_MasterRequestWrite+0x2a>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d003      	beq.n	80028da <I2C_MasterRequestWrite+0x2a>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028d8:	d108      	bne.n	80028ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e00b      	b.n	8002904 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	2b12      	cmp	r3, #18
 80028f2:	d107      	bne.n	8002904 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002902:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f84f 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292a:	d103      	bne.n	8002934 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e035      	b.n	80029a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002940:	d108      	bne.n	8002954 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002942:	897b      	ldrh	r3, [r7, #10]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002950:	611a      	str	r2, [r3, #16]
 8002952:	e01b      	b.n	800298c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002954:	897b      	ldrh	r3, [r7, #10]
 8002956:	11db      	asrs	r3, r3, #7
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f003 0306 	and.w	r3, r3, #6
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f063 030f 	orn	r3, r3, #15
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	490e      	ldr	r1, [pc, #56]	; (80029ac <I2C_MasterRequestWrite+0xfc>)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f898 	bl	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e010      	b.n	80029a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <I2C_MasterRequestWrite+0x100>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f888 	bl	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	00010008 	.word	0x00010008
 80029b0:	00010002 	.word	0x00010002

080029b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c4:	e048      	b.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d044      	beq.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7ff f9b9 	bl	8001d44 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d139      	bne.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d10d      	bne.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x56>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	43da      	mvns	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	e00c      	b.n	8002a24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	43da      	mvns	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d116      	bne.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e023      	b.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10d      	bne.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	e00c      	b.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	43da      	mvns	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d093      	beq.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ab6:	e071      	b.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d123      	bne.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ae0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e067      	b.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d041      	beq.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b18:	f7ff f914 	bl	8001d44 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d302      	bcc.n	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d136      	bne.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d10c      	bne.n	8002b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4013      	ands	r3, r2
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	e00b      	b.n	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d016      	beq.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e021      	b.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0c1b      	lsrs	r3, r3, #16
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10c      	bne.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	43da      	mvns	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e00b      	b.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f47f af6d 	bne.w	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf4:	e034      	b.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f886 	bl	8002d08 <I2C_IsAcknowledgeFailed>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e034      	b.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d028      	beq.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7ff f899 	bl	8001d44 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11d      	bne.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d016      	beq.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b80      	cmp	r3, #128	; 0x80
 8002c6c:	d1c3      	bne.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c84:	e034      	b.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f83e 	bl	8002d08 <I2C_IsAcknowledgeFailed>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e034      	b.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d028      	beq.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9e:	f7ff f851 	bl	8001d44 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11d      	bne.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d016      	beq.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e007      	b.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d1c3      	bne.n	8002c86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1e:	d11b      	bne.n	8002d58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e272      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8087 	beq.w	8002e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d84:	4b92      	ldr	r3, [pc, #584]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d00c      	beq.n	8002daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d90:	4b8f      	ldr	r3, [pc, #572]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d112      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x5e>
 8002d9c:	4b8c      	ldr	r3, [pc, #560]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da8:	d10b      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002daa:	4b89      	ldr	r3, [pc, #548]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d06c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x12c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d168      	bne.n	8002e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e24c      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x76>
 8002dcc:	4b80      	ldr	r3, [pc, #512]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a7f      	ldr	r2, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e02e      	b.n	8002e38 <HAL_RCC_OscConfig+0xd4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x98>
 8002de2:	4b7b      	ldr	r3, [pc, #492]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7a      	ldr	r2, [pc, #488]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b78      	ldr	r3, [pc, #480]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a77      	ldr	r2, [pc, #476]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e01d      	b.n	8002e38 <HAL_RCC_OscConfig+0xd4>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0xbc>
 8002e06:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a71      	ldr	r2, [pc, #452]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6e      	ldr	r2, [pc, #440]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCC_OscConfig+0xd4>
 8002e20:	4b6b      	ldr	r3, [pc, #428]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6a      	ldr	r2, [pc, #424]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a67      	ldr	r2, [pc, #412]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe ff80 	bl	8001d44 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe ff7c 	bl	8001d44 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e200      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0xe4>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe ff6c 	bl	8001d44 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe ff68 	bl	8001d44 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e1ec      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x10c>
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d063      	beq.n	8002f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9e:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eaa:	4b49      	ldr	r3, [pc, #292]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d11c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x18c>
 8002eb6:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d116      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_RCC_OscConfig+0x176>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e1c0      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4939      	ldr	r1, [pc, #228]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eee:	e03a      	b.n	8002f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fe ff21 	bl	8001d44 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f06:	f7fe ff1d 	bl	8001d44 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e1a1      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4927      	ldr	r1, [pc, #156]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe ff00 	bl	8001d44 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f48:	f7fe fefc 	bl	8001d44 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e180      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d03a      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d019      	beq.n	8002fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f80:	f7fe fee0 	bl	8001d44 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f88:	f7fe fedc 	bl	8001d44 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e160      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f000 fafe 	bl	80035a8 <RCC_Delay>
 8002fac:	e01c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_RCC_OscConfig+0x274>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fec6 	bl	8001d44 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fba:	e00f      	b.n	8002fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fec2 	bl	8001d44 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d908      	bls.n	8002fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e146      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	42420000 	.word	0x42420000
 8002fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	4b92      	ldr	r3, [pc, #584]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e9      	bne.n	8002fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80a6 	beq.w	8003142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffa:	4b8b      	ldr	r3, [pc, #556]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4a87      	ldr	r2, [pc, #540]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	61d3      	str	r3, [r2, #28]
 8003012:	4b85      	ldr	r3, [pc, #532]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b82      	ldr	r3, [pc, #520]	; (800322c <HAL_RCC_OscConfig+0x4c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4b7f      	ldr	r3, [pc, #508]	; (800322c <HAL_RCC_OscConfig+0x4c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a7e      	ldr	r2, [pc, #504]	; (800322c <HAL_RCC_OscConfig+0x4c8>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe fe83 	bl	8001d44 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fe fe7f 	bl	8001d44 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b64      	cmp	r3, #100	; 0x64
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e103      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	4b75      	ldr	r3, [pc, #468]	; (800322c <HAL_RCC_OscConfig+0x4c8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x312>
 8003068:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a6e      	ldr	r2, [pc, #440]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6213      	str	r3, [r2, #32]
 8003074:	e02d      	b.n	80030d2 <HAL_RCC_OscConfig+0x36e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x334>
 800307e:	4b6a      	ldr	r3, [pc, #424]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	4a69      	ldr	r2, [pc, #420]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	6213      	str	r3, [r2, #32]
 800308a:	4b67      	ldr	r3, [pc, #412]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4a66      	ldr	r2, [pc, #408]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	6213      	str	r3, [r2, #32]
 8003096:	e01c      	b.n	80030d2 <HAL_RCC_OscConfig+0x36e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b05      	cmp	r3, #5
 800309e:	d10c      	bne.n	80030ba <HAL_RCC_OscConfig+0x356>
 80030a0:	4b61      	ldr	r3, [pc, #388]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4a60      	ldr	r2, [pc, #384]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	6213      	str	r3, [r2, #32]
 80030ac:	4b5e      	ldr	r3, [pc, #376]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4a5d      	ldr	r2, [pc, #372]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6213      	str	r3, [r2, #32]
 80030b8:	e00b      	b.n	80030d2 <HAL_RCC_OscConfig+0x36e>
 80030ba:	4b5b      	ldr	r3, [pc, #364]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	4a5a      	ldr	r2, [pc, #360]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6213      	str	r3, [r2, #32]
 80030c6:	4b58      	ldr	r3, [pc, #352]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4a57      	ldr	r2, [pc, #348]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d015      	beq.n	8003106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fe fe33 	bl	8001d44 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe fe2f 	bl	8001d44 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0b1      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0ee      	beq.n	80030e2 <HAL_RCC_OscConfig+0x37e>
 8003104:	e014      	b.n	8003130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f7fe fe1d 	bl	8001d44 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fe fe19 	bl	8001d44 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	; 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e09b      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003124:	4b40      	ldr	r3, [pc, #256]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ee      	bne.n	800310e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003136:	4b3c      	ldr	r3, [pc, #240]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4a3b      	ldr	r2, [pc, #236]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8087 	beq.w	800325a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800314c:	4b36      	ldr	r3, [pc, #216]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d061      	beq.n	800321c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d146      	bne.n	80031ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003160:	4b33      	ldr	r3, [pc, #204]	; (8003230 <HAL_RCC_OscConfig+0x4cc>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fe fded 	bl	8001d44 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe fde9 	bl	8001d44 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e06d      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003180:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003194:	d108      	bne.n	80031a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003196:	4b24      	ldr	r3, [pc, #144]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4921      	ldr	r1, [pc, #132]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a8:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a19      	ldr	r1, [r3, #32]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	430b      	orrs	r3, r1
 80031ba:	491b      	ldr	r1, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fdbd 	bl	8001d44 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe fdb9 	bl	8001d44 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e03d      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x46a>
 80031ec:	e035      	b.n	800325a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_RCC_OscConfig+0x4cc>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fda6 	bl	8001d44 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe fda2 	bl	8001d44 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e026      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x498>
 800321a:	e01e      	b.n	800325a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e019      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
 8003230:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_OscConfig+0x500>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	429a      	cmp	r2, r3
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000

08003268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0d0      	b.n	800341e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d910      	bls.n	80032ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b67      	ldr	r3, [pc, #412]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	4965      	ldr	r1, [pc, #404]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b63      	ldr	r3, [pc, #396]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0b8      	b.n	800341e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c4:	4b59      	ldr	r3, [pc, #356]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4a58      	ldr	r2, [pc, #352]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032dc:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a52      	ldr	r2, [pc, #328]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e8:	4b50      	ldr	r3, [pc, #320]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	494d      	ldr	r1, [pc, #308]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d040      	beq.n	8003388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d115      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e07f      	b.n	800341e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003326:	4b41      	ldr	r3, [pc, #260]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e073      	b.n	800341e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06b      	b.n	800341e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003346:	4b39      	ldr	r3, [pc, #228]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f023 0203 	bic.w	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4936      	ldr	r1, [pc, #216]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7fe fcf4 	bl	8001d44 <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7fe fcf0 	bl	8001d44 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e053      	b.n	800341e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b2d      	ldr	r3, [pc, #180]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 020c 	and.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d1eb      	bne.n	8003360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b27      	ldr	r3, [pc, #156]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d210      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 0207 	bic.w	r2, r3, #7
 800339e:	4922      	ldr	r1, [pc, #136]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b20      	ldr	r3, [pc, #128]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e032      	b.n	800341e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4916      	ldr	r1, [pc, #88]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	490e      	ldr	r1, [pc, #56]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033f6:	f000 f821 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	490a      	ldr	r1, [pc, #40]	; (8003430 <HAL_RCC_ClockConfig+0x1c8>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_RCC_ClockConfig+0x1cc>)
 8003410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x1d0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fada 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40022000 	.word	0x40022000
 800342c:	40021000 	.word	0x40021000
 8003430:	0800bd8c 	.word	0x0800bd8c
 8003434:	2000000c 	.word	0x2000000c
 8003438:	20000010 	.word	0x20000010

0800343c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b04      	cmp	r3, #4
 8003464:	d002      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x30>
 8003466:	2b08      	cmp	r3, #8
 8003468:	d003      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x36>
 800346a:	e027      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800346e:	613b      	str	r3, [r7, #16]
      break;
 8003470:	e027      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	0c9b      	lsrs	r3, r3, #18
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800347c:	5cd3      	ldrb	r3, [r2, r3]
 800347e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d010      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	0c5b      	lsrs	r3, r3, #17
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	4a11      	ldr	r2, [pc, #68]	; (80034dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800349e:	fb03 f202 	mul.w	r2, r3, r2
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e004      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	613b      	str	r3, [r7, #16]
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80034be:	613b      	str	r3, [r7, #16]
      break;
 80034c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c2:	693b      	ldr	r3, [r7, #16]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	007a1200 	.word	0x007a1200
 80034d8:	0800bda4 	.word	0x0800bda4
 80034dc:	0800bdb4 	.word	0x0800bdb4
 80034e0:	003d0900 	.word	0x003d0900

080034e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b02      	ldr	r3, [pc, #8]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	2000000c 	.word	0x2000000c

080034f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034fc:	f7ff fff2 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	; (800351c <HAL_RCC_GetPCLK1Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	0800bd9c 	.word	0x0800bd9c

08003520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003524:	f7ff ffde 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	0adb      	lsrs	r3, r3, #11
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4903      	ldr	r1, [pc, #12]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	0800bd9c 	.word	0x0800bd9c

08003548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	220f      	movs	r2, #15
 8003556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_RCC_GetClockConfig+0x58>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0203 	and.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003564:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <HAL_RCC_GetClockConfig+0x58>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <HAL_RCC_GetClockConfig+0x58>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <HAL_RCC_GetClockConfig+0x58>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	08db      	lsrs	r3, r3, #3
 8003582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_GetClockConfig+0x5c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0207 	and.w	r2, r3, #7
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40022000 	.word	0x40022000

080035a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <RCC_Delay+0x34>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <RCC_Delay+0x38>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0a5b      	lsrs	r3, r3, #9
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035c4:	bf00      	nop
  }
  while (Delay --);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	60fa      	str	r2, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f9      	bne.n	80035c4 <RCC_Delay+0x1c>
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	2000000c 	.word	0x2000000c
 80035e0:	10624dd3 	.word	0x10624dd3

080035e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e041      	b.n	800367a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe f96e 	bl	80018ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f000 fae4 	bl	8003bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d001      	beq.n	800369c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e032      	b.n	8003702 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIM_Base_Start+0x88>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_TIM_Base_Start+0x48>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d009      	beq.n	80036cc <HAL_TIM_Base_Start+0x48>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a14      	ldr	r2, [pc, #80]	; (8003710 <HAL_TIM_Base_Start+0x8c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_TIM_Base_Start+0x48>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <HAL_TIM_Base_Start+0x90>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d111      	bne.n	80036f0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d010      	beq.n	8003700 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ee:	e007      	b.n	8003700 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	f241 1311 	movw	r3, #4369	; 0x1111
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10f      	bne.n	8003750 <HAL_TIM_Base_Stop+0x38>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	f240 4344 	movw	r3, #1092	; 0x444
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <HAL_TIM_Base_Stop+0x38>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d001      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e03a      	b.n	80037f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a18      	ldr	r2, [pc, #96]	; (80037fc <HAL_TIM_Base_Start_IT+0x98>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00e      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x58>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d009      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x58>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <HAL_TIM_Base_Start_IT+0x9c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x58>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a13      	ldr	r2, [pc, #76]	; (8003804 <HAL_TIM_Base_Start_IT+0xa0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d111      	bne.n	80037e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d010      	beq.n	80037f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037de:	e007      	b.n	80037f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800

08003808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b02      	cmp	r3, #2
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0202 	mvn.w	r2, #2
 8003834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9b4 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9a7 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f9b6 	bl	8003bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b04      	cmp	r3, #4
 8003870:	d122      	bne.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d11b      	bne.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0204 	mvn.w	r2, #4
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f98a 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f97d 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f98c 	bl	8003bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d122      	bne.n	800390c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d11b      	bne.n	800390c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0208 	mvn.w	r2, #8
 80038dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2204      	movs	r2, #4
 80038e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f960 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 80038f8:	e005      	b.n	8003906 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f953 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f962 	bl	8003bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b10      	cmp	r3, #16
 8003918:	d122      	bne.n	8003960 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b10      	cmp	r3, #16
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0210 	mvn.w	r2, #16
 8003930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2208      	movs	r2, #8
 8003936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f936 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f929 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f938 	bl	8003bca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0201 	mvn.w	r2, #1
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fd68 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b80      	cmp	r3, #128	; 0x80
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa7b 	bl	8003eae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8fc 	bl	8003bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0220 	mvn.w	r2, #32
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa46 	bl	8003e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_ConfigClockSource+0x1c>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0b4      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x186>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6c:	d03e      	beq.n	8003aec <HAL_TIM_ConfigClockSource+0xd4>
 8003a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a72:	f200 8087 	bhi.w	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	f000 8086 	beq.w	8003b8a <HAL_TIM_ConfigClockSource+0x172>
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a82:	d87f      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a84:	2b70      	cmp	r3, #112	; 0x70
 8003a86:	d01a      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0xa6>
 8003a88:	2b70      	cmp	r3, #112	; 0x70
 8003a8a:	d87b      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8c:	2b60      	cmp	r3, #96	; 0x60
 8003a8e:	d050      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x11a>
 8003a90:	2b60      	cmp	r3, #96	; 0x60
 8003a92:	d877      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a94:	2b50      	cmp	r3, #80	; 0x50
 8003a96:	d03c      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0xfa>
 8003a98:	2b50      	cmp	r3, #80	; 0x50
 8003a9a:	d873      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d058      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x13a>
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d86f      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b30      	cmp	r3, #48	; 0x30
 8003aa6:	d064      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x15a>
 8003aa8:	2b30      	cmp	r3, #48	; 0x30
 8003aaa:	d86b      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d060      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x15a>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d867      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05c      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x15a>
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d05a      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x15a>
 8003abc:	e062      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ace:	f000 f968 	bl	8003da2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ae0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	609a      	str	r2, [r3, #8]
      break;
 8003aea:	e04f      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003afc:	f000 f951 	bl	8003da2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b0e:	609a      	str	r2, [r3, #8]
      break;
 8003b10:	e03c      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f000 f8c8 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2150      	movs	r1, #80	; 0x50
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f91f 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003b30:	e02c      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f000 f8e6 	bl	8003d10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2160      	movs	r1, #96	; 0x60
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f90f 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003b50:	e01c      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f000 f8a8 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2140      	movs	r1, #64	; 0x40
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f8ff 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003b70:	e00c      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f000 f8f6 	bl	8003d6e <TIM_ITRx_SetConfig>
      break;
 8003b82:	e003      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      break;
 8003b88:	e000      	b.n	8003b8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
	...

08003bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <TIM_Base_SetConfig+0xb8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00b      	beq.n	8003c20 <TIM_Base_SetConfig+0x30>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0e:	d007      	beq.n	8003c20 <TIM_Base_SetConfig+0x30>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a26      	ldr	r2, [pc, #152]	; (8003cac <TIM_Base_SetConfig+0xbc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0x30>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <TIM_Base_SetConfig+0xc0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d108      	bne.n	8003c32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1c      	ldr	r2, [pc, #112]	; (8003ca8 <TIM_Base_SetConfig+0xb8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_Base_SetConfig+0x62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0x62>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a19      	ldr	r2, [pc, #100]	; (8003cac <TIM_Base_SetConfig+0xbc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0x62>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <TIM_Base_SetConfig+0xc0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <TIM_Base_SetConfig+0xb8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800

08003cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 030a 	bic.w	r3, r3, #10
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0210 	bic.w	r2, r3, #16
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	031b      	lsls	r3, r3, #12
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f043 0307 	orr.w	r3, r3, #7
 8003d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b087      	sub	sp, #28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	021a      	lsls	r2, r3, #8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	609a      	str	r2, [r3, #8]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e046      	b.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e44:	d009      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10c      	bne.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800

08003e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e042      	b.n	8003f58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd fd1e 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fdc5 	bl	8004a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d16d      	bne.n	800405c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_UART_Transmit+0x2c>
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e066      	b.n	800405e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2221      	movs	r2, #33	; 0x21
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9e:	f7fd fed1 	bl	8001d44 <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb8:	d108      	bne.n	8003fcc <HAL_UART_Transmit+0x6c>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e003      	b.n	8003fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fd4:	e02a      	b.n	800402c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fb14 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e036      	b.n	800405e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3302      	adds	r3, #2
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	e007      	b.n	800401e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3301      	adds	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1cf      	bne.n	8003fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2140      	movs	r1, #64	; 0x40
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fae4 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e006      	b.n	800405e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	4613      	mov	r3, r2
 8004072:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b20      	cmp	r3, #32
 800407e:	d112      	bne.n	80040a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_UART_Receive_IT+0x26>
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e00b      	b.n	80040a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	461a      	mov	r2, r3
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fb24 	bl	80046ea <UART_Start_Receive_IT>
 80040a2:	4603      	mov	r3, r0
 80040a4:	e000      	b.n	80040a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b0ba      	sub	sp, #232	; 0xe8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10f      	bne.n	8004116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_UART_IRQHandler+0x66>
 8004102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fc01 	bl	8004916 <UART_Receive_IT>
      return;
 8004114:	e25b      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80de 	beq.w	80042dc <HAL_UART_IRQHandler+0x22c>
 8004120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800412c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80d1 	beq.w	80042dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_UART_IRQHandler+0xae>
 8004146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f043 0201 	orr.w	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_UART_IRQHandler+0xd2>
 800416a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f043 0202 	orr.w	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_UART_IRQHandler+0xf6>
 800418e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	f043 0204 	orr.w	r2, r3, #4
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d011      	beq.n	80041d6 <HAL_UART_IRQHandler+0x126>
 80041b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	f043 0208 	orr.w	r2, r3, #8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 81f2 	beq.w	80045c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_UART_IRQHandler+0x14e>
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fb8c 	bl	8004916 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d103      	bne.n	800422a <HAL_UART_IRQHandler+0x17a>
 8004222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d04f      	beq.n	80042ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa96 	bl	800475c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d041      	beq.n	80042c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3314      	adds	r3, #20
 8004244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3314      	adds	r3, #20
 8004266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800426a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800426e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1d9      	bne.n	800423e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d013      	beq.n	80042ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	4a7e      	ldr	r2, [pc, #504]	; (8004490 <HAL_UART_IRQHandler+0x3e0>)
 8004298:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fd fe98 	bl	8001fd4 <HAL_DMA_Abort_IT>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b4:	4610      	mov	r0, r2
 80042b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b8:	e00e      	b.n	80042d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f993 	bl	80045e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c0:	e00a      	b.n	80042d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f98f 	bl	80045e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	e006      	b.n	80042d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f98b 	bl	80045e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80042d6:	e175      	b.n	80045c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	bf00      	nop
    return;
 80042da:	e173      	b.n	80045c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	f040 814f 	bne.w	8004584 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8148 	beq.w	8004584 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8141 	beq.w	8004584 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80b6 	beq.w	8004494 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8145 	beq.w	80045c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004346:	429a      	cmp	r2, r3
 8004348:	f080 813e 	bcs.w	80045c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b20      	cmp	r3, #32
 800435c:	f000 8088 	beq.w	8004470 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800437a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800437e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800438c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004398:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1d9      	bne.n	8004360 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3314      	adds	r3, #20
 80043cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e1      	bne.n	80043ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3314      	adds	r3, #20
 8004408:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800440c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800440e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004412:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800441a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e3      	bne.n	80043e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800443e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004440:	f023 0310 	bic.w	r3, r3, #16
 8004444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004452:	65ba      	str	r2, [r7, #88]	; 0x58
 8004454:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e3      	bne.n	800442e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fd77 	bl	8001f5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800447e:	b29b      	uxth	r3, r3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	b29b      	uxth	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8b6 	bl	80045f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800448c:	e09c      	b.n	80045c8 <HAL_UART_IRQHandler+0x518>
 800448e:	bf00      	nop
 8004490:	08004821 	.word	0x08004821
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800449c:	b29b      	uxth	r3, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 808e 	beq.w	80045cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8089 	beq.w	80045cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044de:	647a      	str	r2, [r7, #68]	; 0x44
 80044e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e3      	bne.n	80044ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	623b      	str	r3, [r7, #32]
   return(result);
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3314      	adds	r3, #20
 8004512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004516:	633a      	str	r2, [r7, #48]	; 0x30
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e3      	bne.n	80044f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	60fb      	str	r3, [r7, #12]
   return(result);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0310 	bic.w	r3, r3, #16
 800454e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800455c:	61fa      	str	r2, [r7, #28]
 800455e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	617b      	str	r3, [r7, #20]
   return(result);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e3      	bne.n	8004538 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f83b 	bl	80045f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004582:	e023      	b.n	80045cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_UART_IRQHandler+0x4f4>
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f953 	bl	8004848 <UART_Transmit_IT>
    return;
 80045a2:	e014      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <HAL_UART_IRQHandler+0x51e>
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f992 	bl	80048e6 <UART_EndTransmit_IT>
    return;
 80045c2:	e004      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
    return;
 80045c4:	bf00      	nop
 80045c6:	e002      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
      return;
 80045c8:	bf00      	nop
 80045ca:	e000      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
      return;
 80045cc:	bf00      	nop
  }
}
 80045ce:	37e8      	adds	r7, #232	; 0xe8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr

080045f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b090      	sub	sp, #64	; 0x40
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461e:	e050      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d04c      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <UART_WaitOnFlagUntilTimeout+0x30>
 800462e:	f7fd fb89 	bl	8001d44 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463a:	429a      	cmp	r2, r3
 800463c:	d241      	bcs.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800465e:	637a      	str	r2, [r7, #52]	; 0x34
 8004660:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e5      	bne.n	800463e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	613b      	str	r3, [r7, #16]
   return(result);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	63bb      	str	r3, [r7, #56]	; 0x38
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3314      	adds	r3, #20
 8004690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004692:	623a      	str	r2, [r7, #32]
 8004694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	69f9      	ldr	r1, [r7, #28]
 8004698:	6a3a      	ldr	r2, [r7, #32]
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e5      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e00f      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d09f      	beq.n	8004620 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3740      	adds	r7, #64	; 0x40
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	88fa      	ldrh	r2, [r7, #6]
 8004702:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2222      	movs	r2, #34	; 0x22
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0220 	orr.w	r2, r2, #32
 800474e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b095      	sub	sp, #84	; 0x54
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	330c      	adds	r3, #12
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004784:	643a      	str	r2, [r7, #64]	; 0x40
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800478a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e5      	bne.n	8004764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3314      	adds	r3, #20
 800479e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3314      	adds	r3, #20
 80047b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d119      	bne.n	8004808 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0310 	bic.w	r3, r3, #16
 80047ea:	647b      	str	r3, [r7, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f4:	61ba      	str	r2, [r7, #24]
 80047f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6979      	ldr	r1, [r7, #20]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	613b      	str	r3, [r7, #16]
   return(result);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e5      	bne.n	80047d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004816:	bf00      	nop
 8004818:	3754      	adds	r7, #84	; 0x54
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff fed3 	bl	80045e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b21      	cmp	r3, #33	; 0x21
 800485a:	d13e      	bne.n	80048da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004864:	d114      	bne.n	8004890 <UART_Transmit_IT+0x48>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d110      	bne.n	8004890 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004882:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	621a      	str	r2, [r3, #32]
 800488e:	e008      	b.n	80048a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	1c59      	adds	r1, r3, #1
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6211      	str	r1, [r2, #32]
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4619      	mov	r1, r3
 80048b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e000      	b.n	80048dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff fe64 	bl	80045d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b08c      	sub	sp, #48	; 0x30
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b22      	cmp	r3, #34	; 0x22
 8004928:	f040 80ae 	bne.w	8004a88 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004934:	d117      	bne.n	8004966 <UART_Receive_IT+0x50>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d113      	bne.n	8004966 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004954:	b29a      	uxth	r2, r3
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	1c9a      	adds	r2, r3, #2
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
 8004964:	e026      	b.n	80049b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004978:	d007      	beq.n	800498a <UART_Receive_IT+0x74>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <UART_Receive_IT+0x82>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e008      	b.n	80049aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29b      	uxth	r3, r3
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	4619      	mov	r1, r3
 80049c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d15d      	bne.n	8004a84 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0220 	bic.w	r2, r2, #32
 80049d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d135      	bne.n	8004a7a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	613b      	str	r3, [r7, #16]
   return(result);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	623a      	str	r2, [r7, #32]
 8004a36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	69f9      	ldr	r1, [r7, #28]
 8004a3a:	6a3a      	ldr	r2, [r7, #32]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d10a      	bne.n	8004a6c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fdc0 	bl	80045f8 <HAL_UARTEx_RxEventCallback>
 8004a78:	e002      	b.n	8004a80 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fc f996 	bl	8000dac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e002      	b.n	8004a8a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3730      	adds	r7, #48	; 0x30
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ace:	f023 030c 	bic.w	r3, r3, #12
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2c      	ldr	r2, [pc, #176]	; (8004ba8 <UART_SetConfig+0x114>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d103      	bne.n	8004b04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004afc:	f7fe fd10 	bl	8003520 <HAL_RCC_GetPCLK2Freq>
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	e002      	b.n	8004b0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b04:	f7fe fcf8 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004b08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009a      	lsls	r2, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	4a22      	ldr	r2, [pc, #136]	; (8004bac <UART_SetConfig+0x118>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	0119      	lsls	r1, r3, #4
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009a      	lsls	r2, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b40:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <UART_SetConfig+0x118>)
 8004b42:	fba3 0302 	umull	r0, r3, r3, r2
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2064      	movs	r0, #100	; 0x64
 8004b4a:	fb00 f303 	mul.w	r3, r0, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	3332      	adds	r3, #50	; 0x32
 8004b54:	4a15      	ldr	r2, [pc, #84]	; (8004bac <UART_SetConfig+0x118>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b60:	4419      	add	r1, r3
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009a      	lsls	r2, r3, #2
 8004b6c:	441a      	add	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <UART_SetConfig+0x118>)
 8004b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2064      	movs	r0, #100	; 0x64
 8004b82:	fb00 f303 	mul.w	r3, r0, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	3332      	adds	r3, #50	; 0x32
 8004b8c:	4a07      	ldr	r2, [pc, #28]	; (8004bac <UART_SetConfig+0x118>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40013800 	.word	0x40013800
 8004bac:	51eb851f 	.word	0x51eb851f

08004bb0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc2:	2b84      	cmp	r3, #132	; 0x84
 8004bc4:	d005      	beq.n	8004bd2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004bc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	3303      	adds	r3, #3
 8004bd0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004be4:	f3ef 8305 	mrs	r3, IPSR
 8004be8:	607b      	str	r3, [r7, #4]
  return(result);
 8004bea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c04:	f001 f990 	bl	8005f28 <vTaskStartScheduler>
  
  return osOK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c10:	b089      	sub	sp, #36	; 0x24
 8004c12:	af04      	add	r7, sp, #16
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <osThreadCreate+0x54>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01c      	beq.n	8004c62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685c      	ldr	r4, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691e      	ldr	r6, [r3, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff ffb8 	bl	8004bb0 <makeFreeRtosPriority>
 8004c40:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c4a:	9202      	str	r2, [sp, #8]
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	9100      	str	r1, [sp, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4632      	mov	r2, r6
 8004c54:	4629      	mov	r1, r5
 8004c56:	4620      	mov	r0, r4
 8004c58:	f000 ff91 	bl	8005b7e <xTaskCreateStatic>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e01c      	b.n	8004c9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685c      	ldr	r4, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c6e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff ff9a 	bl	8004bb0 <makeFreeRtosPriority>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	f107 030c 	add.w	r3, r7, #12
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	9200      	str	r2, [sp, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	4632      	mov	r2, r6
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f000 ffd2 	bl	8005c36 <xTaskCreate>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d001      	beq.n	8004c9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ca6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <osDelay+0x16>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	e000      	b.n	8004cbe <osDelay+0x18>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 f8fe 	bl	8005ec0 <vTaskDelay>
  
  return osOK;
 8004cc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af02      	add	r7, sp, #8
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d016      	beq.n	8004d0e <osSemaphoreCreate+0x40>
    if (count == 1) {
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d10a      	bne.n	8004cfc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2203      	movs	r2, #3
 8004cec:	9200      	str	r2, [sp, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f000 f9c6 	bl	8005084 <xQueueGenericCreateStatic>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	e023      	b.n	8004d44 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8004cfc:	6838      	ldr	r0, [r7, #0]
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f000 fa91 	bl	800522c <xQueueCreateCountingSemaphoreStatic>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	e01a      	b.n	8004d44 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d110      	bne.n	8004d36 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8004d14:	2203      	movs	r2, #3
 8004d16:	2100      	movs	r1, #0
 8004d18:	2001      	movs	r0, #1
 8004d1a:	f000 fa2a 	bl	8005172 <xQueueGenericCreate>
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <osSemaphoreCreate+0x64>
 8004d26:	2300      	movs	r3, #0
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fae7 	bl	8005300 <xQueueGenericSend>
      return sema;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	e006      	b.n	8004d44 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 faac 	bl	800529a <xQueueCreateCountingSemaphore>
 8004d42:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	e03a      	b.n	8004dda <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d103      	bne.n	8004d78 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004d70:	f04f 33ff 	mov.w	r3, #4294967295
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e009      	b.n	8004d8c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d006      	beq.n	8004d8c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <osSemaphoreWait+0x40>
      ticks = 1;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004d8c:	f7ff ff27 	bl	8004bde <inHandlerMode>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d017      	beq.n	8004dc6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004d96:	f107 0308 	add.w	r3, r7, #8
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fd46 	bl	8005830 <xQueueReceiveFromISR>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <osSemaphoreWait+0x62>
      return osErrorOS;
 8004daa:	23ff      	movs	r3, #255	; 0xff
 8004dac:	e015      	b.n	8004dda <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d011      	beq.n	8004dd8 <osSemaphoreWait+0x8c>
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <osSemaphoreWait+0x98>)
 8004db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	e008      	b.n	8004dd8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fc25 	bl	8005618 <xQueueSemaphoreTake>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d001      	beq.n	8004dd8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004dd4:	23ff      	movs	r3, #255	; 0xff
 8004dd6:	e000      	b.n	8004dda <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004df8:	f7ff fef1 	bl	8004bde <inHandlerMode>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004e02:	f107 0308 	add.w	r3, r7, #8
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb77 	bl	80054fc <xQueueGiveFromISR>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d001      	beq.n	8004e18 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004e14:	23ff      	movs	r3, #255	; 0xff
 8004e16:	e017      	b.n	8004e48 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d013      	beq.n	8004e46 <osSemaphoreRelease+0x5e>
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <osSemaphoreRelease+0x68>)
 8004e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	e00a      	b.n	8004e46 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004e30:	2300      	movs	r3, #0
 8004e32:	2200      	movs	r2, #0
 8004e34:	2100      	movs	r1, #0
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fa62 	bl	8005300 <xQueueGenericSend>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d001      	beq.n	8004e46 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004e42:	23ff      	movs	r3, #255	; 0xff
 8004e44:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004e46:	68fb      	ldr	r3, [r7, #12]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f103 0208 	add.w	r2, r3, #8
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f103 0208 	add.w	r2, r3, #8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f103 0208 	add.w	r2, r3, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr

08004e92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d103      	bne.n	8004f10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e00c      	b.n	8004f2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3308      	adds	r3, #8
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e002      	b.n	8004f1e <vListInsert+0x2e>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d2f6      	bcs.n	8004f18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6892      	ldr	r2, [r2, #8]
 8004f76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6852      	ldr	r2, [r2, #4]
 8004f80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d103      	bne.n	8004f94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	1e5a      	subs	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr
	...

08004fb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fde:	f001 fef5 	bl	8006dcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	68f9      	ldr	r1, [r7, #12]
 8004fec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fee:	fb01 f303 	mul.w	r3, r1, r3
 8004ff2:	441a      	add	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	3b01      	subs	r3, #1
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	22ff      	movs	r2, #255	; 0xff
 8005022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	22ff      	movs	r2, #255	; 0xff
 800502a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d114      	bne.n	800505e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01a      	beq.n	8005072 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3310      	adds	r3, #16
 8005040:	4618      	mov	r0, r3
 8005042:	f001 f9c9 	bl	80063d8 <xTaskRemoveFromEventList>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d012      	beq.n	8005072 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <xQueueGenericReset+0xcc>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	e009      	b.n	8005072 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3310      	adds	r3, #16
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fef6 	bl	8004e54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3324      	adds	r3, #36	; 0x24
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fef1 	bl	8004e54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005072:	f001 fedb 	bl	8006e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005076:	2301      	movs	r3, #1
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08e      	sub	sp, #56	; 0x38
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050c6:	bf00      	nop
 80050c8:	e7fe      	b.n	80050c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <xQueueGenericCreateStatic+0x52>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <xQueueGenericCreateStatic+0x56>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <xQueueGenericCreateStatic+0x58>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	623b      	str	r3, [r7, #32]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <xQueueGenericCreateStatic+0x7e>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <xQueueGenericCreateStatic+0x82>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <xQueueGenericCreateStatic+0x84>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	61fb      	str	r3, [r7, #28]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005122:	2348      	movs	r3, #72	; 0x48
 8005124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b48      	cmp	r3, #72	; 0x48
 800512a:	d00a      	beq.n	8005142 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	61bb      	str	r3, [r7, #24]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005154:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f843 	bl	80051ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800516a:	4618      	mov	r0, r3
 800516c:	3730      	adds	r7, #48	; 0x30
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005172:	b580      	push	{r7, lr}
 8005174:	b08a      	sub	sp, #40	; 0x28
 8005176:	af02      	add	r7, sp, #8
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <xQueueGenericCreate+0x2a>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	613b      	str	r3, [r7, #16]
}
 8005198:	bf00      	nop
 800519a:	e7fe      	b.n	800519a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d102      	bne.n	80051a8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e004      	b.n	80051b2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	fb02 f303 	mul.w	r3, r2, r3
 80051b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3348      	adds	r3, #72	; 0x48
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 ff08 	bl	8006fcc <pvPortMalloc>
 80051bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00f      	beq.n	80051e4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	3348      	adds	r3, #72	; 0x48
 80051c8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051d2:	79fa      	ldrb	r2, [r7, #7]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4613      	mov	r3, r2
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f805 	bl	80051ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80051e4:	69bb      	ldr	r3, [r7, #24]
	}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e002      	b.n	8005210 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800521c:	2101      	movs	r1, #1
 800521e:	69b8      	ldr	r0, [r7, #24]
 8005220:	f7ff fec8 	bl	8004fb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005224:	bf00      	nop
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	61bb      	str	r3, [r7, #24]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	429a      	cmp	r2, r3
 800525a:	d90a      	bls.n	8005272 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	617b      	str	r3, [r7, #20]
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005272:	2302      	movs	r3, #2
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	2100      	movs	r1, #0
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff ff01 	bl	8005084 <xQueueGenericCreateStatic>
 8005282:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005290:	69fb      	ldr	r3, [r7, #28]
	}
 8005292:	4618      	mov	r0, r3
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800529a:	b580      	push	{r7, lr}
 800529c:	b086      	sub	sp, #24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	613b      	str	r3, [r7, #16]
}
 80052bc:	bf00      	nop
 80052be:	e7fe      	b.n	80052be <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d90a      	bls.n	80052de <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	60fb      	str	r3, [r7, #12]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052de:	2202      	movs	r2, #2
 80052e0:	2100      	movs	r1, #0
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff ff45 	bl	8005172 <xQueueGenericCreate>
 80052e8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80052f6:	697b      	ldr	r3, [r7, #20]
	}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08e      	sub	sp, #56	; 0x38
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800530e:	2300      	movs	r3, #0
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <xQueueGenericSend+0x32>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <xQueueGenericSend+0x40>
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <xQueueGenericSend+0x44>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <xQueueGenericSend+0x46>
 8005344:	2300      	movs	r3, #0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <xQueueGenericSend+0x60>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d103      	bne.n	800536e <xQueueGenericSend+0x6e>
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <xQueueGenericSend+0x72>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <xQueueGenericSend+0x74>
 8005372:	2300      	movs	r3, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <xQueueGenericSend+0x8e>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	623b      	str	r3, [r7, #32]
}
 800538a:	bf00      	nop
 800538c:	e7fe      	b.n	800538c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800538e:	f001 f9e7 	bl	8006760 <xTaskGetSchedulerState>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <xQueueGenericSend+0x9e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <xQueueGenericSend+0xa2>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <xQueueGenericSend+0xa4>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <xQueueGenericSend+0xbe>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	61fb      	str	r3, [r7, #28]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053be:	f001 fd05 	bl	8006dcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <xQueueGenericSend+0xd4>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d129      	bne.n	8005428 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053da:	f000 fac0 	bl	800595e <prvCopyDataToQueue>
 80053de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d010      	beq.n	800540a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	3324      	adds	r3, #36	; 0x24
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fff3 	bl	80063d8 <xTaskRemoveFromEventList>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d013      	beq.n	8005420 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053f8:	4b3f      	ldr	r3, [pc, #252]	; (80054f8 <xQueueGenericSend+0x1f8>)
 80053fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	e00a      	b.n	8005420 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005410:	4b39      	ldr	r3, [pc, #228]	; (80054f8 <xQueueGenericSend+0x1f8>)
 8005412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005420:	f001 fd04 	bl	8006e2c <vPortExitCritical>
				return pdPASS;
 8005424:	2301      	movs	r3, #1
 8005426:	e063      	b.n	80054f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800542e:	f001 fcfd 	bl	8006e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005432:	2300      	movs	r3, #0
 8005434:	e05c      	b.n	80054f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800543c:	f107 0314 	add.w	r3, r7, #20
 8005440:	4618      	mov	r0, r3
 8005442:	f001 f82b 	bl	800649c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005446:	2301      	movs	r3, #1
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800544a:	f001 fcef 	bl	8006e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800544e:	f000 fdd5 	bl	8005ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005452:	f001 fcbb 	bl	8006dcc <vPortEnterCritical>
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800545c:	b25b      	sxtb	r3, r3
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d103      	bne.n	800546c <xQueueGenericSend+0x16c>
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005472:	b25b      	sxtb	r3, r3
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d103      	bne.n	8005482 <xQueueGenericSend+0x182>
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005482:	f001 fcd3 	bl	8006e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005486:	1d3a      	adds	r2, r7, #4
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f001 f81a 	bl	80064c8 <xTaskCheckForTimeOut>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d124      	bne.n	80054e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800549a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800549c:	f000 fb57 	bl	8005b4e <prvIsQueueFull>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d018      	beq.n	80054d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	3310      	adds	r3, #16
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 ff6e 	bl	8006390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054b6:	f000 fae2 	bl	8005a7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054ba:	f000 fdad 	bl	8006018 <xTaskResumeAll>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f47f af7c 	bne.w	80053be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <xQueueGenericSend+0x1f8>)
 80054c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	e772      	b.n	80053be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054da:	f000 fad0 	bl	8005a7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054de:	f000 fd9b 	bl	8006018 <xTaskResumeAll>
 80054e2:	e76c      	b.n	80053be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e6:	f000 faca 	bl	8005a7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054ea:	f000 fd95 	bl	8006018 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054ee:	2300      	movs	r3, #0
		}
	}
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3738      	adds	r7, #56	; 0x38
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	; 0x38
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	623b      	str	r3, [r7, #32]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <xQueueGiveFromISR+0x48>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	61fb      	str	r3, [r7, #28]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d103      	bne.n	8005554 <xQueueGiveFromISR+0x58>
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <xQueueGiveFromISR+0x5c>
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <xQueueGiveFromISR+0x5e>
 8005558:	2300      	movs	r3, #0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <xQueueGiveFromISR+0x78>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	61bb      	str	r3, [r7, #24]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005574:	f001 fcec 	bl	8006f50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005578:	f3ef 8211 	mrs	r2, BASEPRI
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	617a      	str	r2, [r7, #20]
 800558e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005590:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d22b      	bcs.n	80055fc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d112      	bne.n	80055e6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d016      	beq.n	80055f6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	3324      	adds	r3, #36	; 0x24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 ff03 	bl	80063d8 <xTaskRemoveFromEventList>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2201      	movs	r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e007      	b.n	80055f6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ea:	3301      	adds	r3, #1
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	b25a      	sxtb	r2, r3
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055f6:	2301      	movs	r3, #1
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
 80055fa:	e001      	b.n	8005600 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800560a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800560e:	4618      	mov	r0, r3
 8005610:	3738      	adds	r7, #56	; 0x38
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08e      	sub	sp, #56	; 0x38
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005622:	2300      	movs	r3, #0
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800562a:	2300      	movs	r3, #0
 800562c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	623b      	str	r3, [r7, #32]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	61fb      	str	r3, [r7, #28]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005668:	f001 f87a 	bl	8006760 <xTaskGetSchedulerState>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <xQueueSemaphoreTake+0x60>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <xQueueSemaphoreTake+0x64>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <xQueueSemaphoreTake+0x66>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	61bb      	str	r3, [r7, #24]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005698:	f001 fb98 	bl	8006dcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d024      	beq.n	80056f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	1e5a      	subs	r2, r3, #1
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80056b8:	f001 fa1c 	bl	8006af4 <pvTaskIncrementMutexHeldCount>
 80056bc:	4602      	mov	r2, r0
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00f      	beq.n	80056ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	3310      	adds	r3, #16
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fe82 	bl	80063d8 <xTaskRemoveFromEventList>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056da:	4b54      	ldr	r3, [pc, #336]	; (800582c <xQueueSemaphoreTake+0x214>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056ea:	f001 fb9f 	bl	8006e2c <vPortExitCritical>
				return pdPASS;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e097      	b.n	8005822 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d111      	bne.n	800571c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	617b      	str	r3, [r7, #20]
}
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005714:	f001 fb8a 	bl	8006e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005718:	2300      	movs	r3, #0
 800571a:	e082      	b.n	8005822 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005722:	f107 030c 	add.w	r3, r7, #12
 8005726:	4618      	mov	r0, r3
 8005728:	f000 feb8 	bl	800649c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005730:	f001 fb7c 	bl	8006e2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005734:	f000 fc62 	bl	8005ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005738:	f001 fb48 	bl	8006dcc <vPortEnterCritical>
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005742:	b25b      	sxtb	r3, r3
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d103      	bne.n	8005752 <xQueueSemaphoreTake+0x13a>
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005758:	b25b      	sxtb	r3, r3
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d103      	bne.n	8005768 <xQueueSemaphoreTake+0x150>
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005768:	f001 fb60 	bl	8006e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800576c:	463a      	mov	r2, r7
 800576e:	f107 030c 	add.w	r3, r7, #12
 8005772:	4611      	mov	r1, r2
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fea7 	bl	80064c8 <xTaskCheckForTimeOut>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d132      	bne.n	80057e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005782:	f000 f9ce 	bl	8005b22 <prvIsQueueEmpty>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d026      	beq.n	80057da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005794:	f001 fb1a 	bl	8006dcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fffd 	bl	800679c <xTaskPriorityInherit>
 80057a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057a4:	f001 fb42 	bl	8006e2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	3324      	adds	r3, #36	; 0x24
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	4611      	mov	r1, r2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fded 	bl	8006390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057b8:	f000 f961 	bl	8005a7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057bc:	f000 fc2c 	bl	8006018 <xTaskResumeAll>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f47f af68 	bne.w	8005698 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80057c8:	4b18      	ldr	r3, [pc, #96]	; (800582c <xQueueSemaphoreTake+0x214>)
 80057ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	e75e      	b.n	8005698 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80057da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057dc:	f000 f94f 	bl	8005a7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057e0:	f000 fc1a 	bl	8006018 <xTaskResumeAll>
 80057e4:	e758      	b.n	8005698 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80057e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057e8:	f000 f949 	bl	8005a7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057ec:	f000 fc14 	bl	8006018 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057f2:	f000 f996 	bl	8005b22 <prvIsQueueEmpty>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f43f af4d 	beq.w	8005698 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00d      	beq.n	8005820 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005804:	f001 fae2 	bl	8006dcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800580a:	f000 f891 	bl	8005930 <prvGetDisinheritPriorityAfterTimeout>
 800580e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005816:	4618      	mov	r0, r3
 8005818:	f001 f8cc 	bl	80069b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800581c:	f001 fb06 	bl	8006e2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005820:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005822:	4618      	mov	r0, r3
 8005824:	3738      	adds	r7, #56	; 0x38
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08e      	sub	sp, #56	; 0x38
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	623b      	str	r3, [r7, #32]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <xQueueReceiveFromISR+0x3a>
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <xQueueReceiveFromISR+0x3e>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <xQueueReceiveFromISR+0x40>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	61fb      	str	r3, [r7, #28]
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800588a:	f001 fb61 	bl	8006f50 <vPortValidateInterruptPriority>
	__asm volatile
 800588e:	f3ef 8211 	mrs	r2, BASEPRI
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	61ba      	str	r2, [r7, #24]
 80058a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d02f      	beq.n	8005916 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058c4:	f000 f8b5 	bl	8005a32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	1e5a      	subs	r2, r3, #1
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80058d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d112      	bne.n	8005900 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d016      	beq.n	8005910 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	3310      	adds	r3, #16
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fd76 	bl	80063d8 <xTaskRemoveFromEventList>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00e      	beq.n	8005910 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00b      	beq.n	8005910 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e007      	b.n	8005910 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005904:	3301      	adds	r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	b25a      	sxtb	r2, r3
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005910:	2301      	movs	r3, #1
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
 8005914:	e001      	b.n	800591a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005916:	2300      	movs	r3, #0
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f383 8811 	msr	BASEPRI, r3
}
 8005924:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005928:	4618      	mov	r0, r3
 800592a:	3738      	adds	r7, #56	; 0x38
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	d006      	beq.n	800594e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f1c3 0307 	rsb	r3, r3, #7
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e001      	b.n	8005952 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005952:	68fb      	ldr	r3, [r7, #12]
	}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10d      	bne.n	8005998 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d14d      	bne.n	8005a20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 ff8d 	bl	80068a8 <xTaskPriorityDisinherit>
 800598e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	e043      	b.n	8005a20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d119      	bne.n	80059d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6898      	ldr	r0, [r3, #8]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	461a      	mov	r2, r3
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	f002 fe46 	bl	800863a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	441a      	add	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d32b      	bcc.n	8005a20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	e026      	b.n	8005a20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68d8      	ldr	r0, [r3, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	461a      	mov	r2, r3
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	f002 fe2c 	bl	800863a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	425b      	negs	r3, r3
 80059ec:	441a      	add	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d207      	bcs.n	8005a0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	425b      	negs	r3, r3
 8005a08:	441a      	add	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d105      	bne.n	8005a20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a28:	697b      	ldr	r3, [r7, #20]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d018      	beq.n	8005a76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	441a      	add	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d303      	bcc.n	8005a66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68d9      	ldr	r1, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6838      	ldr	r0, [r7, #0]
 8005a72:	f002 fde2 	bl	800863a <memcpy>
	}
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a86:	f001 f9a1 	bl	8006dcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a92:	e011      	b.n	8005ab8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d012      	beq.n	8005ac2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3324      	adds	r3, #36	; 0x24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fc99 	bl	80063d8 <xTaskRemoveFromEventList>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005aac:	f000 fd6e 	bl	800658c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dce9      	bgt.n	8005a94 <prvUnlockQueue+0x16>
 8005ac0:	e000      	b.n	8005ac4 <prvUnlockQueue+0x46>
					break;
 8005ac2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005acc:	f001 f9ae 	bl	8006e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ad0:	f001 f97c 	bl	8006dcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ada:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005adc:	e011      	b.n	8005b02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d012      	beq.n	8005b0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3310      	adds	r3, #16
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fc74 	bl	80063d8 <xTaskRemoveFromEventList>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005af6:	f000 fd49 	bl	800658c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005afa:	7bbb      	ldrb	r3, [r7, #14]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dce9      	bgt.n	8005ade <prvUnlockQueue+0x60>
 8005b0a:	e000      	b.n	8005b0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	22ff      	movs	r2, #255	; 0xff
 8005b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b16:	f001 f989 	bl	8006e2c <vPortExitCritical>
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b2a:	f001 f94f 	bl	8006dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b36:	2301      	movs	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e001      	b.n	8005b40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b40:	f001 f974 	bl	8006e2c <vPortExitCritical>

	return xReturn;
 8005b44:	68fb      	ldr	r3, [r7, #12]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b56:	f001 f939 	bl	8006dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d102      	bne.n	8005b6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e001      	b.n	8005b70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b70:	f001 f95c 	bl	8006e2c <vPortExitCritical>

	return xReturn;
 8005b74:	68fb      	ldr	r3, [r7, #12]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b08e      	sub	sp, #56	; 0x38
 8005b82:	af04      	add	r7, sp, #16
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	623b      	str	r3, [r7, #32]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <xTaskCreateStatic+0x46>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	61fb      	str	r3, [r7, #28]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bc4:	23a0      	movs	r3, #160	; 0xa0
 8005bc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2ba0      	cmp	r3, #160	; 0xa0
 8005bcc:	d00a      	beq.n	8005be4 <xTaskCreateStatic+0x66>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	61bb      	str	r3, [r7, #24]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d01e      	beq.n	8005c28 <xTaskCreateStatic+0xaa>
 8005bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c02:	2300      	movs	r3, #0
 8005c04:	9303      	str	r3, [sp, #12]
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	9302      	str	r3, [sp, #8]
 8005c0a:	f107 0314 	add.w	r3, r7, #20
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f850 	bl	8005cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c22:	f000 f8e3 	bl	8005dec <prvAddNewTaskToReadyList>
 8005c26:	e001      	b.n	8005c2c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c2c:	697b      	ldr	r3, [r7, #20]
	}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3728      	adds	r7, #40	; 0x28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b08c      	sub	sp, #48	; 0x30
 8005c3a:	af04      	add	r7, sp, #16
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 f9be 	bl	8006fcc <pvPortMalloc>
 8005c50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00e      	beq.n	8005c76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c58:	20a0      	movs	r0, #160	; 0xa0
 8005c5a:	f001 f9b7 	bl	8006fcc <pvPortMalloc>
 8005c5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c6c:	e005      	b.n	8005c7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c6e:	6978      	ldr	r0, [r7, #20]
 8005c70:	f001 fa70 	bl	8007154 <vPortFree>
 8005c74:	e001      	b.n	8005c7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d017      	beq.n	8005cb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c88:	88fa      	ldrh	r2, [r7, #6]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	9303      	str	r3, [sp, #12]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	9302      	str	r3, [sp, #8]
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f80e 	bl	8005cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ca4:	69f8      	ldr	r0, [r7, #28]
 8005ca6:	f000 f8a1 	bl	8005dec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005caa:	2301      	movs	r3, #1
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	e002      	b.n	8005cb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
	}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f023 0307 	bic.w	r3, r3, #7
 8005ce6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	617b      	str	r3, [r7, #20]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e012      	b.n	8005d34 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	7819      	ldrb	r1, [r3, #0]
 8005d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3334      	adds	r3, #52	; 0x34
 8005d1e:	460a      	mov	r2, r1
 8005d20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	3301      	adds	r3, #1
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b0f      	cmp	r3, #15
 8005d38:	d9e9      	bls.n	8005d0e <prvInitialiseNewTask+0x4e>
 8005d3a:	e000      	b.n	8005d3e <prvInitialiseNewTask+0x7e>
		{
			break;
 8005d3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	2b06      	cmp	r3, #6
 8005d4a:	d901      	bls.n	8005d50 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d4c:	2306      	movs	r3, #6
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	2200      	movs	r2, #0
 8005d60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	3304      	adds	r3, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff f893 	bl	8004e92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	3318      	adds	r3, #24
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff f88e 	bl	8004e92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	f1c3 0207 	rsb	r2, r3, #7
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	334c      	adds	r3, #76	; 0x4c
 8005da0:	224c      	movs	r2, #76	; 0x4c
 8005da2:	2100      	movs	r1, #0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f002 fb64 	bl	8008472 <memset>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <prvInitialiseNewTask+0x120>)
 8005dae:	651a      	str	r2, [r3, #80]	; 0x50
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	4a0c      	ldr	r2, [pc, #48]	; (8005de4 <prvInitialiseNewTask+0x124>)
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	4a0b      	ldr	r2, [pc, #44]	; (8005de8 <prvInitialiseNewTask+0x128>)
 8005dba:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	69b8      	ldr	r0, [r7, #24]
 8005dc2:	f000 ff11 	bl	8006be8 <pxPortInitialiseStack>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dd8:	bf00      	nop
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20001378 	.word	0x20001378
 8005de4:	200013e0 	.word	0x200013e0
 8005de8:	20001448 	.word	0x20001448

08005dec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005df4:	f000 ffea 	bl	8006dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005df8:	4b2a      	ldr	r3, [pc, #168]	; (8005ea4 <prvAddNewTaskToReadyList+0xb8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	4a29      	ldr	r2, [pc, #164]	; (8005ea4 <prvAddNewTaskToReadyList+0xb8>)
 8005e00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e02:	4b29      	ldr	r3, [pc, #164]	; (8005ea8 <prvAddNewTaskToReadyList+0xbc>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e0a:	4a27      	ldr	r2, [pc, #156]	; (8005ea8 <prvAddNewTaskToReadyList+0xbc>)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e10:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <prvAddNewTaskToReadyList+0xb8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d110      	bne.n	8005e3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e18:	f000 fbdc 	bl	80065d4 <prvInitialiseTaskLists>
 8005e1c:	e00d      	b.n	8005e3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e1e:	4b23      	ldr	r3, [pc, #140]	; (8005eac <prvAddNewTaskToReadyList+0xc0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <prvAddNewTaskToReadyList+0xbc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d802      	bhi.n	8005e3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e34:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <prvAddNewTaskToReadyList+0xbc>)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e3a:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <prvAddNewTaskToReadyList+0xc4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <prvAddNewTaskToReadyList+0xc4>)
 8005e42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	2201      	movs	r2, #1
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <prvAddNewTaskToReadyList+0xc8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <prvAddNewTaskToReadyList+0xc8>)
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <prvAddNewTaskToReadyList+0xcc>)
 8005e64:	441a      	add	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f7ff f81c 	bl	8004eaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e72:	f000 ffdb 	bl	8006e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e76:	4b0d      	ldr	r3, [pc, #52]	; (8005eac <prvAddNewTaskToReadyList+0xc0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <prvAddNewTaskToReadyList+0xbc>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d207      	bcs.n	8005e9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <prvAddNewTaskToReadyList+0xd0>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	2000072c 	.word	0x2000072c
 8005ea8:	2000062c 	.word	0x2000062c
 8005eac:	20000738 	.word	0x20000738
 8005eb0:	20000748 	.word	0x20000748
 8005eb4:	20000734 	.word	0x20000734
 8005eb8:	20000630 	.word	0x20000630
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d017      	beq.n	8005f02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ed2:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <vTaskDelay+0x60>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <vTaskDelay+0x30>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	60bb      	str	r3, [r7, #8]
}
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ef0:	f000 f884 	bl	8005ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fe10 	bl	8006b1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005efc:	f000 f88c 	bl	8006018 <xTaskResumeAll>
 8005f00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d107      	bne.n	8005f18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <vTaskDelay+0x64>)
 8005f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000754 	.word	0x20000754
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	; 0x28
 8005f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f36:	463a      	mov	r2, r7
 8005f38:	1d39      	adds	r1, r7, #4
 8005f3a:	f107 0308 	add.w	r3, r7, #8
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fa fe4a 	bl	8000bd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	9202      	str	r2, [sp, #8]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	2300      	movs	r3, #0
 8005f54:	460a      	mov	r2, r1
 8005f56:	4921      	ldr	r1, [pc, #132]	; (8005fdc <vTaskStartScheduler+0xb4>)
 8005f58:	4821      	ldr	r0, [pc, #132]	; (8005fe0 <vTaskStartScheduler+0xb8>)
 8005f5a:	f7ff fe10 	bl	8005b7e <xTaskCreateStatic>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4a20      	ldr	r2, [pc, #128]	; (8005fe4 <vTaskStartScheduler+0xbc>)
 8005f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f64:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <vTaskStartScheduler+0xbc>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e001      	b.n	8005f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d11b      	bne.n	8005fb4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	613b      	str	r3, [r7, #16]
}
 8005f8e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f90:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <vTaskStartScheduler+0xc0>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	334c      	adds	r3, #76	; 0x4c
 8005f96:	4a15      	ldr	r2, [pc, #84]	; (8005fec <vTaskStartScheduler+0xc4>)
 8005f98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f9a:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <vTaskStartScheduler+0xc8>)
 8005f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fa2:	4b14      	ldr	r3, [pc, #80]	; (8005ff4 <vTaskStartScheduler+0xcc>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005fa8:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <vTaskStartScheduler+0xd0>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fae:	f000 fe9b 	bl	8006ce8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fb2:	e00e      	b.n	8005fd2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d10a      	bne.n	8005fd2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	60fb      	str	r3, [r7, #12]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <vTaskStartScheduler+0xa8>
}
 8005fd2:	bf00      	nop
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	0800bd84 	.word	0x0800bd84
 8005fe0:	080065a5 	.word	0x080065a5
 8005fe4:	20000750 	.word	0x20000750
 8005fe8:	2000062c 	.word	0x2000062c
 8005fec:	20000074 	.word	0x20000074
 8005ff0:	2000074c 	.word	0x2000074c
 8005ff4:	20000738 	.word	0x20000738
 8005ff8:	20000730 	.word	0x20000730

08005ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <vTaskSuspendAll+0x18>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a03      	ldr	r2, [pc, #12]	; (8006014 <vTaskSuspendAll+0x18>)
 8006008:	6013      	str	r3, [r2, #0]
}
 800600a:	bf00      	nop
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20000754 	.word	0x20000754

08006018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006022:	2300      	movs	r3, #0
 8006024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006026:	4b41      	ldr	r3, [pc, #260]	; (800612c <xTaskResumeAll+0x114>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <xTaskResumeAll+0x2c>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	603b      	str	r3, [r7, #0]
}
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006044:	f000 fec2 	bl	8006dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006048:	4b38      	ldr	r3, [pc, #224]	; (800612c <xTaskResumeAll+0x114>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	4a37      	ldr	r2, [pc, #220]	; (800612c <xTaskResumeAll+0x114>)
 8006050:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006052:	4b36      	ldr	r3, [pc, #216]	; (800612c <xTaskResumeAll+0x114>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d161      	bne.n	800611e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800605a:	4b35      	ldr	r3, [pc, #212]	; (8006130 <xTaskResumeAll+0x118>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d05d      	beq.n	800611e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006062:	e02e      	b.n	80060c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006064:	4b33      	ldr	r3, [pc, #204]	; (8006134 <xTaskResumeAll+0x11c>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3318      	adds	r3, #24
 8006070:	4618      	mov	r0, r3
 8006072:	f7fe ff75 	bl	8004f60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3304      	adds	r3, #4
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe ff70 	bl	8004f60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	2201      	movs	r2, #1
 8006086:	409a      	lsls	r2, r3
 8006088:	4b2b      	ldr	r3, [pc, #172]	; (8006138 <xTaskResumeAll+0x120>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4313      	orrs	r3, r2
 800608e:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <xTaskResumeAll+0x120>)
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a27      	ldr	r2, [pc, #156]	; (800613c <xTaskResumeAll+0x124>)
 80060a0:	441a      	add	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fe fefe 	bl	8004eaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	4b23      	ldr	r3, [pc, #140]	; (8006140 <xTaskResumeAll+0x128>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d302      	bcc.n	80060c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80060bc:	4b21      	ldr	r3, [pc, #132]	; (8006144 <xTaskResumeAll+0x12c>)
 80060be:	2201      	movs	r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060c2:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <xTaskResumeAll+0x11c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1cc      	bne.n	8006064 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060d0:	f000 fb22 	bl	8006718 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060d4:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <xTaskResumeAll+0x130>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d010      	beq.n	8006102 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060e0:	f000 f836 	bl	8006150 <xTaskIncrementTick>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060ea:	4b16      	ldr	r3, [pc, #88]	; (8006144 <xTaskResumeAll+0x12c>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f1      	bne.n	80060e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <xTaskResumeAll+0x130>)
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006102:	4b10      	ldr	r3, [pc, #64]	; (8006144 <xTaskResumeAll+0x12c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800610a:	2301      	movs	r3, #1
 800610c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <xTaskResumeAll+0x134>)
 8006110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800611e:	f000 fe85 	bl	8006e2c <vPortExitCritical>

	return xAlreadyYielded;
 8006122:	68bb      	ldr	r3, [r7, #8]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000754 	.word	0x20000754
 8006130:	2000072c 	.word	0x2000072c
 8006134:	200006ec 	.word	0x200006ec
 8006138:	20000734 	.word	0x20000734
 800613c:	20000630 	.word	0x20000630
 8006140:	2000062c 	.word	0x2000062c
 8006144:	20000740 	.word	0x20000740
 8006148:	2000073c 	.word	0x2000073c
 800614c:	e000ed04 	.word	0xe000ed04

08006150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615a:	4b51      	ldr	r3, [pc, #324]	; (80062a0 <xTaskIncrementTick+0x150>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 808d 	bne.w	800627e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006164:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <xTaskIncrementTick+0x154>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800616c:	4a4d      	ldr	r2, [pc, #308]	; (80062a4 <xTaskIncrementTick+0x154>)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d120      	bne.n	80061ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006178:	4b4b      	ldr	r3, [pc, #300]	; (80062a8 <xTaskIncrementTick+0x158>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <xTaskIncrementTick+0x48>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	603b      	str	r3, [r7, #0]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <xTaskIncrementTick+0x46>
 8006198:	4b43      	ldr	r3, [pc, #268]	; (80062a8 <xTaskIncrementTick+0x158>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	4b43      	ldr	r3, [pc, #268]	; (80062ac <xTaskIncrementTick+0x15c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a41      	ldr	r2, [pc, #260]	; (80062a8 <xTaskIncrementTick+0x158>)
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	4a41      	ldr	r2, [pc, #260]	; (80062ac <xTaskIncrementTick+0x15c>)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	4b40      	ldr	r3, [pc, #256]	; (80062b0 <xTaskIncrementTick+0x160>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	4a3f      	ldr	r2, [pc, #252]	; (80062b0 <xTaskIncrementTick+0x160>)
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	f000 faaf 	bl	8006718 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061ba:	4b3e      	ldr	r3, [pc, #248]	; (80062b4 <xTaskIncrementTick+0x164>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d34d      	bcc.n	8006260 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c4:	4b38      	ldr	r3, [pc, #224]	; (80062a8 <xTaskIncrementTick+0x158>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <xTaskIncrementTick+0x82>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <xTaskIncrementTick+0x84>
 80061d2:	2300      	movs	r3, #0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d8:	4b36      	ldr	r3, [pc, #216]	; (80062b4 <xTaskIncrementTick+0x164>)
 80061da:	f04f 32ff 	mov.w	r2, #4294967295
 80061de:	601a      	str	r2, [r3, #0]
					break;
 80061e0:	e03e      	b.n	8006260 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061e2:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <xTaskIncrementTick+0x158>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d203      	bcs.n	8006202 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061fa:	4a2e      	ldr	r2, [pc, #184]	; (80062b4 <xTaskIncrementTick+0x164>)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6013      	str	r3, [r2, #0]
						break;
 8006200:	e02e      	b.n	8006260 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	3304      	adds	r3, #4
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe feaa 	bl	8004f60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	3318      	adds	r3, #24
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe fea1 	bl	8004f60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	2201      	movs	r2, #1
 8006224:	409a      	lsls	r2, r3
 8006226:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <xTaskIncrementTick+0x168>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4313      	orrs	r3, r2
 800622c:	4a22      	ldr	r2, [pc, #136]	; (80062b8 <xTaskIncrementTick+0x168>)
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4a1f      	ldr	r2, [pc, #124]	; (80062bc <xTaskIncrementTick+0x16c>)
 800623e:	441a      	add	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f7fe fe2f 	bl	8004eaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006250:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <xTaskIncrementTick+0x170>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	429a      	cmp	r2, r3
 8006258:	d3b4      	bcc.n	80061c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800625a:	2301      	movs	r3, #1
 800625c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625e:	e7b1      	b.n	80061c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006260:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <xTaskIncrementTick+0x170>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	4915      	ldr	r1, [pc, #84]	; (80062bc <xTaskIncrementTick+0x16c>)
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d907      	bls.n	8006288 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006278:	2301      	movs	r3, #1
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	e004      	b.n	8006288 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800627e:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <xTaskIncrementTick+0x174>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	4a0f      	ldr	r2, [pc, #60]	; (80062c4 <xTaskIncrementTick+0x174>)
 8006286:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006288:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <xTaskIncrementTick+0x178>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006290:	2301      	movs	r3, #1
 8006292:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006294:	697b      	ldr	r3, [r7, #20]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000754 	.word	0x20000754
 80062a4:	20000730 	.word	0x20000730
 80062a8:	200006e4 	.word	0x200006e4
 80062ac:	200006e8 	.word	0x200006e8
 80062b0:	20000744 	.word	0x20000744
 80062b4:	2000074c 	.word	0x2000074c
 80062b8:	20000734 	.word	0x20000734
 80062bc:	20000630 	.word	0x20000630
 80062c0:	2000062c 	.word	0x2000062c
 80062c4:	2000073c 	.word	0x2000073c
 80062c8:	20000740 	.word	0x20000740

080062cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062d2:	4b29      	ldr	r3, [pc, #164]	; (8006378 <vTaskSwitchContext+0xac>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062da:	4b28      	ldr	r3, [pc, #160]	; (800637c <vTaskSwitchContext+0xb0>)
 80062dc:	2201      	movs	r2, #1
 80062de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062e0:	e044      	b.n	800636c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80062e2:	4b26      	ldr	r3, [pc, #152]	; (800637c <vTaskSwitchContext+0xb0>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80062e8:	4b25      	ldr	r3, [pc, #148]	; (8006380 <vTaskSwitchContext+0xb4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	fab3 f383 	clz	r3, r3
 80062f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062f6:	7afb      	ldrb	r3, [r7, #11]
 80062f8:	f1c3 031f 	rsb	r3, r3, #31
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	4921      	ldr	r1, [pc, #132]	; (8006384 <vTaskSwitchContext+0xb8>)
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10a      	bne.n	8006328 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	607b      	str	r3, [r7, #4]
}
 8006324:	bf00      	nop
 8006326:	e7fe      	b.n	8006326 <vTaskSwitchContext+0x5a>
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4a14      	ldr	r2, [pc, #80]	; (8006384 <vTaskSwitchContext+0xb8>)
 8006334:	4413      	add	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3308      	adds	r3, #8
 800634a:	429a      	cmp	r2, r3
 800634c:	d104      	bne.n	8006358 <vTaskSwitchContext+0x8c>
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	605a      	str	r2, [r3, #4]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <vTaskSwitchContext+0xbc>)
 8006360:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006362:	4b09      	ldr	r3, [pc, #36]	; (8006388 <vTaskSwitchContext+0xbc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	334c      	adds	r3, #76	; 0x4c
 8006368:	4a08      	ldr	r2, [pc, #32]	; (800638c <vTaskSwitchContext+0xc0>)
 800636a:	6013      	str	r3, [r2, #0]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000754 	.word	0x20000754
 800637c:	20000740 	.word	0x20000740
 8006380:	20000734 	.word	0x20000734
 8006384:	20000630 	.word	0x20000630
 8006388:	2000062c 	.word	0x2000062c
 800638c:	20000074 	.word	0x20000074

08006390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	60fb      	str	r3, [r7, #12]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063b6:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <vTaskPlaceOnEventList+0x44>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3318      	adds	r3, #24
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fe fd96 	bl	8004ef0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063c4:	2101      	movs	r1, #1
 80063c6:	6838      	ldr	r0, [r7, #0]
 80063c8:	f000 fba8 	bl	8006b1c <prvAddCurrentTaskToDelayedList>
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	2000062c 	.word	0x2000062c

080063d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	60fb      	str	r3, [r7, #12]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	3318      	adds	r3, #24
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fda9 	bl	8004f60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800640e:	4b1d      	ldr	r3, [pc, #116]	; (8006484 <xTaskRemoveFromEventList+0xac>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d11c      	bne.n	8006450 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	3304      	adds	r3, #4
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fda0 	bl	8004f60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	2201      	movs	r2, #1
 8006426:	409a      	lsls	r2, r3
 8006428:	4b17      	ldr	r3, [pc, #92]	; (8006488 <xTaskRemoveFromEventList+0xb0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4313      	orrs	r3, r2
 800642e:	4a16      	ldr	r2, [pc, #88]	; (8006488 <xTaskRemoveFromEventList+0xb0>)
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4a13      	ldr	r2, [pc, #76]	; (800648c <xTaskRemoveFromEventList+0xb4>)
 8006440:	441a      	add	r2, r3
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fe fd2e 	bl	8004eaa <vListInsertEnd>
 800644e:	e005      	b.n	800645c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	3318      	adds	r3, #24
 8006454:	4619      	mov	r1, r3
 8006456:	480e      	ldr	r0, [pc, #56]	; (8006490 <xTaskRemoveFromEventList+0xb8>)
 8006458:	f7fe fd27 	bl	8004eaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <xTaskRemoveFromEventList+0xbc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	429a      	cmp	r2, r3
 8006468:	d905      	bls.n	8006476 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800646a:	2301      	movs	r3, #1
 800646c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <xTaskRemoveFromEventList+0xc0>)
 8006470:	2201      	movs	r2, #1
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	e001      	b.n	800647a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800647a:	697b      	ldr	r3, [r7, #20]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000754 	.word	0x20000754
 8006488:	20000734 	.word	0x20000734
 800648c:	20000630 	.word	0x20000630
 8006490:	200006ec 	.word	0x200006ec
 8006494:	2000062c 	.word	0x2000062c
 8006498:	20000740 	.word	0x20000740

0800649c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <vTaskInternalSetTimeOutState+0x24>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <vTaskInternalSetTimeOutState+0x28>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	605a      	str	r2, [r3, #4]
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000744 	.word	0x20000744
 80064c4:	20000730 	.word	0x20000730

080064c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	613b      	str	r3, [r7, #16]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	60fb      	str	r3, [r7, #12]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800650a:	f000 fc5f 	bl	8006dcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800650e:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <xTaskCheckForTimeOut+0xbc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d102      	bne.n	800652e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006528:	2300      	movs	r3, #0
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	e023      	b.n	8006576 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b15      	ldr	r3, [pc, #84]	; (8006588 <xTaskCheckForTimeOut+0xc0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d007      	beq.n	800654a <xTaskCheckForTimeOut+0x82>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	429a      	cmp	r2, r3
 8006542:	d302      	bcc.n	800654a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	e015      	b.n	8006576 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	429a      	cmp	r2, r3
 8006552:	d20b      	bcs.n	800656c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff ff9b 	bl	800649c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	e004      	b.n	8006576 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006572:	2301      	movs	r3, #1
 8006574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006576:	f000 fc59 	bl	8006e2c <vPortExitCritical>

	return xReturn;
 800657a:	69fb      	ldr	r3, [r7, #28]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3720      	adds	r7, #32
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000730 	.word	0x20000730
 8006588:	20000744 	.word	0x20000744

0800658c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <vTaskMissedYield+0x14>)
 8006592:	2201      	movs	r2, #1
 8006594:	601a      	str	r2, [r3, #0]
}
 8006596:	bf00      	nop
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000740 	.word	0x20000740

080065a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065ac:	f000 f852 	bl	8006654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065b0:	4b06      	ldr	r3, [pc, #24]	; (80065cc <prvIdleTask+0x28>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d9f9      	bls.n	80065ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <prvIdleTask+0x2c>)
 80065ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065c8:	e7f0      	b.n	80065ac <prvIdleTask+0x8>
 80065ca:	bf00      	nop
 80065cc:	20000630 	.word	0x20000630
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065da:	2300      	movs	r3, #0
 80065dc:	607b      	str	r3, [r7, #4]
 80065de:	e00c      	b.n	80065fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4a12      	ldr	r2, [pc, #72]	; (8006634 <prvInitialiseTaskLists+0x60>)
 80065ec:	4413      	add	r3, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe fc30 	bl	8004e54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3301      	adds	r3, #1
 80065f8:	607b      	str	r3, [r7, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	d9ef      	bls.n	80065e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006600:	480d      	ldr	r0, [pc, #52]	; (8006638 <prvInitialiseTaskLists+0x64>)
 8006602:	f7fe fc27 	bl	8004e54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006606:	480d      	ldr	r0, [pc, #52]	; (800663c <prvInitialiseTaskLists+0x68>)
 8006608:	f7fe fc24 	bl	8004e54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800660c:	480c      	ldr	r0, [pc, #48]	; (8006640 <prvInitialiseTaskLists+0x6c>)
 800660e:	f7fe fc21 	bl	8004e54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006612:	480c      	ldr	r0, [pc, #48]	; (8006644 <prvInitialiseTaskLists+0x70>)
 8006614:	f7fe fc1e 	bl	8004e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006618:	480b      	ldr	r0, [pc, #44]	; (8006648 <prvInitialiseTaskLists+0x74>)
 800661a:	f7fe fc1b 	bl	8004e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <prvInitialiseTaskLists+0x78>)
 8006620:	4a05      	ldr	r2, [pc, #20]	; (8006638 <prvInitialiseTaskLists+0x64>)
 8006622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <prvInitialiseTaskLists+0x7c>)
 8006626:	4a05      	ldr	r2, [pc, #20]	; (800663c <prvInitialiseTaskLists+0x68>)
 8006628:	601a      	str	r2, [r3, #0]
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000630 	.word	0x20000630
 8006638:	200006bc 	.word	0x200006bc
 800663c:	200006d0 	.word	0x200006d0
 8006640:	200006ec 	.word	0x200006ec
 8006644:	20000700 	.word	0x20000700
 8006648:	20000718 	.word	0x20000718
 800664c:	200006e4 	.word	0x200006e4
 8006650:	200006e8 	.word	0x200006e8

08006654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800665a:	e019      	b.n	8006690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800665c:	f000 fbb6 	bl	8006dcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006660:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <prvCheckTasksWaitingTermination+0x50>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe fc77 	bl	8004f60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006672:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <prvCheckTasksWaitingTermination+0x54>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3b01      	subs	r3, #1
 8006678:	4a0b      	ldr	r2, [pc, #44]	; (80066a8 <prvCheckTasksWaitingTermination+0x54>)
 800667a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <prvCheckTasksWaitingTermination+0x58>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3b01      	subs	r3, #1
 8006682:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <prvCheckTasksWaitingTermination+0x58>)
 8006684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006686:	f000 fbd1 	bl	8006e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f810 	bl	80066b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <prvCheckTasksWaitingTermination+0x58>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e1      	bne.n	800665c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000700 	.word	0x20000700
 80066a8:	2000072c 	.word	0x2000072c
 80066ac:	20000714 	.word	0x20000714

080066b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	334c      	adds	r3, #76	; 0x4c
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 fef5 	bl	80084ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d108      	bne.n	80066de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fd3f 	bl	8007154 <vPortFree>
				vPortFree( pxTCB );
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fd3c 	bl	8007154 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066dc:	e018      	b.n	8006710 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d103      	bne.n	80066f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fd33 	bl	8007154 <vPortFree>
	}
 80066ee:	e00f      	b.n	8006710 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d00a      	beq.n	8006710 <prvDeleteTCB+0x60>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	60fb      	str	r3, [r7, #12]
}
 800670c:	bf00      	nop
 800670e:	e7fe      	b.n	800670e <prvDeleteTCB+0x5e>
	}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800671e:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <prvResetNextTaskUnblockTime+0x40>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <prvResetNextTaskUnblockTime+0x14>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <prvResetNextTaskUnblockTime+0x16>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006732:	4b0a      	ldr	r3, [pc, #40]	; (800675c <prvResetNextTaskUnblockTime+0x44>)
 8006734:	f04f 32ff 	mov.w	r2, #4294967295
 8006738:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800673a:	e008      	b.n	800674e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <prvResetNextTaskUnblockTime+0x40>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4a04      	ldr	r2, [pc, #16]	; (800675c <prvResetNextTaskUnblockTime+0x44>)
 800674c:	6013      	str	r3, [r2, #0]
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr
 8006758:	200006e4 	.word	0x200006e4
 800675c:	2000074c 	.word	0x2000074c

08006760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <xTaskGetSchedulerState+0x34>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800676e:	2301      	movs	r3, #1
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	e008      	b.n	8006786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <xTaskGetSchedulerState+0x38>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d102      	bne.n	8006782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800677c:	2302      	movs	r3, #2
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	e001      	b.n	8006786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006782:	2300      	movs	r3, #0
 8006784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006786:	687b      	ldr	r3, [r7, #4]
	}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000738 	.word	0x20000738
 8006798:	20000754 	.word	0x20000754

0800679c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d06e      	beq.n	8006890 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b6:	4b39      	ldr	r3, [pc, #228]	; (800689c <xTaskPriorityInherit+0x100>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	429a      	cmp	r2, r3
 80067be:	d25e      	bcs.n	800687e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	db06      	blt.n	80067d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c8:	4b34      	ldr	r3, [pc, #208]	; (800689c <xTaskPriorityInherit+0x100>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	f1c3 0207 	rsb	r2, r3, #7
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6959      	ldr	r1, [r3, #20]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4a2e      	ldr	r2, [pc, #184]	; (80068a0 <xTaskPriorityInherit+0x104>)
 80067e8:	4413      	add	r3, r2
 80067ea:	4299      	cmp	r1, r3
 80067ec:	d101      	bne.n	80067f2 <xTaskPriorityInherit+0x56>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <xTaskPriorityInherit+0x58>
 80067f2:	2300      	movs	r3, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d03a      	beq.n	800686e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fbaf 	bl	8004f60 <uxListRemove>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d115      	bne.n	8006834 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	4924      	ldr	r1, [pc, #144]	; (80068a0 <xTaskPriorityInherit+0x104>)
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	440b      	add	r3, r1
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <xTaskPriorityInherit+0x98>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	2201      	movs	r2, #1
 8006824:	fa02 f303 	lsl.w	r3, r2, r3
 8006828:	43da      	mvns	r2, r3
 800682a:	4b1e      	ldr	r3, [pc, #120]	; (80068a4 <xTaskPriorityInherit+0x108>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4013      	ands	r3, r2
 8006830:	4a1c      	ldr	r2, [pc, #112]	; (80068a4 <xTaskPriorityInherit+0x108>)
 8006832:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <xTaskPriorityInherit+0x100>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	2201      	movs	r2, #1
 8006844:	409a      	lsls	r2, r3
 8006846:	4b17      	ldr	r3, [pc, #92]	; (80068a4 <xTaskPriorityInherit+0x108>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4313      	orrs	r3, r2
 800684c:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <xTaskPriorityInherit+0x108>)
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <xTaskPriorityInherit+0x104>)
 800685e:	441a      	add	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7fe fb1f 	bl	8004eaa <vListInsertEnd>
 800686c:	e004      	b.n	8006878 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <xTaskPriorityInherit+0x100>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006878:	2301      	movs	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	e008      	b.n	8006890 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006882:	4b06      	ldr	r3, [pc, #24]	; (800689c <xTaskPriorityInherit+0x100>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006888:	429a      	cmp	r2, r3
 800688a:	d201      	bcs.n	8006890 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800688c:	2301      	movs	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006890:	68fb      	ldr	r3, [r7, #12]
	}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	2000062c 	.word	0x2000062c
 80068a0:	20000630 	.word	0x20000630
 80068a4:	20000734 	.word	0x20000734

080068a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d06e      	beq.n	800699c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068be:	4b3a      	ldr	r3, [pc, #232]	; (80069a8 <xTaskPriorityDisinherit+0x100>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d00a      	beq.n	80068de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	60fb      	str	r3, [r7, #12]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10a      	bne.n	80068fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	60bb      	str	r3, [r7, #8]
}
 80068f8:	bf00      	nop
 80068fa:	e7fe      	b.n	80068fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006900:	1e5a      	subs	r2, r3, #1
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690e:	429a      	cmp	r2, r3
 8006910:	d044      	beq.n	800699c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	2b00      	cmp	r3, #0
 8006918:	d140      	bne.n	800699c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	3304      	adds	r3, #4
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fb1e 	bl	8004f60 <uxListRemove>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d115      	bne.n	8006956 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692e:	491f      	ldr	r1, [pc, #124]	; (80069ac <xTaskPriorityDisinherit+0x104>)
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xTaskPriorityDisinherit+0xae>
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	2201      	movs	r2, #1
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43da      	mvns	r2, r3
 800694c:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <xTaskPriorityDisinherit+0x108>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4013      	ands	r3, r2
 8006952:	4a17      	ldr	r2, [pc, #92]	; (80069b0 <xTaskPriorityDisinherit+0x108>)
 8006954:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	f1c3 0207 	rsb	r2, r3, #7
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	2201      	movs	r2, #1
 8006970:	409a      	lsls	r2, r3
 8006972:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <xTaskPriorityDisinherit+0x108>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4313      	orrs	r3, r2
 8006978:	4a0d      	ldr	r2, [pc, #52]	; (80069b0 <xTaskPriorityDisinherit+0x108>)
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4a08      	ldr	r2, [pc, #32]	; (80069ac <xTaskPriorityDisinherit+0x104>)
 800698a:	441a      	add	r2, r3
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f7fe fa89 	bl	8004eaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006998:	2301      	movs	r3, #1
 800699a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800699c:	697b      	ldr	r3, [r7, #20]
	}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	2000062c 	.word	0x2000062c
 80069ac:	20000630 	.word	0x20000630
 80069b0:	20000734 	.word	0x20000734

080069b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80069c2:	2301      	movs	r3, #1
 80069c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8088 	beq.w	8006ade <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	60fb      	str	r3, [r7, #12]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d902      	bls.n	80069fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	e002      	b.n	8006a02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d068      	beq.n	8006ade <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d163      	bne.n	8006ade <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006a16:	4b34      	ldr	r3, [pc, #208]	; (8006ae8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d10a      	bne.n	8006a36 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	60bb      	str	r3, [r7, #8]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	db04      	blt.n	8006a54 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f1c3 0207 	rsb	r2, r3, #7
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	6959      	ldr	r1, [r3, #20]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4a22      	ldr	r2, [pc, #136]	; (8006aec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a64:	4413      	add	r3, r2
 8006a66:	4299      	cmp	r1, r3
 8006a68:	d101      	bne.n	8006a6e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d034      	beq.n	8006ade <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe fa71 	bl	8004f60 <uxListRemove>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d115      	bne.n	8006ab0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	4918      	ldr	r1, [pc, #96]	; (8006aec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	43da      	mvns	r2, r3
 8006aa6:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006aae:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	409a      	lsls	r2, r3
 8006ab8:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	4a0c      	ldr	r2, [pc, #48]	; (8006af0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4a07      	ldr	r2, [pc, #28]	; (8006aec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ad0:	441a      	add	r2, r3
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f7fe f9e6 	bl	8004eaa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ade:	bf00      	nop
 8006ae0:	3720      	adds	r7, #32
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	2000062c 	.word	0x2000062c
 8006aec:	20000630 	.word	0x20000630
 8006af0:	20000734 	.word	0x20000734

08006af4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <pvTaskIncrementMutexHeldCount+0x24>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d004      	beq.n	8006b0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006b00:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b06:	3201      	adds	r2, #1
 8006b08:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006b0a:	4b03      	ldr	r3, [pc, #12]	; (8006b18 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
	}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	2000062c 	.word	0x2000062c

08006b1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b26:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b2c:	4b28      	ldr	r3, [pc, #160]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fa14 	bl	8004f60 <uxListRemove>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006b3e:	4b24      	ldr	r3, [pc, #144]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	2201      	movs	r2, #1
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43da      	mvns	r2, r3
 8006b4c:	4b21      	ldr	r3, [pc, #132]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4013      	ands	r3, r2
 8006b52:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d10a      	bne.n	8006b74 <prvAddCurrentTaskToDelayedList+0x58>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b64:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	481a      	ldr	r0, [pc, #104]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b6e:	f7fe f99c 	bl	8004eaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b72:	e026      	b.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b7c:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d209      	bcs.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b8c:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f7fe f9a9 	bl	8004ef0 <vListInsert>
}
 8006b9e:	e010      	b.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7fe f99f 	bl	8004ef0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d202      	bcs.n	8006bc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bbc:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6013      	str	r3, [r2, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000730 	.word	0x20000730
 8006bd0:	2000062c 	.word	0x2000062c
 8006bd4:	20000734 	.word	0x20000734
 8006bd8:	20000718 	.word	0x20000718
 8006bdc:	200006e8 	.word	0x200006e8
 8006be0:	200006e4 	.word	0x200006e4
 8006be4:	2000074c 	.word	0x2000074c

08006be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3b04      	subs	r3, #4
 8006bf8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3b04      	subs	r3, #4
 8006c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0201 	bic.w	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3b04      	subs	r3, #4
 8006c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <pxPortInitialiseStack+0x54>)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b14      	subs	r3, #20
 8006c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3b20      	subs	r3, #32
 8006c2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr
 8006c3c:	08006c41 	.word	0x08006c41

08006c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c4a:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <prvTaskExitError+0x54>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d00a      	beq.n	8006c6a <prvTaskExitError+0x2a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60fb      	str	r3, [r7, #12]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <prvTaskExitError+0x28>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	60bb      	str	r3, [r7, #8]
}
 8006c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c7e:	bf00      	nop
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0fc      	beq.n	8006c80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000018 	.word	0x20000018
	...

08006ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <pxCurrentTCBConst2>)
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	6808      	ldr	r0, [r1, #0]
 8006ca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006caa:	f380 8809 	msr	PSP, r0
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f380 8811 	msr	BASEPRI, r0
 8006cba:	f04e 0e0d 	orr.w	lr, lr, #13
 8006cbe:	4770      	bx	lr

08006cc0 <pxCurrentTCBConst2>:
 8006cc0:	2000062c 	.word	0x2000062c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop

08006cc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006cc8:	4806      	ldr	r0, [pc, #24]	; (8006ce4 <prvPortStartFirstTask+0x1c>)
 8006cca:	6800      	ldr	r0, [r0, #0]
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f380 8808 	msr	MSP, r0
 8006cd2:	b662      	cpsie	i
 8006cd4:	b661      	cpsie	f
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	df00      	svc	0
 8006ce0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ce2:	bf00      	nop
 8006ce4:	e000ed08 	.word	0xe000ed08

08006ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cee:	4b32      	ldr	r3, [pc, #200]	; (8006db8 <xPortStartScheduler+0xd0>)
 8006cf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	4b2a      	ldr	r3, [pc, #168]	; (8006dbc <xPortStartScheduler+0xd4>)
 8006d14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d16:	4b2a      	ldr	r3, [pc, #168]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d18:	2207      	movs	r2, #7
 8006d1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d1c:	e009      	b.n	8006d32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d1e:	4b28      	ldr	r3, [pc, #160]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3a:	2b80      	cmp	r3, #128	; 0x80
 8006d3c:	d0ef      	beq.n	8006d1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1c3 0307 	rsb	r3, r3, #7
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d00a      	beq.n	8006d60 <xPortStartScheduler+0x78>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60bb      	str	r3, [r7, #8]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d60:	4b17      	ldr	r3, [pc, #92]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d6a:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d72:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <xPortStartScheduler+0xd8>)
 8006d74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a0d      	ldr	r2, [pc, #52]	; (8006dc4 <xPortStartScheduler+0xdc>)
 8006d90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d96:	f000 f8b9 	bl	8006f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <xPortStartScheduler+0xe0>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006da0:	f7ff ff92 	bl	8006cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006da4:	f7ff fa92 	bl	80062cc <vTaskSwitchContext>
	prvTaskExitError();
 8006da8:	f7ff ff4a 	bl	8006c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	e000e400 	.word	0xe000e400
 8006dbc:	20000758 	.word	0x20000758
 8006dc0:	2000075c 	.word	0x2000075c
 8006dc4:	e000ed20 	.word	0xe000ed20
 8006dc8:	20000018 	.word	0x20000018

08006dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	607b      	str	r3, [r7, #4]
}
 8006de4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006de6:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <vPortEnterCritical+0x58>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3301      	adds	r3, #1
 8006dec:	4a0d      	ldr	r2, [pc, #52]	; (8006e24 <vPortEnterCritical+0x58>)
 8006dee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006df0:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <vPortEnterCritical+0x58>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d10f      	bne.n	8006e18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <vPortEnterCritical+0x5c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	603b      	str	r3, [r7, #0]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <vPortEnterCritical+0x4a>
	}
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000018 	.word	0x20000018
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e32:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <vPortExitCritical+0x24>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	607b      	str	r3, [r7, #4]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	4a08      	ldr	r2, [pc, #32]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <vPortExitCritical+0x4c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d105      	bne.n	8006e6e <vPortExitCritical+0x42>
 8006e62:	2300      	movs	r3, #0
 8006e64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f383 8811 	msr	BASEPRI, r3
}
 8006e6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr
 8006e78:	20000018 	.word	0x20000018
 8006e7c:	00000000 	.word	0x00000000

08006e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e80:	f3ef 8009 	mrs	r0, PSP
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <pxCurrentTCBConst>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e90:	6010      	str	r0, [r2, #0]
 8006e92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e9a:	f380 8811 	msr	BASEPRI, r0
 8006e9e:	f7ff fa15 	bl	80062cc <vTaskSwitchContext>
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	6808      	ldr	r0, [r1, #0]
 8006eb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006eb6:	f380 8809 	msr	PSP, r0
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	4770      	bx	lr

08006ec0 <pxCurrentTCBConst>:
 8006ec0:	2000062c 	.word	0x2000062c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop

08006ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	607b      	str	r3, [r7, #4]
}
 8006ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ee2:	f7ff f935 	bl	8006150 <xTaskIncrementTick>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <SysTick_Handler+0x40>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f383 8811 	msr	BASEPRI, r3
}
 8006efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <vPortSetupTimerInterrupt+0x30>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <vPortSetupTimerInterrupt+0x34>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <vPortSetupTimerInterrupt+0x38>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a09      	ldr	r2, [pc, #36]	; (8006f48 <vPortSetupTimerInterrupt+0x3c>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	099b      	lsrs	r3, r3, #6
 8006f28:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <vPortSetupTimerInterrupt+0x40>)
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f2e:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <vPortSetupTimerInterrupt+0x30>)
 8006f30:	2207      	movs	r2, #7
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr
 8006f3c:	e000e010 	.word	0xe000e010
 8006f40:	e000e018 	.word	0xe000e018
 8006f44:	2000000c 	.word	0x2000000c
 8006f48:	10624dd3 	.word	0x10624dd3
 8006f4c:	e000e014 	.word	0xe000e014

08006f50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f56:	f3ef 8305 	mrs	r3, IPSR
 8006f5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b0f      	cmp	r3, #15
 8006f60:	d914      	bls.n	8006f8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f62:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <vPortValidateInterruptPriority+0x6c>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f6c:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <vPortValidateInterruptPriority+0x70>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	7afa      	ldrb	r2, [r7, #11]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d20a      	bcs.n	8006f8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	607b      	str	r3, [r7, #4]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <vPortValidateInterruptPriority+0x74>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <vPortValidateInterruptPriority+0x78>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d90a      	bls.n	8006fb2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	603b      	str	r3, [r7, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <vPortValidateInterruptPriority+0x60>
	}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr
 8006fbc:	e000e3f0 	.word	0xe000e3f0
 8006fc0:	20000758 	.word	0x20000758
 8006fc4:	e000ed0c 	.word	0xe000ed0c
 8006fc8:	2000075c 	.word	0x2000075c

08006fcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fd8:	f7ff f810 	bl	8005ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fdc:	4b58      	ldr	r3, [pc, #352]	; (8007140 <pvPortMalloc+0x174>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fe4:	f000 f910 	bl	8007208 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fe8:	4b56      	ldr	r3, [pc, #344]	; (8007144 <pvPortMalloc+0x178>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f040 808e 	bne.w	8007112 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01d      	beq.n	8007038 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ffc:	2208      	movs	r2, #8
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4413      	add	r3, r2
 8007002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b00      	cmp	r3, #0
 800700c:	d014      	beq.n	8007038 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f023 0307 	bic.w	r3, r3, #7
 8007014:	3308      	adds	r3, #8
 8007016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <pvPortMalloc+0x6c>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	617b      	str	r3, [r7, #20]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d069      	beq.n	8007112 <pvPortMalloc+0x146>
 800703e:	4b42      	ldr	r3, [pc, #264]	; (8007148 <pvPortMalloc+0x17c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d864      	bhi.n	8007112 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007048:	4b40      	ldr	r3, [pc, #256]	; (800714c <pvPortMalloc+0x180>)
 800704a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800704c:	4b3f      	ldr	r3, [pc, #252]	; (800714c <pvPortMalloc+0x180>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007052:	e004      	b.n	800705e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d903      	bls.n	8007070 <pvPortMalloc+0xa4>
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f1      	bne.n	8007054 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007070:	4b33      	ldr	r3, [pc, #204]	; (8007140 <pvPortMalloc+0x174>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007076:	429a      	cmp	r2, r3
 8007078:	d04b      	beq.n	8007112 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2208      	movs	r2, #8
 8007080:	4413      	add	r3, r2
 8007082:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	1ad2      	subs	r2, r2, r3
 8007094:	2308      	movs	r3, #8
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	429a      	cmp	r2, r3
 800709a:	d91f      	bls.n	80070dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800709c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4413      	add	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <pvPortMalloc+0xf8>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	613b      	str	r3, [r7, #16]
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	1ad2      	subs	r2, r2, r3
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070d6:	69b8      	ldr	r0, [r7, #24]
 80070d8:	f000 f8f8 	bl	80072cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070dc:	4b1a      	ldr	r3, [pc, #104]	; (8007148 <pvPortMalloc+0x17c>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	4a18      	ldr	r2, [pc, #96]	; (8007148 <pvPortMalloc+0x17c>)
 80070e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ea:	4b17      	ldr	r3, [pc, #92]	; (8007148 <pvPortMalloc+0x17c>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	4b18      	ldr	r3, [pc, #96]	; (8007150 <pvPortMalloc+0x184>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d203      	bcs.n	80070fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <pvPortMalloc+0x17c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a15      	ldr	r2, [pc, #84]	; (8007150 <pvPortMalloc+0x184>)
 80070fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	4b10      	ldr	r3, [pc, #64]	; (8007144 <pvPortMalloc+0x178>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	431a      	orrs	r2, r3
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007112:	f7fe ff81 	bl	8006018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <pvPortMalloc+0x16a>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <pvPortMalloc+0x168>
	return pvReturn;
 8007136:	69fb      	ldr	r3, [r7, #28]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3728      	adds	r7, #40	; 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20001368 	.word	0x20001368
 8007144:	20001374 	.word	0x20001374
 8007148:	2000136c 	.word	0x2000136c
 800714c:	20001360 	.word	0x20001360
 8007150:	20001370 	.word	0x20001370

08007154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d048      	beq.n	80071f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007166:	2308      	movs	r3, #8
 8007168:	425b      	negs	r3, r3
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4413      	add	r3, r2
 800716e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	4b21      	ldr	r3, [pc, #132]	; (8007200 <vPortFree+0xac>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4013      	ands	r3, r2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <vPortFree+0x44>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60fb      	str	r3, [r7, #12]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <vPortFree+0x62>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	60bb      	str	r3, [r7, #8]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	4b11      	ldr	r3, [pc, #68]	; (8007200 <vPortFree+0xac>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d019      	beq.n	80071f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d115      	bne.n	80071f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <vPortFree+0xac>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	401a      	ands	r2, r3
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071dc:	f7fe ff0e 	bl	8005ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	4b07      	ldr	r3, [pc, #28]	; (8007204 <vPortFree+0xb0>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4413      	add	r3, r2
 80071ea:	4a06      	ldr	r2, [pc, #24]	; (8007204 <vPortFree+0xb0>)
 80071ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ee:	6938      	ldr	r0, [r7, #16]
 80071f0:	f000 f86c 	bl	80072cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071f4:	f7fe ff10 	bl	8006018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071f8:	bf00      	nop
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20001374 	.word	0x20001374
 8007204:	2000136c 	.word	0x2000136c

08007208 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800720e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007212:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007214:	4b27      	ldr	r3, [pc, #156]	; (80072b4 <prvHeapInit+0xac>)
 8007216:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00c      	beq.n	800723c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3307      	adds	r3, #7
 8007226:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0307 	bic.w	r3, r3, #7
 800722e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <prvHeapInit+0xac>)
 8007238:	4413      	add	r3, r2
 800723a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007240:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <prvHeapInit+0xb0>)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <prvHeapInit+0xb0>)
 8007248:	2200      	movs	r2, #0
 800724a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4413      	add	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007254:	2208      	movs	r2, #8
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4a15      	ldr	r2, [pc, #84]	; (80072bc <prvHeapInit+0xb4>)
 8007268:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800726a:	4b14      	ldr	r3, [pc, #80]	; (80072bc <prvHeapInit+0xb4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007272:	4b12      	ldr	r3, [pc, #72]	; (80072bc <prvHeapInit+0xb4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	1ad2      	subs	r2, r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <prvHeapInit+0xb4>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <prvHeapInit+0xb8>)
 8007296:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <prvHeapInit+0xbc>)
 800729e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <prvHeapInit+0xc0>)
 80072a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072a6:	601a      	str	r2, [r3, #0]
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20000760 	.word	0x20000760
 80072b8:	20001360 	.word	0x20001360
 80072bc:	20001368 	.word	0x20001368
 80072c0:	20001370 	.word	0x20001370
 80072c4:	2000136c 	.word	0x2000136c
 80072c8:	20001374 	.word	0x20001374

080072cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072d4:	4b27      	ldr	r3, [pc, #156]	; (8007374 <prvInsertBlockIntoFreeList+0xa8>)
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	e002      	b.n	80072e0 <prvInsertBlockIntoFreeList+0x14>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d8f7      	bhi.n	80072da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	4413      	add	r3, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d108      	bne.n	800730e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	441a      	add	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	441a      	add	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d118      	bne.n	8007354 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	4b14      	ldr	r3, [pc, #80]	; (8007378 <prvInsertBlockIntoFreeList+0xac>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d00d      	beq.n	800734a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	441a      	add	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e008      	b.n	800735c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <prvInsertBlockIntoFreeList+0xac>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e003      	b.n	800735c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d002      	beq.n	800736a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr
 8007374:	20001360 	.word	0x20001360
 8007378:	20001368 	.word	0x20001368

0800737c <atoi>:
 800737c:	220a      	movs	r2, #10
 800737e:	2100      	movs	r1, #0
 8007380:	f000 b89a 	b.w	80074b8 <strtol>

08007384 <__itoa>:
 8007384:	1e93      	subs	r3, r2, #2
 8007386:	2b22      	cmp	r3, #34	; 0x22
 8007388:	b510      	push	{r4, lr}
 800738a:	460c      	mov	r4, r1
 800738c:	d904      	bls.n	8007398 <__itoa+0x14>
 800738e:	2300      	movs	r3, #0
 8007390:	461c      	mov	r4, r3
 8007392:	700b      	strb	r3, [r1, #0]
 8007394:	4620      	mov	r0, r4
 8007396:	bd10      	pop	{r4, pc}
 8007398:	2a0a      	cmp	r2, #10
 800739a:	d109      	bne.n	80073b0 <__itoa+0x2c>
 800739c:	2800      	cmp	r0, #0
 800739e:	da07      	bge.n	80073b0 <__itoa+0x2c>
 80073a0:	232d      	movs	r3, #45	; 0x2d
 80073a2:	700b      	strb	r3, [r1, #0]
 80073a4:	2101      	movs	r1, #1
 80073a6:	4240      	negs	r0, r0
 80073a8:	4421      	add	r1, r4
 80073aa:	f000 f88f 	bl	80074cc <__utoa>
 80073ae:	e7f1      	b.n	8007394 <__itoa+0x10>
 80073b0:	2100      	movs	r1, #0
 80073b2:	e7f9      	b.n	80073a8 <__itoa+0x24>

080073b4 <itoa>:
 80073b4:	f7ff bfe6 	b.w	8007384 <__itoa>

080073b8 <_strtol_l.constprop.0>:
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073be:	4686      	mov	lr, r0
 80073c0:	4690      	mov	r8, r2
 80073c2:	d001      	beq.n	80073c8 <_strtol_l.constprop.0+0x10>
 80073c4:	2b24      	cmp	r3, #36	; 0x24
 80073c6:	d906      	bls.n	80073d6 <_strtol_l.constprop.0+0x1e>
 80073c8:	f001 f8fc 	bl	80085c4 <__errno>
 80073cc:	2316      	movs	r3, #22
 80073ce:	6003      	str	r3, [r0, #0]
 80073d0:	2000      	movs	r0, #0
 80073d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d6:	460d      	mov	r5, r1
 80073d8:	4835      	ldr	r0, [pc, #212]	; (80074b0 <_strtol_l.constprop.0+0xf8>)
 80073da:	462a      	mov	r2, r5
 80073dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073e0:	5d06      	ldrb	r6, [r0, r4]
 80073e2:	f016 0608 	ands.w	r6, r6, #8
 80073e6:	d1f8      	bne.n	80073da <_strtol_l.constprop.0+0x22>
 80073e8:	2c2d      	cmp	r4, #45	; 0x2d
 80073ea:	d12e      	bne.n	800744a <_strtol_l.constprop.0+0x92>
 80073ec:	2601      	movs	r6, #1
 80073ee:	782c      	ldrb	r4, [r5, #0]
 80073f0:	1c95      	adds	r5, r2, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d057      	beq.n	80074a6 <_strtol_l.constprop.0+0xee>
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d109      	bne.n	800740e <_strtol_l.constprop.0+0x56>
 80073fa:	2c30      	cmp	r4, #48	; 0x30
 80073fc:	d107      	bne.n	800740e <_strtol_l.constprop.0+0x56>
 80073fe:	782a      	ldrb	r2, [r5, #0]
 8007400:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007404:	2a58      	cmp	r2, #88	; 0x58
 8007406:	d149      	bne.n	800749c <_strtol_l.constprop.0+0xe4>
 8007408:	2310      	movs	r3, #16
 800740a:	786c      	ldrb	r4, [r5, #1]
 800740c:	3502      	adds	r5, #2
 800740e:	2200      	movs	r2, #0
 8007410:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007414:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007418:	fbbc f9f3 	udiv	r9, ip, r3
 800741c:	4610      	mov	r0, r2
 800741e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007422:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007426:	2f09      	cmp	r7, #9
 8007428:	d814      	bhi.n	8007454 <_strtol_l.constprop.0+0x9c>
 800742a:	463c      	mov	r4, r7
 800742c:	42a3      	cmp	r3, r4
 800742e:	dd20      	ble.n	8007472 <_strtol_l.constprop.0+0xba>
 8007430:	1c57      	adds	r7, r2, #1
 8007432:	d007      	beq.n	8007444 <_strtol_l.constprop.0+0x8c>
 8007434:	4581      	cmp	r9, r0
 8007436:	d319      	bcc.n	800746c <_strtol_l.constprop.0+0xb4>
 8007438:	d101      	bne.n	800743e <_strtol_l.constprop.0+0x86>
 800743a:	45a2      	cmp	sl, r4
 800743c:	db16      	blt.n	800746c <_strtol_l.constprop.0+0xb4>
 800743e:	2201      	movs	r2, #1
 8007440:	fb00 4003 	mla	r0, r0, r3, r4
 8007444:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007448:	e7eb      	b.n	8007422 <_strtol_l.constprop.0+0x6a>
 800744a:	2c2b      	cmp	r4, #43	; 0x2b
 800744c:	bf04      	itt	eq
 800744e:	782c      	ldrbeq	r4, [r5, #0]
 8007450:	1c95      	addeq	r5, r2, #2
 8007452:	e7ce      	b.n	80073f2 <_strtol_l.constprop.0+0x3a>
 8007454:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007458:	2f19      	cmp	r7, #25
 800745a:	d801      	bhi.n	8007460 <_strtol_l.constprop.0+0xa8>
 800745c:	3c37      	subs	r4, #55	; 0x37
 800745e:	e7e5      	b.n	800742c <_strtol_l.constprop.0+0x74>
 8007460:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007464:	2f19      	cmp	r7, #25
 8007466:	d804      	bhi.n	8007472 <_strtol_l.constprop.0+0xba>
 8007468:	3c57      	subs	r4, #87	; 0x57
 800746a:	e7df      	b.n	800742c <_strtol_l.constprop.0+0x74>
 800746c:	f04f 32ff 	mov.w	r2, #4294967295
 8007470:	e7e8      	b.n	8007444 <_strtol_l.constprop.0+0x8c>
 8007472:	1c53      	adds	r3, r2, #1
 8007474:	d108      	bne.n	8007488 <_strtol_l.constprop.0+0xd0>
 8007476:	2322      	movs	r3, #34	; 0x22
 8007478:	4660      	mov	r0, ip
 800747a:	f8ce 3000 	str.w	r3, [lr]
 800747e:	f1b8 0f00 	cmp.w	r8, #0
 8007482:	d0a6      	beq.n	80073d2 <_strtol_l.constprop.0+0x1a>
 8007484:	1e69      	subs	r1, r5, #1
 8007486:	e006      	b.n	8007496 <_strtol_l.constprop.0+0xde>
 8007488:	b106      	cbz	r6, 800748c <_strtol_l.constprop.0+0xd4>
 800748a:	4240      	negs	r0, r0
 800748c:	f1b8 0f00 	cmp.w	r8, #0
 8007490:	d09f      	beq.n	80073d2 <_strtol_l.constprop.0+0x1a>
 8007492:	2a00      	cmp	r2, #0
 8007494:	d1f6      	bne.n	8007484 <_strtol_l.constprop.0+0xcc>
 8007496:	f8c8 1000 	str.w	r1, [r8]
 800749a:	e79a      	b.n	80073d2 <_strtol_l.constprop.0+0x1a>
 800749c:	2430      	movs	r4, #48	; 0x30
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1b5      	bne.n	800740e <_strtol_l.constprop.0+0x56>
 80074a2:	2308      	movs	r3, #8
 80074a4:	e7b3      	b.n	800740e <_strtol_l.constprop.0+0x56>
 80074a6:	2c30      	cmp	r4, #48	; 0x30
 80074a8:	d0a9      	beq.n	80073fe <_strtol_l.constprop.0+0x46>
 80074aa:	230a      	movs	r3, #10
 80074ac:	e7af      	b.n	800740e <_strtol_l.constprop.0+0x56>
 80074ae:	bf00      	nop
 80074b0:	0800bddc 	.word	0x0800bddc

080074b4 <_strtol_r>:
 80074b4:	f7ff bf80 	b.w	80073b8 <_strtol_l.constprop.0>

080074b8 <strtol>:
 80074b8:	4613      	mov	r3, r2
 80074ba:	460a      	mov	r2, r1
 80074bc:	4601      	mov	r1, r0
 80074be:	4802      	ldr	r0, [pc, #8]	; (80074c8 <strtol+0x10>)
 80074c0:	6800      	ldr	r0, [r0, #0]
 80074c2:	f7ff bf79 	b.w	80073b8 <_strtol_l.constprop.0>
 80074c6:	bf00      	nop
 80074c8:	20000074 	.word	0x20000074

080074cc <__utoa>:
 80074cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ce:	b08b      	sub	sp, #44	; 0x2c
 80074d0:	4605      	mov	r5, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	466e      	mov	r6, sp
 80074d6:	4c1d      	ldr	r4, [pc, #116]	; (800754c <__utoa+0x80>)
 80074d8:	f104 0c20 	add.w	ip, r4, #32
 80074dc:	4637      	mov	r7, r6
 80074de:	6820      	ldr	r0, [r4, #0]
 80074e0:	6861      	ldr	r1, [r4, #4]
 80074e2:	3408      	adds	r4, #8
 80074e4:	c703      	stmia	r7!, {r0, r1}
 80074e6:	4564      	cmp	r4, ip
 80074e8:	463e      	mov	r6, r7
 80074ea:	d1f7      	bne.n	80074dc <__utoa+0x10>
 80074ec:	7921      	ldrb	r1, [r4, #4]
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	7139      	strb	r1, [r7, #4]
 80074f2:	1e91      	subs	r1, r2, #2
 80074f4:	2922      	cmp	r1, #34	; 0x22
 80074f6:	6038      	str	r0, [r7, #0]
 80074f8:	f04f 0100 	mov.w	r1, #0
 80074fc:	d904      	bls.n	8007508 <__utoa+0x3c>
 80074fe:	7019      	strb	r1, [r3, #0]
 8007500:	460b      	mov	r3, r1
 8007502:	4618      	mov	r0, r3
 8007504:	b00b      	add	sp, #44	; 0x2c
 8007506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007508:	1e58      	subs	r0, r3, #1
 800750a:	4684      	mov	ip, r0
 800750c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007510:	fb02 5617 	mls	r6, r2, r7, r5
 8007514:	3628      	adds	r6, #40	; 0x28
 8007516:	446e      	add	r6, sp
 8007518:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800751c:	460c      	mov	r4, r1
 800751e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007522:	462e      	mov	r6, r5
 8007524:	42b2      	cmp	r2, r6
 8007526:	463d      	mov	r5, r7
 8007528:	f101 0101 	add.w	r1, r1, #1
 800752c:	d9ee      	bls.n	800750c <__utoa+0x40>
 800752e:	2200      	movs	r2, #0
 8007530:	545a      	strb	r2, [r3, r1]
 8007532:	1919      	adds	r1, r3, r4
 8007534:	1aa5      	subs	r5, r4, r2
 8007536:	42aa      	cmp	r2, r5
 8007538:	dae3      	bge.n	8007502 <__utoa+0x36>
 800753a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800753e:	780e      	ldrb	r6, [r1, #0]
 8007540:	3201      	adds	r2, #1
 8007542:	7006      	strb	r6, [r0, #0]
 8007544:	f801 5901 	strb.w	r5, [r1], #-1
 8007548:	e7f4      	b.n	8007534 <__utoa+0x68>
 800754a:	bf00      	nop
 800754c:	0800bdb6 	.word	0x0800bdb6

08007550 <__cvt>:
 8007550:	2b00      	cmp	r3, #0
 8007552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007556:	461f      	mov	r7, r3
 8007558:	bfbb      	ittet	lt
 800755a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800755e:	461f      	movlt	r7, r3
 8007560:	2300      	movge	r3, #0
 8007562:	232d      	movlt	r3, #45	; 0x2d
 8007564:	b088      	sub	sp, #32
 8007566:	4614      	mov	r4, r2
 8007568:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800756a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800756c:	7013      	strb	r3, [r2, #0]
 800756e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007570:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007574:	f023 0820 	bic.w	r8, r3, #32
 8007578:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800757c:	d005      	beq.n	800758a <__cvt+0x3a>
 800757e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007582:	d100      	bne.n	8007586 <__cvt+0x36>
 8007584:	3501      	adds	r5, #1
 8007586:	2302      	movs	r3, #2
 8007588:	e000      	b.n	800758c <__cvt+0x3c>
 800758a:	2303      	movs	r3, #3
 800758c:	aa07      	add	r2, sp, #28
 800758e:	9204      	str	r2, [sp, #16]
 8007590:	aa06      	add	r2, sp, #24
 8007592:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007596:	e9cd 3500 	strd	r3, r5, [sp]
 800759a:	4622      	mov	r2, r4
 800759c:	463b      	mov	r3, r7
 800759e:	f001 f8eb 	bl	8008778 <_dtoa_r>
 80075a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075a6:	4606      	mov	r6, r0
 80075a8:	d102      	bne.n	80075b0 <__cvt+0x60>
 80075aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075ac:	07db      	lsls	r3, r3, #31
 80075ae:	d522      	bpl.n	80075f6 <__cvt+0xa6>
 80075b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075b4:	eb06 0905 	add.w	r9, r6, r5
 80075b8:	d110      	bne.n	80075dc <__cvt+0x8c>
 80075ba:	7833      	ldrb	r3, [r6, #0]
 80075bc:	2b30      	cmp	r3, #48	; 0x30
 80075be:	d10a      	bne.n	80075d6 <__cvt+0x86>
 80075c0:	2200      	movs	r2, #0
 80075c2:	2300      	movs	r3, #0
 80075c4:	4620      	mov	r0, r4
 80075c6:	4639      	mov	r1, r7
 80075c8:	f7f9 f9ee 	bl	80009a8 <__aeabi_dcmpeq>
 80075cc:	b918      	cbnz	r0, 80075d6 <__cvt+0x86>
 80075ce:	f1c5 0501 	rsb	r5, r5, #1
 80075d2:	f8ca 5000 	str.w	r5, [sl]
 80075d6:	f8da 3000 	ldr.w	r3, [sl]
 80075da:	4499      	add	r9, r3
 80075dc:	2200      	movs	r2, #0
 80075de:	2300      	movs	r3, #0
 80075e0:	4620      	mov	r0, r4
 80075e2:	4639      	mov	r1, r7
 80075e4:	f7f9 f9e0 	bl	80009a8 <__aeabi_dcmpeq>
 80075e8:	b108      	cbz	r0, 80075ee <__cvt+0x9e>
 80075ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80075ee:	2230      	movs	r2, #48	; 0x30
 80075f0:	9b07      	ldr	r3, [sp, #28]
 80075f2:	454b      	cmp	r3, r9
 80075f4:	d307      	bcc.n	8007606 <__cvt+0xb6>
 80075f6:	4630      	mov	r0, r6
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075fc:	1b9b      	subs	r3, r3, r6
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	b008      	add	sp, #32
 8007602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007606:	1c59      	adds	r1, r3, #1
 8007608:	9107      	str	r1, [sp, #28]
 800760a:	701a      	strb	r2, [r3, #0]
 800760c:	e7f0      	b.n	80075f0 <__cvt+0xa0>

0800760e <__exponent>:
 800760e:	4603      	mov	r3, r0
 8007610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007612:	2900      	cmp	r1, #0
 8007614:	f803 2b02 	strb.w	r2, [r3], #2
 8007618:	bfb6      	itet	lt
 800761a:	222d      	movlt	r2, #45	; 0x2d
 800761c:	222b      	movge	r2, #43	; 0x2b
 800761e:	4249      	neglt	r1, r1
 8007620:	2909      	cmp	r1, #9
 8007622:	7042      	strb	r2, [r0, #1]
 8007624:	dd2a      	ble.n	800767c <__exponent+0x6e>
 8007626:	f10d 0207 	add.w	r2, sp, #7
 800762a:	4617      	mov	r7, r2
 800762c:	260a      	movs	r6, #10
 800762e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007632:	4694      	mov	ip, r2
 8007634:	fb06 1415 	mls	r4, r6, r5, r1
 8007638:	3430      	adds	r4, #48	; 0x30
 800763a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800763e:	460c      	mov	r4, r1
 8007640:	2c63      	cmp	r4, #99	; 0x63
 8007642:	4629      	mov	r1, r5
 8007644:	f102 32ff 	add.w	r2, r2, #4294967295
 8007648:	dcf1      	bgt.n	800762e <__exponent+0x20>
 800764a:	3130      	adds	r1, #48	; 0x30
 800764c:	f1ac 0402 	sub.w	r4, ip, #2
 8007650:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007654:	4622      	mov	r2, r4
 8007656:	1c41      	adds	r1, r0, #1
 8007658:	42ba      	cmp	r2, r7
 800765a:	d30a      	bcc.n	8007672 <__exponent+0x64>
 800765c:	f10d 0209 	add.w	r2, sp, #9
 8007660:	eba2 020c 	sub.w	r2, r2, ip
 8007664:	42bc      	cmp	r4, r7
 8007666:	bf88      	it	hi
 8007668:	2200      	movhi	r2, #0
 800766a:	4413      	add	r3, r2
 800766c:	1a18      	subs	r0, r3, r0
 800766e:	b003      	add	sp, #12
 8007670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007672:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007676:	f801 5f01 	strb.w	r5, [r1, #1]!
 800767a:	e7ed      	b.n	8007658 <__exponent+0x4a>
 800767c:	2330      	movs	r3, #48	; 0x30
 800767e:	3130      	adds	r1, #48	; 0x30
 8007680:	7083      	strb	r3, [r0, #2]
 8007682:	70c1      	strb	r1, [r0, #3]
 8007684:	1d03      	adds	r3, r0, #4
 8007686:	e7f1      	b.n	800766c <__exponent+0x5e>

08007688 <_printf_float>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	b091      	sub	sp, #68	; 0x44
 800768e:	460c      	mov	r4, r1
 8007690:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007694:	4616      	mov	r6, r2
 8007696:	461f      	mov	r7, r3
 8007698:	4605      	mov	r5, r0
 800769a:	f000 fef3 	bl	8008484 <_localeconv_r>
 800769e:	6803      	ldr	r3, [r0, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	9309      	str	r3, [sp, #36]	; 0x24
 80076a4:	f7f8 fd54 	bl	8000150 <strlen>
 80076a8:	2300      	movs	r3, #0
 80076aa:	930e      	str	r3, [sp, #56]	; 0x38
 80076ac:	f8d8 3000 	ldr.w	r3, [r8]
 80076b0:	900a      	str	r0, [sp, #40]	; 0x28
 80076b2:	3307      	adds	r3, #7
 80076b4:	f023 0307 	bic.w	r3, r3, #7
 80076b8:	f103 0208 	add.w	r2, r3, #8
 80076bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80076c0:	f8d4 b000 	ldr.w	fp, [r4]
 80076c4:	f8c8 2000 	str.w	r2, [r8]
 80076c8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80076cc:	4652      	mov	r2, sl
 80076ce:	4643      	mov	r3, r8
 80076d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076d4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80076d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80076da:	f04f 32ff 	mov.w	r2, #4294967295
 80076de:	4650      	mov	r0, sl
 80076e0:	4b9c      	ldr	r3, [pc, #624]	; (8007954 <_printf_float+0x2cc>)
 80076e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076e4:	f7f9 f992 	bl	8000a0c <__aeabi_dcmpun>
 80076e8:	bb70      	cbnz	r0, 8007748 <_printf_float+0xc0>
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295
 80076ee:	4650      	mov	r0, sl
 80076f0:	4b98      	ldr	r3, [pc, #608]	; (8007954 <_printf_float+0x2cc>)
 80076f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076f4:	f7f9 f96c 	bl	80009d0 <__aeabi_dcmple>
 80076f8:	bb30      	cbnz	r0, 8007748 <_printf_float+0xc0>
 80076fa:	2200      	movs	r2, #0
 80076fc:	2300      	movs	r3, #0
 80076fe:	4650      	mov	r0, sl
 8007700:	4641      	mov	r1, r8
 8007702:	f7f9 f95b 	bl	80009bc <__aeabi_dcmplt>
 8007706:	b110      	cbz	r0, 800770e <_printf_float+0x86>
 8007708:	232d      	movs	r3, #45	; 0x2d
 800770a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800770e:	4a92      	ldr	r2, [pc, #584]	; (8007958 <_printf_float+0x2d0>)
 8007710:	4b92      	ldr	r3, [pc, #584]	; (800795c <_printf_float+0x2d4>)
 8007712:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007716:	bf94      	ite	ls
 8007718:	4690      	movls	r8, r2
 800771a:	4698      	movhi	r8, r3
 800771c:	2303      	movs	r3, #3
 800771e:	f04f 0a00 	mov.w	sl, #0
 8007722:	6123      	str	r3, [r4, #16]
 8007724:	f02b 0304 	bic.w	r3, fp, #4
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	4633      	mov	r3, r6
 800772c:	4621      	mov	r1, r4
 800772e:	4628      	mov	r0, r5
 8007730:	9700      	str	r7, [sp, #0]
 8007732:	aa0f      	add	r2, sp, #60	; 0x3c
 8007734:	f000 f9d6 	bl	8007ae4 <_printf_common>
 8007738:	3001      	adds	r0, #1
 800773a:	f040 8090 	bne.w	800785e <_printf_float+0x1d6>
 800773e:	f04f 30ff 	mov.w	r0, #4294967295
 8007742:	b011      	add	sp, #68	; 0x44
 8007744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007748:	4652      	mov	r2, sl
 800774a:	4643      	mov	r3, r8
 800774c:	4650      	mov	r0, sl
 800774e:	4641      	mov	r1, r8
 8007750:	f7f9 f95c 	bl	8000a0c <__aeabi_dcmpun>
 8007754:	b148      	cbz	r0, 800776a <_printf_float+0xe2>
 8007756:	f1b8 0f00 	cmp.w	r8, #0
 800775a:	bfb8      	it	lt
 800775c:	232d      	movlt	r3, #45	; 0x2d
 800775e:	4a80      	ldr	r2, [pc, #512]	; (8007960 <_printf_float+0x2d8>)
 8007760:	bfb8      	it	lt
 8007762:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007766:	4b7f      	ldr	r3, [pc, #508]	; (8007964 <_printf_float+0x2dc>)
 8007768:	e7d3      	b.n	8007712 <_printf_float+0x8a>
 800776a:	6863      	ldr	r3, [r4, #4]
 800776c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	d142      	bne.n	80077fa <_printf_float+0x172>
 8007774:	2306      	movs	r3, #6
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	9206      	str	r2, [sp, #24]
 800777c:	aa0e      	add	r2, sp, #56	; 0x38
 800777e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007782:	aa0d      	add	r2, sp, #52	; 0x34
 8007784:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007788:	9203      	str	r2, [sp, #12]
 800778a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800778e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007792:	6023      	str	r3, [r4, #0]
 8007794:	6863      	ldr	r3, [r4, #4]
 8007796:	4652      	mov	r2, sl
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	4628      	mov	r0, r5
 800779c:	4643      	mov	r3, r8
 800779e:	910b      	str	r1, [sp, #44]	; 0x2c
 80077a0:	f7ff fed6 	bl	8007550 <__cvt>
 80077a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077a6:	4680      	mov	r8, r0
 80077a8:	2947      	cmp	r1, #71	; 0x47
 80077aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077ac:	d108      	bne.n	80077c0 <_printf_float+0x138>
 80077ae:	1cc8      	adds	r0, r1, #3
 80077b0:	db02      	blt.n	80077b8 <_printf_float+0x130>
 80077b2:	6863      	ldr	r3, [r4, #4]
 80077b4:	4299      	cmp	r1, r3
 80077b6:	dd40      	ble.n	800783a <_printf_float+0x1b2>
 80077b8:	f1a9 0902 	sub.w	r9, r9, #2
 80077bc:	fa5f f989 	uxtb.w	r9, r9
 80077c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80077c4:	d81f      	bhi.n	8007806 <_printf_float+0x17e>
 80077c6:	464a      	mov	r2, r9
 80077c8:	3901      	subs	r1, #1
 80077ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077ce:	910d      	str	r1, [sp, #52]	; 0x34
 80077d0:	f7ff ff1d 	bl	800760e <__exponent>
 80077d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077d6:	4682      	mov	sl, r0
 80077d8:	1813      	adds	r3, r2, r0
 80077da:	2a01      	cmp	r2, #1
 80077dc:	6123      	str	r3, [r4, #16]
 80077de:	dc02      	bgt.n	80077e6 <_printf_float+0x15e>
 80077e0:	6822      	ldr	r2, [r4, #0]
 80077e2:	07d2      	lsls	r2, r2, #31
 80077e4:	d501      	bpl.n	80077ea <_printf_float+0x162>
 80077e6:	3301      	adds	r3, #1
 80077e8:	6123      	str	r3, [r4, #16]
 80077ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d09b      	beq.n	800772a <_printf_float+0xa2>
 80077f2:	232d      	movs	r3, #45	; 0x2d
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	e797      	b.n	800772a <_printf_float+0xa2>
 80077fa:	2947      	cmp	r1, #71	; 0x47
 80077fc:	d1bc      	bne.n	8007778 <_printf_float+0xf0>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1ba      	bne.n	8007778 <_printf_float+0xf0>
 8007802:	2301      	movs	r3, #1
 8007804:	e7b7      	b.n	8007776 <_printf_float+0xee>
 8007806:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800780a:	d118      	bne.n	800783e <_printf_float+0x1b6>
 800780c:	2900      	cmp	r1, #0
 800780e:	6863      	ldr	r3, [r4, #4]
 8007810:	dd0b      	ble.n	800782a <_printf_float+0x1a2>
 8007812:	6121      	str	r1, [r4, #16]
 8007814:	b913      	cbnz	r3, 800781c <_printf_float+0x194>
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	07d0      	lsls	r0, r2, #31
 800781a:	d502      	bpl.n	8007822 <_printf_float+0x19a>
 800781c:	3301      	adds	r3, #1
 800781e:	440b      	add	r3, r1
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	f04f 0a00 	mov.w	sl, #0
 8007826:	65a1      	str	r1, [r4, #88]	; 0x58
 8007828:	e7df      	b.n	80077ea <_printf_float+0x162>
 800782a:	b913      	cbnz	r3, 8007832 <_printf_float+0x1aa>
 800782c:	6822      	ldr	r2, [r4, #0]
 800782e:	07d2      	lsls	r2, r2, #31
 8007830:	d501      	bpl.n	8007836 <_printf_float+0x1ae>
 8007832:	3302      	adds	r3, #2
 8007834:	e7f4      	b.n	8007820 <_printf_float+0x198>
 8007836:	2301      	movs	r3, #1
 8007838:	e7f2      	b.n	8007820 <_printf_float+0x198>
 800783a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800783e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007840:	4299      	cmp	r1, r3
 8007842:	db05      	blt.n	8007850 <_printf_float+0x1c8>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	6121      	str	r1, [r4, #16]
 8007848:	07d8      	lsls	r0, r3, #31
 800784a:	d5ea      	bpl.n	8007822 <_printf_float+0x19a>
 800784c:	1c4b      	adds	r3, r1, #1
 800784e:	e7e7      	b.n	8007820 <_printf_float+0x198>
 8007850:	2900      	cmp	r1, #0
 8007852:	bfcc      	ite	gt
 8007854:	2201      	movgt	r2, #1
 8007856:	f1c1 0202 	rsble	r2, r1, #2
 800785a:	4413      	add	r3, r2
 800785c:	e7e0      	b.n	8007820 <_printf_float+0x198>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	055a      	lsls	r2, r3, #21
 8007862:	d407      	bmi.n	8007874 <_printf_float+0x1ec>
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	4642      	mov	r2, r8
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	d12b      	bne.n	80078ca <_printf_float+0x242>
 8007872:	e764      	b.n	800773e <_printf_float+0xb6>
 8007874:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007878:	f240 80dd 	bls.w	8007a36 <_printf_float+0x3ae>
 800787c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007880:	2200      	movs	r2, #0
 8007882:	2300      	movs	r3, #0
 8007884:	f7f9 f890 	bl	80009a8 <__aeabi_dcmpeq>
 8007888:	2800      	cmp	r0, #0
 800788a:	d033      	beq.n	80078f4 <_printf_float+0x26c>
 800788c:	2301      	movs	r3, #1
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	4a35      	ldr	r2, [pc, #212]	; (8007968 <_printf_float+0x2e0>)
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f af51 	beq.w	800773e <_printf_float+0xb6>
 800789c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80078a0:	429a      	cmp	r2, r3
 80078a2:	db02      	blt.n	80078aa <_printf_float+0x222>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	07d8      	lsls	r0, r3, #31
 80078a8:	d50f      	bpl.n	80078ca <_printf_float+0x242>
 80078aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	f43f af42 	beq.w	800773e <_printf_float+0xb6>
 80078ba:	f04f 0800 	mov.w	r8, #0
 80078be:	f104 091a 	add.w	r9, r4, #26
 80078c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078c4:	3b01      	subs	r3, #1
 80078c6:	4543      	cmp	r3, r8
 80078c8:	dc09      	bgt.n	80078de <_printf_float+0x256>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	079b      	lsls	r3, r3, #30
 80078ce:	f100 8104 	bmi.w	8007ada <_printf_float+0x452>
 80078d2:	68e0      	ldr	r0, [r4, #12]
 80078d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078d6:	4298      	cmp	r0, r3
 80078d8:	bfb8      	it	lt
 80078da:	4618      	movlt	r0, r3
 80078dc:	e731      	b.n	8007742 <_printf_float+0xba>
 80078de:	2301      	movs	r3, #1
 80078e0:	464a      	mov	r2, r9
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	f43f af28 	beq.w	800773e <_printf_float+0xb6>
 80078ee:	f108 0801 	add.w	r8, r8, #1
 80078f2:	e7e6      	b.n	80078c2 <_printf_float+0x23a>
 80078f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	dc38      	bgt.n	800796c <_printf_float+0x2e4>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4631      	mov	r1, r6
 80078fe:	4628      	mov	r0, r5
 8007900:	4a19      	ldr	r2, [pc, #100]	; (8007968 <_printf_float+0x2e0>)
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	f43f af1a 	beq.w	800773e <_printf_float+0xb6>
 800790a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800790e:	4313      	orrs	r3, r2
 8007910:	d102      	bne.n	8007918 <_printf_float+0x290>
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	07d9      	lsls	r1, r3, #31
 8007916:	d5d8      	bpl.n	80078ca <_printf_float+0x242>
 8007918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800791c:	4631      	mov	r1, r6
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	f43f af0b 	beq.w	800773e <_printf_float+0xb6>
 8007928:	f04f 0900 	mov.w	r9, #0
 800792c:	f104 0a1a 	add.w	sl, r4, #26
 8007930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007932:	425b      	negs	r3, r3
 8007934:	454b      	cmp	r3, r9
 8007936:	dc01      	bgt.n	800793c <_printf_float+0x2b4>
 8007938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800793a:	e794      	b.n	8007866 <_printf_float+0x1de>
 800793c:	2301      	movs	r3, #1
 800793e:	4652      	mov	r2, sl
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	f43f aef9 	beq.w	800773e <_printf_float+0xb6>
 800794c:	f109 0901 	add.w	r9, r9, #1
 8007950:	e7ee      	b.n	8007930 <_printf_float+0x2a8>
 8007952:	bf00      	nop
 8007954:	7fefffff 	.word	0x7fefffff
 8007958:	0800bedc 	.word	0x0800bedc
 800795c:	0800bee0 	.word	0x0800bee0
 8007960:	0800bee4 	.word	0x0800bee4
 8007964:	0800bee8 	.word	0x0800bee8
 8007968:	0800beec 	.word	0x0800beec
 800796c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800796e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007970:	429a      	cmp	r2, r3
 8007972:	bfa8      	it	ge
 8007974:	461a      	movge	r2, r3
 8007976:	2a00      	cmp	r2, #0
 8007978:	4691      	mov	r9, r2
 800797a:	dc37      	bgt.n	80079ec <_printf_float+0x364>
 800797c:	f04f 0b00 	mov.w	fp, #0
 8007980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007984:	f104 021a 	add.w	r2, r4, #26
 8007988:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800798c:	ebaa 0309 	sub.w	r3, sl, r9
 8007990:	455b      	cmp	r3, fp
 8007992:	dc33      	bgt.n	80079fc <_printf_float+0x374>
 8007994:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007998:	429a      	cmp	r2, r3
 800799a:	db3b      	blt.n	8007a14 <_printf_float+0x38c>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	07da      	lsls	r2, r3, #31
 80079a0:	d438      	bmi.n	8007a14 <_printf_float+0x38c>
 80079a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80079a6:	eba2 0903 	sub.w	r9, r2, r3
 80079aa:	eba2 020a 	sub.w	r2, r2, sl
 80079ae:	4591      	cmp	r9, r2
 80079b0:	bfa8      	it	ge
 80079b2:	4691      	movge	r9, r2
 80079b4:	f1b9 0f00 	cmp.w	r9, #0
 80079b8:	dc34      	bgt.n	8007a24 <_printf_float+0x39c>
 80079ba:	f04f 0800 	mov.w	r8, #0
 80079be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079c2:	f104 0a1a 	add.w	sl, r4, #26
 80079c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	eba3 0309 	sub.w	r3, r3, r9
 80079d0:	4543      	cmp	r3, r8
 80079d2:	f77f af7a 	ble.w	80078ca <_printf_float+0x242>
 80079d6:	2301      	movs	r3, #1
 80079d8:	4652      	mov	r2, sl
 80079da:	4631      	mov	r1, r6
 80079dc:	4628      	mov	r0, r5
 80079de:	47b8      	blx	r7
 80079e0:	3001      	adds	r0, #1
 80079e2:	f43f aeac 	beq.w	800773e <_printf_float+0xb6>
 80079e6:	f108 0801 	add.w	r8, r8, #1
 80079ea:	e7ec      	b.n	80079c6 <_printf_float+0x33e>
 80079ec:	4613      	mov	r3, r2
 80079ee:	4631      	mov	r1, r6
 80079f0:	4642      	mov	r2, r8
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d1c0      	bne.n	800797c <_printf_float+0x2f4>
 80079fa:	e6a0      	b.n	800773e <_printf_float+0xb6>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f ae99 	beq.w	800773e <_printf_float+0xb6>
 8007a0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a0e:	f10b 0b01 	add.w	fp, fp, #1
 8007a12:	e7b9      	b.n	8007988 <_printf_float+0x300>
 8007a14:	4631      	mov	r1, r6
 8007a16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d1bf      	bne.n	80079a2 <_printf_float+0x31a>
 8007a22:	e68c      	b.n	800773e <_printf_float+0xb6>
 8007a24:	464b      	mov	r3, r9
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	eb08 020a 	add.w	r2, r8, sl
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	d1c2      	bne.n	80079ba <_printf_float+0x332>
 8007a34:	e683      	b.n	800773e <_printf_float+0xb6>
 8007a36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a38:	2a01      	cmp	r2, #1
 8007a3a:	dc01      	bgt.n	8007a40 <_printf_float+0x3b8>
 8007a3c:	07db      	lsls	r3, r3, #31
 8007a3e:	d539      	bpl.n	8007ab4 <_printf_float+0x42c>
 8007a40:	2301      	movs	r3, #1
 8007a42:	4642      	mov	r2, r8
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f43f ae77 	beq.w	800773e <_printf_float+0xb6>
 8007a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f ae6f 	beq.w	800773e <_printf_float+0xb6>
 8007a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a64:	2200      	movs	r2, #0
 8007a66:	2300      	movs	r3, #0
 8007a68:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007a6c:	f7f8 ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8007a70:	b9d8      	cbnz	r0, 8007aaa <_printf_float+0x422>
 8007a72:	f109 33ff 	add.w	r3, r9, #4294967295
 8007a76:	f108 0201 	add.w	r2, r8, #1
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b8      	blx	r7
 8007a80:	3001      	adds	r0, #1
 8007a82:	d10e      	bne.n	8007aa2 <_printf_float+0x41a>
 8007a84:	e65b      	b.n	800773e <_printf_float+0xb6>
 8007a86:	2301      	movs	r3, #1
 8007a88:	464a      	mov	r2, r9
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b8      	blx	r7
 8007a90:	3001      	adds	r0, #1
 8007a92:	f43f ae54 	beq.w	800773e <_printf_float+0xb6>
 8007a96:	f108 0801 	add.w	r8, r8, #1
 8007a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	4543      	cmp	r3, r8
 8007aa0:	dcf1      	bgt.n	8007a86 <_printf_float+0x3fe>
 8007aa2:	4653      	mov	r3, sl
 8007aa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007aa8:	e6de      	b.n	8007868 <_printf_float+0x1e0>
 8007aaa:	f04f 0800 	mov.w	r8, #0
 8007aae:	f104 091a 	add.w	r9, r4, #26
 8007ab2:	e7f2      	b.n	8007a9a <_printf_float+0x412>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	e7df      	b.n	8007a7a <_printf_float+0x3f2>
 8007aba:	2301      	movs	r3, #1
 8007abc:	464a      	mov	r2, r9
 8007abe:	4631      	mov	r1, r6
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b8      	blx	r7
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	f43f ae3a 	beq.w	800773e <_printf_float+0xb6>
 8007aca:	f108 0801 	add.w	r8, r8, #1
 8007ace:	68e3      	ldr	r3, [r4, #12]
 8007ad0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ad2:	1a5b      	subs	r3, r3, r1
 8007ad4:	4543      	cmp	r3, r8
 8007ad6:	dcf0      	bgt.n	8007aba <_printf_float+0x432>
 8007ad8:	e6fb      	b.n	80078d2 <_printf_float+0x24a>
 8007ada:	f04f 0800 	mov.w	r8, #0
 8007ade:	f104 0919 	add.w	r9, r4, #25
 8007ae2:	e7f4      	b.n	8007ace <_printf_float+0x446>

08007ae4 <_printf_common>:
 8007ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	4616      	mov	r6, r2
 8007aea:	4699      	mov	r9, r3
 8007aec:	688a      	ldr	r2, [r1, #8]
 8007aee:	690b      	ldr	r3, [r1, #16]
 8007af0:	4607      	mov	r7, r0
 8007af2:	4293      	cmp	r3, r2
 8007af4:	bfb8      	it	lt
 8007af6:	4613      	movlt	r3, r2
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007afe:	460c      	mov	r4, r1
 8007b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b04:	b10a      	cbz	r2, 8007b0a <_printf_common+0x26>
 8007b06:	3301      	adds	r3, #1
 8007b08:	6033      	str	r3, [r6, #0]
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	0699      	lsls	r1, r3, #26
 8007b0e:	bf42      	ittt	mi
 8007b10:	6833      	ldrmi	r3, [r6, #0]
 8007b12:	3302      	addmi	r3, #2
 8007b14:	6033      	strmi	r3, [r6, #0]
 8007b16:	6825      	ldr	r5, [r4, #0]
 8007b18:	f015 0506 	ands.w	r5, r5, #6
 8007b1c:	d106      	bne.n	8007b2c <_printf_common+0x48>
 8007b1e:	f104 0a19 	add.w	sl, r4, #25
 8007b22:	68e3      	ldr	r3, [r4, #12]
 8007b24:	6832      	ldr	r2, [r6, #0]
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	42ab      	cmp	r3, r5
 8007b2a:	dc2b      	bgt.n	8007b84 <_printf_common+0xa0>
 8007b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b30:	1e13      	subs	r3, r2, #0
 8007b32:	6822      	ldr	r2, [r4, #0]
 8007b34:	bf18      	it	ne
 8007b36:	2301      	movne	r3, #1
 8007b38:	0692      	lsls	r2, r2, #26
 8007b3a:	d430      	bmi.n	8007b9e <_printf_common+0xba>
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b44:	47c0      	blx	r8
 8007b46:	3001      	adds	r0, #1
 8007b48:	d023      	beq.n	8007b92 <_printf_common+0xae>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	6922      	ldr	r2, [r4, #16]
 8007b4e:	f003 0306 	and.w	r3, r3, #6
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	bf14      	ite	ne
 8007b56:	2500      	movne	r5, #0
 8007b58:	6833      	ldreq	r3, [r6, #0]
 8007b5a:	f04f 0600 	mov.w	r6, #0
 8007b5e:	bf08      	it	eq
 8007b60:	68e5      	ldreq	r5, [r4, #12]
 8007b62:	f104 041a 	add.w	r4, r4, #26
 8007b66:	bf08      	it	eq
 8007b68:	1aed      	subeq	r5, r5, r3
 8007b6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b6e:	bf08      	it	eq
 8007b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b74:	4293      	cmp	r3, r2
 8007b76:	bfc4      	itt	gt
 8007b78:	1a9b      	subgt	r3, r3, r2
 8007b7a:	18ed      	addgt	r5, r5, r3
 8007b7c:	42b5      	cmp	r5, r6
 8007b7e:	d11a      	bne.n	8007bb6 <_printf_common+0xd2>
 8007b80:	2000      	movs	r0, #0
 8007b82:	e008      	b.n	8007b96 <_printf_common+0xb2>
 8007b84:	2301      	movs	r3, #1
 8007b86:	4652      	mov	r2, sl
 8007b88:	4649      	mov	r1, r9
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	47c0      	blx	r8
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d103      	bne.n	8007b9a <_printf_common+0xb6>
 8007b92:	f04f 30ff 	mov.w	r0, #4294967295
 8007b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9a:	3501      	adds	r5, #1
 8007b9c:	e7c1      	b.n	8007b22 <_printf_common+0x3e>
 8007b9e:	2030      	movs	r0, #48	; 0x30
 8007ba0:	18e1      	adds	r1, r4, r3
 8007ba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bac:	4422      	add	r2, r4
 8007bae:	3302      	adds	r3, #2
 8007bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bb4:	e7c2      	b.n	8007b3c <_printf_common+0x58>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4622      	mov	r2, r4
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	47c0      	blx	r8
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d0e6      	beq.n	8007b92 <_printf_common+0xae>
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	e7d9      	b.n	8007b7c <_printf_common+0x98>

08007bc8 <_printf_i>:
 8007bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bcc:	7e0f      	ldrb	r7, [r1, #24]
 8007bce:	4691      	mov	r9, r2
 8007bd0:	2f78      	cmp	r7, #120	; 0x78
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	469a      	mov	sl, r3
 8007bd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bde:	d807      	bhi.n	8007bf0 <_printf_i+0x28>
 8007be0:	2f62      	cmp	r7, #98	; 0x62
 8007be2:	d80a      	bhi.n	8007bfa <_printf_i+0x32>
 8007be4:	2f00      	cmp	r7, #0
 8007be6:	f000 80d5 	beq.w	8007d94 <_printf_i+0x1cc>
 8007bea:	2f58      	cmp	r7, #88	; 0x58
 8007bec:	f000 80c1 	beq.w	8007d72 <_printf_i+0x1aa>
 8007bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bf8:	e03a      	b.n	8007c70 <_printf_i+0xa8>
 8007bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bfe:	2b15      	cmp	r3, #21
 8007c00:	d8f6      	bhi.n	8007bf0 <_printf_i+0x28>
 8007c02:	a101      	add	r1, pc, #4	; (adr r1, 8007c08 <_printf_i+0x40>)
 8007c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c08:	08007c61 	.word	0x08007c61
 8007c0c:	08007c75 	.word	0x08007c75
 8007c10:	08007bf1 	.word	0x08007bf1
 8007c14:	08007bf1 	.word	0x08007bf1
 8007c18:	08007bf1 	.word	0x08007bf1
 8007c1c:	08007bf1 	.word	0x08007bf1
 8007c20:	08007c75 	.word	0x08007c75
 8007c24:	08007bf1 	.word	0x08007bf1
 8007c28:	08007bf1 	.word	0x08007bf1
 8007c2c:	08007bf1 	.word	0x08007bf1
 8007c30:	08007bf1 	.word	0x08007bf1
 8007c34:	08007d7b 	.word	0x08007d7b
 8007c38:	08007ca1 	.word	0x08007ca1
 8007c3c:	08007d35 	.word	0x08007d35
 8007c40:	08007bf1 	.word	0x08007bf1
 8007c44:	08007bf1 	.word	0x08007bf1
 8007c48:	08007d9d 	.word	0x08007d9d
 8007c4c:	08007bf1 	.word	0x08007bf1
 8007c50:	08007ca1 	.word	0x08007ca1
 8007c54:	08007bf1 	.word	0x08007bf1
 8007c58:	08007bf1 	.word	0x08007bf1
 8007c5c:	08007d3d 	.word	0x08007d3d
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	1d1a      	adds	r2, r3, #4
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	602a      	str	r2, [r5, #0]
 8007c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c70:	2301      	movs	r3, #1
 8007c72:	e0a0      	b.n	8007db6 <_printf_i+0x1ee>
 8007c74:	6820      	ldr	r0, [r4, #0]
 8007c76:	682b      	ldr	r3, [r5, #0]
 8007c78:	0607      	lsls	r7, r0, #24
 8007c7a:	f103 0104 	add.w	r1, r3, #4
 8007c7e:	6029      	str	r1, [r5, #0]
 8007c80:	d501      	bpl.n	8007c86 <_printf_i+0xbe>
 8007c82:	681e      	ldr	r6, [r3, #0]
 8007c84:	e003      	b.n	8007c8e <_printf_i+0xc6>
 8007c86:	0646      	lsls	r6, r0, #25
 8007c88:	d5fb      	bpl.n	8007c82 <_printf_i+0xba>
 8007c8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c8e:	2e00      	cmp	r6, #0
 8007c90:	da03      	bge.n	8007c9a <_printf_i+0xd2>
 8007c92:	232d      	movs	r3, #45	; 0x2d
 8007c94:	4276      	negs	r6, r6
 8007c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c9a:	230a      	movs	r3, #10
 8007c9c:	4859      	ldr	r0, [pc, #356]	; (8007e04 <_printf_i+0x23c>)
 8007c9e:	e012      	b.n	8007cc6 <_printf_i+0xfe>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	6820      	ldr	r0, [r4, #0]
 8007ca4:	1d19      	adds	r1, r3, #4
 8007ca6:	6029      	str	r1, [r5, #0]
 8007ca8:	0605      	lsls	r5, r0, #24
 8007caa:	d501      	bpl.n	8007cb0 <_printf_i+0xe8>
 8007cac:	681e      	ldr	r6, [r3, #0]
 8007cae:	e002      	b.n	8007cb6 <_printf_i+0xee>
 8007cb0:	0641      	lsls	r1, r0, #25
 8007cb2:	d5fb      	bpl.n	8007cac <_printf_i+0xe4>
 8007cb4:	881e      	ldrh	r6, [r3, #0]
 8007cb6:	2f6f      	cmp	r7, #111	; 0x6f
 8007cb8:	bf0c      	ite	eq
 8007cba:	2308      	moveq	r3, #8
 8007cbc:	230a      	movne	r3, #10
 8007cbe:	4851      	ldr	r0, [pc, #324]	; (8007e04 <_printf_i+0x23c>)
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cc6:	6865      	ldr	r5, [r4, #4]
 8007cc8:	2d00      	cmp	r5, #0
 8007cca:	bfa8      	it	ge
 8007ccc:	6821      	ldrge	r1, [r4, #0]
 8007cce:	60a5      	str	r5, [r4, #8]
 8007cd0:	bfa4      	itt	ge
 8007cd2:	f021 0104 	bicge.w	r1, r1, #4
 8007cd6:	6021      	strge	r1, [r4, #0]
 8007cd8:	b90e      	cbnz	r6, 8007cde <_printf_i+0x116>
 8007cda:	2d00      	cmp	r5, #0
 8007cdc:	d04b      	beq.n	8007d76 <_printf_i+0x1ae>
 8007cde:	4615      	mov	r5, r2
 8007ce0:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ce4:	fb03 6711 	mls	r7, r3, r1, r6
 8007ce8:	5dc7      	ldrb	r7, [r0, r7]
 8007cea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cee:	4637      	mov	r7, r6
 8007cf0:	42bb      	cmp	r3, r7
 8007cf2:	460e      	mov	r6, r1
 8007cf4:	d9f4      	bls.n	8007ce0 <_printf_i+0x118>
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d10b      	bne.n	8007d12 <_printf_i+0x14a>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	07de      	lsls	r6, r3, #31
 8007cfe:	d508      	bpl.n	8007d12 <_printf_i+0x14a>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	6861      	ldr	r1, [r4, #4]
 8007d04:	4299      	cmp	r1, r3
 8007d06:	bfde      	ittt	le
 8007d08:	2330      	movle	r3, #48	; 0x30
 8007d0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d12:	1b52      	subs	r2, r2, r5
 8007d14:	6122      	str	r2, [r4, #16]
 8007d16:	464b      	mov	r3, r9
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	f8cd a000 	str.w	sl, [sp]
 8007d20:	aa03      	add	r2, sp, #12
 8007d22:	f7ff fedf 	bl	8007ae4 <_printf_common>
 8007d26:	3001      	adds	r0, #1
 8007d28:	d14a      	bne.n	8007dc0 <_printf_i+0x1f8>
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	b004      	add	sp, #16
 8007d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	f043 0320 	orr.w	r3, r3, #32
 8007d3a:	6023      	str	r3, [r4, #0]
 8007d3c:	2778      	movs	r7, #120	; 0x78
 8007d3e:	4832      	ldr	r0, [pc, #200]	; (8007e08 <_printf_i+0x240>)
 8007d40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	6829      	ldr	r1, [r5, #0]
 8007d48:	061f      	lsls	r7, r3, #24
 8007d4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d4e:	d402      	bmi.n	8007d56 <_printf_i+0x18e>
 8007d50:	065f      	lsls	r7, r3, #25
 8007d52:	bf48      	it	mi
 8007d54:	b2b6      	uxthmi	r6, r6
 8007d56:	07df      	lsls	r7, r3, #31
 8007d58:	bf48      	it	mi
 8007d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d5e:	6029      	str	r1, [r5, #0]
 8007d60:	bf48      	it	mi
 8007d62:	6023      	strmi	r3, [r4, #0]
 8007d64:	b91e      	cbnz	r6, 8007d6e <_printf_i+0x1a6>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	f023 0320 	bic.w	r3, r3, #32
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	2310      	movs	r3, #16
 8007d70:	e7a6      	b.n	8007cc0 <_printf_i+0xf8>
 8007d72:	4824      	ldr	r0, [pc, #144]	; (8007e04 <_printf_i+0x23c>)
 8007d74:	e7e4      	b.n	8007d40 <_printf_i+0x178>
 8007d76:	4615      	mov	r5, r2
 8007d78:	e7bd      	b.n	8007cf6 <_printf_i+0x12e>
 8007d7a:	682b      	ldr	r3, [r5, #0]
 8007d7c:	6826      	ldr	r6, [r4, #0]
 8007d7e:	1d18      	adds	r0, r3, #4
 8007d80:	6961      	ldr	r1, [r4, #20]
 8007d82:	6028      	str	r0, [r5, #0]
 8007d84:	0635      	lsls	r5, r6, #24
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	d501      	bpl.n	8007d8e <_printf_i+0x1c6>
 8007d8a:	6019      	str	r1, [r3, #0]
 8007d8c:	e002      	b.n	8007d94 <_printf_i+0x1cc>
 8007d8e:	0670      	lsls	r0, r6, #25
 8007d90:	d5fb      	bpl.n	8007d8a <_printf_i+0x1c2>
 8007d92:	8019      	strh	r1, [r3, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	4615      	mov	r5, r2
 8007d98:	6123      	str	r3, [r4, #16]
 8007d9a:	e7bc      	b.n	8007d16 <_printf_i+0x14e>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	2100      	movs	r1, #0
 8007da0:	1d1a      	adds	r2, r3, #4
 8007da2:	602a      	str	r2, [r5, #0]
 8007da4:	681d      	ldr	r5, [r3, #0]
 8007da6:	6862      	ldr	r2, [r4, #4]
 8007da8:	4628      	mov	r0, r5
 8007daa:	f000 fc38 	bl	800861e <memchr>
 8007dae:	b108      	cbz	r0, 8007db4 <_printf_i+0x1ec>
 8007db0:	1b40      	subs	r0, r0, r5
 8007db2:	6060      	str	r0, [r4, #4]
 8007db4:	6863      	ldr	r3, [r4, #4]
 8007db6:	6123      	str	r3, [r4, #16]
 8007db8:	2300      	movs	r3, #0
 8007dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dbe:	e7aa      	b.n	8007d16 <_printf_i+0x14e>
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	47d0      	blx	sl
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d0ad      	beq.n	8007d2a <_printf_i+0x162>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	079b      	lsls	r3, r3, #30
 8007dd2:	d413      	bmi.n	8007dfc <_printf_i+0x234>
 8007dd4:	68e0      	ldr	r0, [r4, #12]
 8007dd6:	9b03      	ldr	r3, [sp, #12]
 8007dd8:	4298      	cmp	r0, r3
 8007dda:	bfb8      	it	lt
 8007ddc:	4618      	movlt	r0, r3
 8007dde:	e7a6      	b.n	8007d2e <_printf_i+0x166>
 8007de0:	2301      	movs	r3, #1
 8007de2:	4632      	mov	r2, r6
 8007de4:	4649      	mov	r1, r9
 8007de6:	4640      	mov	r0, r8
 8007de8:	47d0      	blx	sl
 8007dea:	3001      	adds	r0, #1
 8007dec:	d09d      	beq.n	8007d2a <_printf_i+0x162>
 8007dee:	3501      	adds	r5, #1
 8007df0:	68e3      	ldr	r3, [r4, #12]
 8007df2:	9903      	ldr	r1, [sp, #12]
 8007df4:	1a5b      	subs	r3, r3, r1
 8007df6:	42ab      	cmp	r3, r5
 8007df8:	dcf2      	bgt.n	8007de0 <_printf_i+0x218>
 8007dfa:	e7eb      	b.n	8007dd4 <_printf_i+0x20c>
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	f104 0619 	add.w	r6, r4, #25
 8007e02:	e7f5      	b.n	8007df0 <_printf_i+0x228>
 8007e04:	0800beee 	.word	0x0800beee
 8007e08:	0800beff 	.word	0x0800beff

08007e0c <_scanf_float>:
 8007e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	b087      	sub	sp, #28
 8007e12:	9303      	str	r3, [sp, #12]
 8007e14:	688b      	ldr	r3, [r1, #8]
 8007e16:	4617      	mov	r7, r2
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007e1e:	bf85      	ittet	hi
 8007e20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e24:	195b      	addhi	r3, r3, r5
 8007e26:	2300      	movls	r3, #0
 8007e28:	9302      	strhi	r3, [sp, #8]
 8007e2a:	bf88      	it	hi
 8007e2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e30:	468b      	mov	fp, r1
 8007e32:	f04f 0500 	mov.w	r5, #0
 8007e36:	bf8c      	ite	hi
 8007e38:	608b      	strhi	r3, [r1, #8]
 8007e3a:	9302      	strls	r3, [sp, #8]
 8007e3c:	680b      	ldr	r3, [r1, #0]
 8007e3e:	4680      	mov	r8, r0
 8007e40:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007e44:	f84b 3b1c 	str.w	r3, [fp], #28
 8007e48:	460c      	mov	r4, r1
 8007e4a:	465e      	mov	r6, fp
 8007e4c:	46aa      	mov	sl, r5
 8007e4e:	46a9      	mov	r9, r5
 8007e50:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e54:	9501      	str	r5, [sp, #4]
 8007e56:	68a2      	ldr	r2, [r4, #8]
 8007e58:	b152      	cbz	r2, 8007e70 <_scanf_float+0x64>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b4e      	cmp	r3, #78	; 0x4e
 8007e60:	d864      	bhi.n	8007f2c <_scanf_float+0x120>
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d83c      	bhi.n	8007ee0 <_scanf_float+0xd4>
 8007e66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007e6a:	b2c8      	uxtb	r0, r1
 8007e6c:	280e      	cmp	r0, #14
 8007e6e:	d93a      	bls.n	8007ee6 <_scanf_float+0xda>
 8007e70:	f1b9 0f00 	cmp.w	r9, #0
 8007e74:	d003      	beq.n	8007e7e <_scanf_float+0x72>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e82:	f1ba 0f01 	cmp.w	sl, #1
 8007e86:	f200 8113 	bhi.w	80080b0 <_scanf_float+0x2a4>
 8007e8a:	455e      	cmp	r6, fp
 8007e8c:	f200 8105 	bhi.w	800809a <_scanf_float+0x28e>
 8007e90:	2501      	movs	r5, #1
 8007e92:	4628      	mov	r0, r5
 8007e94:	b007      	add	sp, #28
 8007e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e9e:	2a0d      	cmp	r2, #13
 8007ea0:	d8e6      	bhi.n	8007e70 <_scanf_float+0x64>
 8007ea2:	a101      	add	r1, pc, #4	; (adr r1, 8007ea8 <_scanf_float+0x9c>)
 8007ea4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ea8:	08007fe7 	.word	0x08007fe7
 8007eac:	08007e71 	.word	0x08007e71
 8007eb0:	08007e71 	.word	0x08007e71
 8007eb4:	08007e71 	.word	0x08007e71
 8007eb8:	08008047 	.word	0x08008047
 8007ebc:	0800801f 	.word	0x0800801f
 8007ec0:	08007e71 	.word	0x08007e71
 8007ec4:	08007e71 	.word	0x08007e71
 8007ec8:	08007ff5 	.word	0x08007ff5
 8007ecc:	08007e71 	.word	0x08007e71
 8007ed0:	08007e71 	.word	0x08007e71
 8007ed4:	08007e71 	.word	0x08007e71
 8007ed8:	08007e71 	.word	0x08007e71
 8007edc:	08007fad 	.word	0x08007fad
 8007ee0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ee4:	e7db      	b.n	8007e9e <_scanf_float+0x92>
 8007ee6:	290e      	cmp	r1, #14
 8007ee8:	d8c2      	bhi.n	8007e70 <_scanf_float+0x64>
 8007eea:	a001      	add	r0, pc, #4	; (adr r0, 8007ef0 <_scanf_float+0xe4>)
 8007eec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ef0:	08007f9f 	.word	0x08007f9f
 8007ef4:	08007e71 	.word	0x08007e71
 8007ef8:	08007f9f 	.word	0x08007f9f
 8007efc:	08008033 	.word	0x08008033
 8007f00:	08007e71 	.word	0x08007e71
 8007f04:	08007f4d 	.word	0x08007f4d
 8007f08:	08007f89 	.word	0x08007f89
 8007f0c:	08007f89 	.word	0x08007f89
 8007f10:	08007f89 	.word	0x08007f89
 8007f14:	08007f89 	.word	0x08007f89
 8007f18:	08007f89 	.word	0x08007f89
 8007f1c:	08007f89 	.word	0x08007f89
 8007f20:	08007f89 	.word	0x08007f89
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	08007f89 	.word	0x08007f89
 8007f2c:	2b6e      	cmp	r3, #110	; 0x6e
 8007f2e:	d809      	bhi.n	8007f44 <_scanf_float+0x138>
 8007f30:	2b60      	cmp	r3, #96	; 0x60
 8007f32:	d8b2      	bhi.n	8007e9a <_scanf_float+0x8e>
 8007f34:	2b54      	cmp	r3, #84	; 0x54
 8007f36:	d077      	beq.n	8008028 <_scanf_float+0x21c>
 8007f38:	2b59      	cmp	r3, #89	; 0x59
 8007f3a:	d199      	bne.n	8007e70 <_scanf_float+0x64>
 8007f3c:	2d07      	cmp	r5, #7
 8007f3e:	d197      	bne.n	8007e70 <_scanf_float+0x64>
 8007f40:	2508      	movs	r5, #8
 8007f42:	e029      	b.n	8007f98 <_scanf_float+0x18c>
 8007f44:	2b74      	cmp	r3, #116	; 0x74
 8007f46:	d06f      	beq.n	8008028 <_scanf_float+0x21c>
 8007f48:	2b79      	cmp	r3, #121	; 0x79
 8007f4a:	e7f6      	b.n	8007f3a <_scanf_float+0x12e>
 8007f4c:	6821      	ldr	r1, [r4, #0]
 8007f4e:	05c8      	lsls	r0, r1, #23
 8007f50:	d51a      	bpl.n	8007f88 <_scanf_float+0x17c>
 8007f52:	9b02      	ldr	r3, [sp, #8]
 8007f54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007f58:	6021      	str	r1, [r4, #0]
 8007f5a:	f109 0901 	add.w	r9, r9, #1
 8007f5e:	b11b      	cbz	r3, 8007f68 <_scanf_float+0x15c>
 8007f60:	3b01      	subs	r3, #1
 8007f62:	3201      	adds	r2, #1
 8007f64:	9302      	str	r3, [sp, #8]
 8007f66:	60a2      	str	r2, [r4, #8]
 8007f68:	68a3      	ldr	r3, [r4, #8]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	3301      	adds	r3, #1
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	607b      	str	r3, [r7, #4]
 8007f7c:	f340 8084 	ble.w	8008088 <_scanf_float+0x27c>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	3301      	adds	r3, #1
 8007f84:	603b      	str	r3, [r7, #0]
 8007f86:	e766      	b.n	8007e56 <_scanf_float+0x4a>
 8007f88:	eb1a 0f05 	cmn.w	sl, r5
 8007f8c:	f47f af70 	bne.w	8007e70 <_scanf_float+0x64>
 8007f90:	6822      	ldr	r2, [r4, #0]
 8007f92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f96:	6022      	str	r2, [r4, #0]
 8007f98:	f806 3b01 	strb.w	r3, [r6], #1
 8007f9c:	e7e4      	b.n	8007f68 <_scanf_float+0x15c>
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	0610      	lsls	r0, r2, #24
 8007fa2:	f57f af65 	bpl.w	8007e70 <_scanf_float+0x64>
 8007fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007faa:	e7f4      	b.n	8007f96 <_scanf_float+0x18a>
 8007fac:	f1ba 0f00 	cmp.w	sl, #0
 8007fb0:	d10e      	bne.n	8007fd0 <_scanf_float+0x1c4>
 8007fb2:	f1b9 0f00 	cmp.w	r9, #0
 8007fb6:	d10e      	bne.n	8007fd6 <_scanf_float+0x1ca>
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007fbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007fc2:	d108      	bne.n	8007fd6 <_scanf_float+0x1ca>
 8007fc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fc8:	f04f 0a01 	mov.w	sl, #1
 8007fcc:	6022      	str	r2, [r4, #0]
 8007fce:	e7e3      	b.n	8007f98 <_scanf_float+0x18c>
 8007fd0:	f1ba 0f02 	cmp.w	sl, #2
 8007fd4:	d055      	beq.n	8008082 <_scanf_float+0x276>
 8007fd6:	2d01      	cmp	r5, #1
 8007fd8:	d002      	beq.n	8007fe0 <_scanf_float+0x1d4>
 8007fda:	2d04      	cmp	r5, #4
 8007fdc:	f47f af48 	bne.w	8007e70 <_scanf_float+0x64>
 8007fe0:	3501      	adds	r5, #1
 8007fe2:	b2ed      	uxtb	r5, r5
 8007fe4:	e7d8      	b.n	8007f98 <_scanf_float+0x18c>
 8007fe6:	f1ba 0f01 	cmp.w	sl, #1
 8007fea:	f47f af41 	bne.w	8007e70 <_scanf_float+0x64>
 8007fee:	f04f 0a02 	mov.w	sl, #2
 8007ff2:	e7d1      	b.n	8007f98 <_scanf_float+0x18c>
 8007ff4:	b97d      	cbnz	r5, 8008016 <_scanf_float+0x20a>
 8007ff6:	f1b9 0f00 	cmp.w	r9, #0
 8007ffa:	f47f af3c 	bne.w	8007e76 <_scanf_float+0x6a>
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008004:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008008:	f47f af39 	bne.w	8007e7e <_scanf_float+0x72>
 800800c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008010:	2501      	movs	r5, #1
 8008012:	6022      	str	r2, [r4, #0]
 8008014:	e7c0      	b.n	8007f98 <_scanf_float+0x18c>
 8008016:	2d03      	cmp	r5, #3
 8008018:	d0e2      	beq.n	8007fe0 <_scanf_float+0x1d4>
 800801a:	2d05      	cmp	r5, #5
 800801c:	e7de      	b.n	8007fdc <_scanf_float+0x1d0>
 800801e:	2d02      	cmp	r5, #2
 8008020:	f47f af26 	bne.w	8007e70 <_scanf_float+0x64>
 8008024:	2503      	movs	r5, #3
 8008026:	e7b7      	b.n	8007f98 <_scanf_float+0x18c>
 8008028:	2d06      	cmp	r5, #6
 800802a:	f47f af21 	bne.w	8007e70 <_scanf_float+0x64>
 800802e:	2507      	movs	r5, #7
 8008030:	e7b2      	b.n	8007f98 <_scanf_float+0x18c>
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	0591      	lsls	r1, r2, #22
 8008036:	f57f af1b 	bpl.w	8007e70 <_scanf_float+0x64>
 800803a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800803e:	6022      	str	r2, [r4, #0]
 8008040:	f8cd 9004 	str.w	r9, [sp, #4]
 8008044:	e7a8      	b.n	8007f98 <_scanf_float+0x18c>
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800804c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008050:	d006      	beq.n	8008060 <_scanf_float+0x254>
 8008052:	0550      	lsls	r0, r2, #21
 8008054:	f57f af0c 	bpl.w	8007e70 <_scanf_float+0x64>
 8008058:	f1b9 0f00 	cmp.w	r9, #0
 800805c:	f43f af0f 	beq.w	8007e7e <_scanf_float+0x72>
 8008060:	0591      	lsls	r1, r2, #22
 8008062:	bf58      	it	pl
 8008064:	9901      	ldrpl	r1, [sp, #4]
 8008066:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800806a:	bf58      	it	pl
 800806c:	eba9 0101 	subpl.w	r1, r9, r1
 8008070:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008074:	f04f 0900 	mov.w	r9, #0
 8008078:	bf58      	it	pl
 800807a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800807e:	6022      	str	r2, [r4, #0]
 8008080:	e78a      	b.n	8007f98 <_scanf_float+0x18c>
 8008082:	f04f 0a03 	mov.w	sl, #3
 8008086:	e787      	b.n	8007f98 <_scanf_float+0x18c>
 8008088:	4639      	mov	r1, r7
 800808a:	4640      	mov	r0, r8
 800808c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008090:	4798      	blx	r3
 8008092:	2800      	cmp	r0, #0
 8008094:	f43f aedf 	beq.w	8007e56 <_scanf_float+0x4a>
 8008098:	e6ea      	b.n	8007e70 <_scanf_float+0x64>
 800809a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800809e:	463a      	mov	r2, r7
 80080a0:	4640      	mov	r0, r8
 80080a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080a6:	4798      	blx	r3
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	e6ec      	b.n	8007e8a <_scanf_float+0x7e>
 80080b0:	1e6b      	subs	r3, r5, #1
 80080b2:	2b06      	cmp	r3, #6
 80080b4:	d825      	bhi.n	8008102 <_scanf_float+0x2f6>
 80080b6:	2d02      	cmp	r5, #2
 80080b8:	d836      	bhi.n	8008128 <_scanf_float+0x31c>
 80080ba:	455e      	cmp	r6, fp
 80080bc:	f67f aee8 	bls.w	8007e90 <_scanf_float+0x84>
 80080c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080c4:	463a      	mov	r2, r7
 80080c6:	4640      	mov	r0, r8
 80080c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080cc:	4798      	blx	r3
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	6123      	str	r3, [r4, #16]
 80080d4:	e7f1      	b.n	80080ba <_scanf_float+0x2ae>
 80080d6:	9802      	ldr	r0, [sp, #8]
 80080d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80080e0:	463a      	mov	r2, r7
 80080e2:	9002      	str	r0, [sp, #8]
 80080e4:	4640      	mov	r0, r8
 80080e6:	4798      	blx	r3
 80080e8:	6923      	ldr	r3, [r4, #16]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	6123      	str	r3, [r4, #16]
 80080ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080f2:	fa5f fa8a 	uxtb.w	sl, sl
 80080f6:	f1ba 0f02 	cmp.w	sl, #2
 80080fa:	d1ec      	bne.n	80080d6 <_scanf_float+0x2ca>
 80080fc:	3d03      	subs	r5, #3
 80080fe:	b2ed      	uxtb	r5, r5
 8008100:	1b76      	subs	r6, r6, r5
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	05da      	lsls	r2, r3, #23
 8008106:	d52f      	bpl.n	8008168 <_scanf_float+0x35c>
 8008108:	055b      	lsls	r3, r3, #21
 800810a:	d510      	bpl.n	800812e <_scanf_float+0x322>
 800810c:	455e      	cmp	r6, fp
 800810e:	f67f aebf 	bls.w	8007e90 <_scanf_float+0x84>
 8008112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008116:	463a      	mov	r2, r7
 8008118:	4640      	mov	r0, r8
 800811a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800811e:	4798      	blx	r3
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	3b01      	subs	r3, #1
 8008124:	6123      	str	r3, [r4, #16]
 8008126:	e7f1      	b.n	800810c <_scanf_float+0x300>
 8008128:	46aa      	mov	sl, r5
 800812a:	9602      	str	r6, [sp, #8]
 800812c:	e7df      	b.n	80080ee <_scanf_float+0x2e2>
 800812e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	2965      	cmp	r1, #101	; 0x65
 8008136:	f103 33ff 	add.w	r3, r3, #4294967295
 800813a:	f106 35ff 	add.w	r5, r6, #4294967295
 800813e:	6123      	str	r3, [r4, #16]
 8008140:	d00c      	beq.n	800815c <_scanf_float+0x350>
 8008142:	2945      	cmp	r1, #69	; 0x45
 8008144:	d00a      	beq.n	800815c <_scanf_float+0x350>
 8008146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800814a:	463a      	mov	r2, r7
 800814c:	4640      	mov	r0, r8
 800814e:	4798      	blx	r3
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008156:	3b01      	subs	r3, #1
 8008158:	1eb5      	subs	r5, r6, #2
 800815a:	6123      	str	r3, [r4, #16]
 800815c:	463a      	mov	r2, r7
 800815e:	4640      	mov	r0, r8
 8008160:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008164:	4798      	blx	r3
 8008166:	462e      	mov	r6, r5
 8008168:	6825      	ldr	r5, [r4, #0]
 800816a:	f015 0510 	ands.w	r5, r5, #16
 800816e:	d155      	bne.n	800821c <_scanf_float+0x410>
 8008170:	7035      	strb	r5, [r6, #0]
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800817c:	d11d      	bne.n	80081ba <_scanf_float+0x3ae>
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	454b      	cmp	r3, r9
 8008182:	eba3 0209 	sub.w	r2, r3, r9
 8008186:	d125      	bne.n	80081d4 <_scanf_float+0x3c8>
 8008188:	2200      	movs	r2, #0
 800818a:	4659      	mov	r1, fp
 800818c:	4640      	mov	r0, r8
 800818e:	f002 fc87 	bl	800aaa0 <_strtod_r>
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	f8d4 c000 	ldr.w	ip, [r4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f01c 0f02 	tst.w	ip, #2
 800819e:	4606      	mov	r6, r0
 80081a0:	460f      	mov	r7, r1
 80081a2:	f103 0204 	add.w	r2, r3, #4
 80081a6:	d020      	beq.n	80081ea <_scanf_float+0x3de>
 80081a8:	9903      	ldr	r1, [sp, #12]
 80081aa:	600a      	str	r2, [r1, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	e9c3 6700 	strd	r6, r7, [r3]
 80081b2:	68e3      	ldr	r3, [r4, #12]
 80081b4:	3301      	adds	r3, #1
 80081b6:	60e3      	str	r3, [r4, #12]
 80081b8:	e66b      	b.n	8007e92 <_scanf_float+0x86>
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0e3      	beq.n	8008188 <_scanf_float+0x37c>
 80081c0:	9905      	ldr	r1, [sp, #20]
 80081c2:	230a      	movs	r3, #10
 80081c4:	462a      	mov	r2, r5
 80081c6:	4640      	mov	r0, r8
 80081c8:	3101      	adds	r1, #1
 80081ca:	f7ff f973 	bl	80074b4 <_strtol_r>
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	9e05      	ldr	r6, [sp, #20]
 80081d2:	1ac2      	subs	r2, r0, r3
 80081d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80081d8:	429e      	cmp	r6, r3
 80081da:	bf28      	it	cs
 80081dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80081e0:	4630      	mov	r0, r6
 80081e2:	490f      	ldr	r1, [pc, #60]	; (8008220 <_scanf_float+0x414>)
 80081e4:	f000 f8e2 	bl	80083ac <siprintf>
 80081e8:	e7ce      	b.n	8008188 <_scanf_float+0x37c>
 80081ea:	f01c 0f04 	tst.w	ip, #4
 80081ee:	d1db      	bne.n	80081a8 <_scanf_float+0x39c>
 80081f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80081f4:	f8cc 2000 	str.w	r2, [ip]
 80081f8:	f8d3 8000 	ldr.w	r8, [r3]
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	f7f8 fc04 	bl	8000a0c <__aeabi_dcmpun>
 8008204:	b128      	cbz	r0, 8008212 <_scanf_float+0x406>
 8008206:	4807      	ldr	r0, [pc, #28]	; (8008224 <_scanf_float+0x418>)
 8008208:	f000 fa26 	bl	8008658 <nanf>
 800820c:	f8c8 0000 	str.w	r0, [r8]
 8008210:	e7cf      	b.n	80081b2 <_scanf_float+0x3a6>
 8008212:	4630      	mov	r0, r6
 8008214:	4639      	mov	r1, r7
 8008216:	f7f8 fc57 	bl	8000ac8 <__aeabi_d2f>
 800821a:	e7f7      	b.n	800820c <_scanf_float+0x400>
 800821c:	2500      	movs	r5, #0
 800821e:	e638      	b.n	8007e92 <_scanf_float+0x86>
 8008220:	0800bf10 	.word	0x0800bf10
 8008224:	0800c1a4 	.word	0x0800c1a4

08008228 <std>:
 8008228:	2300      	movs	r3, #0
 800822a:	b510      	push	{r4, lr}
 800822c:	4604      	mov	r4, r0
 800822e:	e9c0 3300 	strd	r3, r3, [r0]
 8008232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008236:	6083      	str	r3, [r0, #8]
 8008238:	8181      	strh	r1, [r0, #12]
 800823a:	6643      	str	r3, [r0, #100]	; 0x64
 800823c:	81c2      	strh	r2, [r0, #14]
 800823e:	6183      	str	r3, [r0, #24]
 8008240:	4619      	mov	r1, r3
 8008242:	2208      	movs	r2, #8
 8008244:	305c      	adds	r0, #92	; 0x5c
 8008246:	f000 f914 	bl	8008472 <memset>
 800824a:	4b0d      	ldr	r3, [pc, #52]	; (8008280 <std+0x58>)
 800824c:	6224      	str	r4, [r4, #32]
 800824e:	6263      	str	r3, [r4, #36]	; 0x24
 8008250:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <std+0x5c>)
 8008252:	62a3      	str	r3, [r4, #40]	; 0x28
 8008254:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <std+0x60>)
 8008256:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008258:	4b0c      	ldr	r3, [pc, #48]	; (800828c <std+0x64>)
 800825a:	6323      	str	r3, [r4, #48]	; 0x30
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <std+0x68>)
 800825e:	429c      	cmp	r4, r3
 8008260:	d006      	beq.n	8008270 <std+0x48>
 8008262:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008266:	4294      	cmp	r4, r2
 8008268:	d002      	beq.n	8008270 <std+0x48>
 800826a:	33d0      	adds	r3, #208	; 0xd0
 800826c:	429c      	cmp	r4, r3
 800826e:	d105      	bne.n	800827c <std+0x54>
 8008270:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008278:	f000 b9ce 	b.w	8008618 <__retarget_lock_init_recursive>
 800827c:	bd10      	pop	{r4, pc}
 800827e:	bf00      	nop
 8008280:	080083ed 	.word	0x080083ed
 8008284:	0800840f 	.word	0x0800840f
 8008288:	08008447 	.word	0x08008447
 800828c:	0800846b 	.word	0x0800846b
 8008290:	20001378 	.word	0x20001378

08008294 <stdio_exit_handler>:
 8008294:	4a02      	ldr	r2, [pc, #8]	; (80082a0 <stdio_exit_handler+0xc>)
 8008296:	4903      	ldr	r1, [pc, #12]	; (80082a4 <stdio_exit_handler+0x10>)
 8008298:	4803      	ldr	r0, [pc, #12]	; (80082a8 <stdio_exit_handler+0x14>)
 800829a:	f000 b869 	b.w	8008370 <_fwalk_sglue>
 800829e:	bf00      	nop
 80082a0:	2000001c 	.word	0x2000001c
 80082a4:	0800ae61 	.word	0x0800ae61
 80082a8:	20000028 	.word	0x20000028

080082ac <cleanup_stdio>:
 80082ac:	6841      	ldr	r1, [r0, #4]
 80082ae:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <cleanup_stdio+0x34>)
 80082b0:	b510      	push	{r4, lr}
 80082b2:	4299      	cmp	r1, r3
 80082b4:	4604      	mov	r4, r0
 80082b6:	d001      	beq.n	80082bc <cleanup_stdio+0x10>
 80082b8:	f002 fdd2 	bl	800ae60 <_fflush_r>
 80082bc:	68a1      	ldr	r1, [r4, #8]
 80082be:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <cleanup_stdio+0x38>)
 80082c0:	4299      	cmp	r1, r3
 80082c2:	d002      	beq.n	80082ca <cleanup_stdio+0x1e>
 80082c4:	4620      	mov	r0, r4
 80082c6:	f002 fdcb 	bl	800ae60 <_fflush_r>
 80082ca:	68e1      	ldr	r1, [r4, #12]
 80082cc:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <cleanup_stdio+0x3c>)
 80082ce:	4299      	cmp	r1, r3
 80082d0:	d004      	beq.n	80082dc <cleanup_stdio+0x30>
 80082d2:	4620      	mov	r0, r4
 80082d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082d8:	f002 bdc2 	b.w	800ae60 <_fflush_r>
 80082dc:	bd10      	pop	{r4, pc}
 80082de:	bf00      	nop
 80082e0:	20001378 	.word	0x20001378
 80082e4:	200013e0 	.word	0x200013e0
 80082e8:	20001448 	.word	0x20001448

080082ec <global_stdio_init.part.0>:
 80082ec:	b510      	push	{r4, lr}
 80082ee:	4b0b      	ldr	r3, [pc, #44]	; (800831c <global_stdio_init.part.0+0x30>)
 80082f0:	4c0b      	ldr	r4, [pc, #44]	; (8008320 <global_stdio_init.part.0+0x34>)
 80082f2:	4a0c      	ldr	r2, [pc, #48]	; (8008324 <global_stdio_init.part.0+0x38>)
 80082f4:	4620      	mov	r0, r4
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	2104      	movs	r1, #4
 80082fa:	2200      	movs	r2, #0
 80082fc:	f7ff ff94 	bl	8008228 <std>
 8008300:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008304:	2201      	movs	r2, #1
 8008306:	2109      	movs	r1, #9
 8008308:	f7ff ff8e 	bl	8008228 <std>
 800830c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008310:	2202      	movs	r2, #2
 8008312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008316:	2112      	movs	r1, #18
 8008318:	f7ff bf86 	b.w	8008228 <std>
 800831c:	200014b0 	.word	0x200014b0
 8008320:	20001378 	.word	0x20001378
 8008324:	08008295 	.word	0x08008295

08008328 <__sfp_lock_acquire>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__sfp_lock_acquire+0x8>)
 800832a:	f000 b976 	b.w	800861a <__retarget_lock_acquire_recursive>
 800832e:	bf00      	nop
 8008330:	200014b9 	.word	0x200014b9

08008334 <__sfp_lock_release>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__sfp_lock_release+0x8>)
 8008336:	f000 b971 	b.w	800861c <__retarget_lock_release_recursive>
 800833a:	bf00      	nop
 800833c:	200014b9 	.word	0x200014b9

08008340 <__sinit>:
 8008340:	b510      	push	{r4, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	f7ff fff0 	bl	8008328 <__sfp_lock_acquire>
 8008348:	6a23      	ldr	r3, [r4, #32]
 800834a:	b11b      	cbz	r3, 8008354 <__sinit+0x14>
 800834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008350:	f7ff bff0 	b.w	8008334 <__sfp_lock_release>
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <__sinit+0x28>)
 8008356:	6223      	str	r3, [r4, #32]
 8008358:	4b04      	ldr	r3, [pc, #16]	; (800836c <__sinit+0x2c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f5      	bne.n	800834c <__sinit+0xc>
 8008360:	f7ff ffc4 	bl	80082ec <global_stdio_init.part.0>
 8008364:	e7f2      	b.n	800834c <__sinit+0xc>
 8008366:	bf00      	nop
 8008368:	080082ad 	.word	0x080082ad
 800836c:	200014b0 	.word	0x200014b0

08008370 <_fwalk_sglue>:
 8008370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008374:	4607      	mov	r7, r0
 8008376:	4688      	mov	r8, r1
 8008378:	4614      	mov	r4, r2
 800837a:	2600      	movs	r6, #0
 800837c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008380:	f1b9 0901 	subs.w	r9, r9, #1
 8008384:	d505      	bpl.n	8008392 <_fwalk_sglue+0x22>
 8008386:	6824      	ldr	r4, [r4, #0]
 8008388:	2c00      	cmp	r4, #0
 800838a:	d1f7      	bne.n	800837c <_fwalk_sglue+0xc>
 800838c:	4630      	mov	r0, r6
 800838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008392:	89ab      	ldrh	r3, [r5, #12]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d907      	bls.n	80083a8 <_fwalk_sglue+0x38>
 8008398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800839c:	3301      	adds	r3, #1
 800839e:	d003      	beq.n	80083a8 <_fwalk_sglue+0x38>
 80083a0:	4629      	mov	r1, r5
 80083a2:	4638      	mov	r0, r7
 80083a4:	47c0      	blx	r8
 80083a6:	4306      	orrs	r6, r0
 80083a8:	3568      	adds	r5, #104	; 0x68
 80083aa:	e7e9      	b.n	8008380 <_fwalk_sglue+0x10>

080083ac <siprintf>:
 80083ac:	b40e      	push	{r1, r2, r3}
 80083ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b2:	b500      	push	{lr}
 80083b4:	b09c      	sub	sp, #112	; 0x70
 80083b6:	ab1d      	add	r3, sp, #116	; 0x74
 80083b8:	9002      	str	r0, [sp, #8]
 80083ba:	9006      	str	r0, [sp, #24]
 80083bc:	9107      	str	r1, [sp, #28]
 80083be:	9104      	str	r1, [sp, #16]
 80083c0:	4808      	ldr	r0, [pc, #32]	; (80083e4 <siprintf+0x38>)
 80083c2:	4909      	ldr	r1, [pc, #36]	; (80083e8 <siprintf+0x3c>)
 80083c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c8:	9105      	str	r1, [sp, #20]
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	a902      	add	r1, sp, #8
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	f002 fbc6 	bl	800ab60 <_svfiprintf_r>
 80083d4:	2200      	movs	r2, #0
 80083d6:	9b02      	ldr	r3, [sp, #8]
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	b01c      	add	sp, #112	; 0x70
 80083dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e0:	b003      	add	sp, #12
 80083e2:	4770      	bx	lr
 80083e4:	20000074 	.word	0x20000074
 80083e8:	ffff0208 	.word	0xffff0208

080083ec <__sread>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f4:	f000 f8c2 	bl	800857c <_read_r>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	bfab      	itete	ge
 80083fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008400:	181b      	addge	r3, r3, r0
 8008402:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008406:	bfac      	ite	ge
 8008408:	6563      	strge	r3, [r4, #84]	; 0x54
 800840a:	81a3      	strhlt	r3, [r4, #12]
 800840c:	bd10      	pop	{r4, pc}

0800840e <__swrite>:
 800840e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008412:	461f      	mov	r7, r3
 8008414:	898b      	ldrh	r3, [r1, #12]
 8008416:	4605      	mov	r5, r0
 8008418:	05db      	lsls	r3, r3, #23
 800841a:	460c      	mov	r4, r1
 800841c:	4616      	mov	r6, r2
 800841e:	d505      	bpl.n	800842c <__swrite+0x1e>
 8008420:	2302      	movs	r3, #2
 8008422:	2200      	movs	r2, #0
 8008424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008428:	f000 f896 	bl	8008558 <_lseek_r>
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	4632      	mov	r2, r6
 8008430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	4628      	mov	r0, r5
 8008438:	463b      	mov	r3, r7
 800843a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800843e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008442:	f000 b8ad 	b.w	80085a0 <_write_r>

08008446 <__sseek>:
 8008446:	b510      	push	{r4, lr}
 8008448:	460c      	mov	r4, r1
 800844a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800844e:	f000 f883 	bl	8008558 <_lseek_r>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	bf15      	itete	ne
 8008458:	6560      	strne	r0, [r4, #84]	; 0x54
 800845a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800845e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008462:	81a3      	strheq	r3, [r4, #12]
 8008464:	bf18      	it	ne
 8008466:	81a3      	strhne	r3, [r4, #12]
 8008468:	bd10      	pop	{r4, pc}

0800846a <__sclose>:
 800846a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846e:	f000 b80d 	b.w	800848c <_close_r>

08008472 <memset>:
 8008472:	4603      	mov	r3, r0
 8008474:	4402      	add	r2, r0
 8008476:	4293      	cmp	r3, r2
 8008478:	d100      	bne.n	800847c <memset+0xa>
 800847a:	4770      	bx	lr
 800847c:	f803 1b01 	strb.w	r1, [r3], #1
 8008480:	e7f9      	b.n	8008476 <memset+0x4>
	...

08008484 <_localeconv_r>:
 8008484:	4800      	ldr	r0, [pc, #0]	; (8008488 <_localeconv_r+0x4>)
 8008486:	4770      	bx	lr
 8008488:	20000168 	.word	0x20000168

0800848c <_close_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	2300      	movs	r3, #0
 8008490:	4d05      	ldr	r5, [pc, #20]	; (80084a8 <_close_r+0x1c>)
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	f7f9 fb9a 	bl	8001bd0 <_close>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_close_r+0x1a>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_close_r+0x1a>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	200014b4 	.word	0x200014b4

080084ac <_reclaim_reent>:
 80084ac:	4b29      	ldr	r3, [pc, #164]	; (8008554 <_reclaim_reent+0xa8>)
 80084ae:	b570      	push	{r4, r5, r6, lr}
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4604      	mov	r4, r0
 80084b4:	4283      	cmp	r3, r0
 80084b6:	d04b      	beq.n	8008550 <_reclaim_reent+0xa4>
 80084b8:	69c3      	ldr	r3, [r0, #28]
 80084ba:	b143      	cbz	r3, 80084ce <_reclaim_reent+0x22>
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d144      	bne.n	800854c <_reclaim_reent+0xa0>
 80084c2:	69e3      	ldr	r3, [r4, #28]
 80084c4:	6819      	ldr	r1, [r3, #0]
 80084c6:	b111      	cbz	r1, 80084ce <_reclaim_reent+0x22>
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 ff39 	bl	8009340 <_free_r>
 80084ce:	6961      	ldr	r1, [r4, #20]
 80084d0:	b111      	cbz	r1, 80084d8 <_reclaim_reent+0x2c>
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 ff34 	bl	8009340 <_free_r>
 80084d8:	69e1      	ldr	r1, [r4, #28]
 80084da:	b111      	cbz	r1, 80084e2 <_reclaim_reent+0x36>
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 ff2f 	bl	8009340 <_free_r>
 80084e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80084e4:	b111      	cbz	r1, 80084ec <_reclaim_reent+0x40>
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 ff2a 	bl	8009340 <_free_r>
 80084ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ee:	b111      	cbz	r1, 80084f6 <_reclaim_reent+0x4a>
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 ff25 	bl	8009340 <_free_r>
 80084f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084f8:	b111      	cbz	r1, 8008500 <_reclaim_reent+0x54>
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 ff20 	bl	8009340 <_free_r>
 8008500:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008502:	b111      	cbz	r1, 800850a <_reclaim_reent+0x5e>
 8008504:	4620      	mov	r0, r4
 8008506:	f000 ff1b 	bl	8009340 <_free_r>
 800850a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800850c:	b111      	cbz	r1, 8008514 <_reclaim_reent+0x68>
 800850e:	4620      	mov	r0, r4
 8008510:	f000 ff16 	bl	8009340 <_free_r>
 8008514:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008516:	b111      	cbz	r1, 800851e <_reclaim_reent+0x72>
 8008518:	4620      	mov	r0, r4
 800851a:	f000 ff11 	bl	8009340 <_free_r>
 800851e:	6a23      	ldr	r3, [r4, #32]
 8008520:	b1b3      	cbz	r3, 8008550 <_reclaim_reent+0xa4>
 8008522:	4620      	mov	r0, r4
 8008524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008528:	4718      	bx	r3
 800852a:	5949      	ldr	r1, [r1, r5]
 800852c:	b941      	cbnz	r1, 8008540 <_reclaim_reent+0x94>
 800852e:	3504      	adds	r5, #4
 8008530:	69e3      	ldr	r3, [r4, #28]
 8008532:	2d80      	cmp	r5, #128	; 0x80
 8008534:	68d9      	ldr	r1, [r3, #12]
 8008536:	d1f8      	bne.n	800852a <_reclaim_reent+0x7e>
 8008538:	4620      	mov	r0, r4
 800853a:	f000 ff01 	bl	8009340 <_free_r>
 800853e:	e7c0      	b.n	80084c2 <_reclaim_reent+0x16>
 8008540:	680e      	ldr	r6, [r1, #0]
 8008542:	4620      	mov	r0, r4
 8008544:	f000 fefc 	bl	8009340 <_free_r>
 8008548:	4631      	mov	r1, r6
 800854a:	e7ef      	b.n	800852c <_reclaim_reent+0x80>
 800854c:	2500      	movs	r5, #0
 800854e:	e7ef      	b.n	8008530 <_reclaim_reent+0x84>
 8008550:	bd70      	pop	{r4, r5, r6, pc}
 8008552:	bf00      	nop
 8008554:	20000074 	.word	0x20000074

08008558 <_lseek_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	4611      	mov	r1, r2
 8008560:	2200      	movs	r2, #0
 8008562:	4d05      	ldr	r5, [pc, #20]	; (8008578 <_lseek_r+0x20>)
 8008564:	602a      	str	r2, [r5, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	f7f9 fb56 	bl	8001c18 <_lseek>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_lseek_r+0x1e>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_lseek_r+0x1e>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	200014b4 	.word	0x200014b4

0800857c <_read_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4604      	mov	r4, r0
 8008580:	4608      	mov	r0, r1
 8008582:	4611      	mov	r1, r2
 8008584:	2200      	movs	r2, #0
 8008586:	4d05      	ldr	r5, [pc, #20]	; (800859c <_read_r+0x20>)
 8008588:	602a      	str	r2, [r5, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f7f9 fae7 	bl	8001b5e <_read>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_read_r+0x1e>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_read_r+0x1e>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	200014b4 	.word	0x200014b4

080085a0 <_write_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	2200      	movs	r2, #0
 80085aa:	4d05      	ldr	r5, [pc, #20]	; (80085c0 <_write_r+0x20>)
 80085ac:	602a      	str	r2, [r5, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f7f9 faf2 	bl	8001b98 <_write>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_write_r+0x1e>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b103      	cbz	r3, 80085be <_write_r+0x1e>
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	200014b4 	.word	0x200014b4

080085c4 <__errno>:
 80085c4:	4b01      	ldr	r3, [pc, #4]	; (80085cc <__errno+0x8>)
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	20000074 	.word	0x20000074

080085d0 <__libc_init_array>:
 80085d0:	b570      	push	{r4, r5, r6, lr}
 80085d2:	2600      	movs	r6, #0
 80085d4:	4d0c      	ldr	r5, [pc, #48]	; (8008608 <__libc_init_array+0x38>)
 80085d6:	4c0d      	ldr	r4, [pc, #52]	; (800860c <__libc_init_array+0x3c>)
 80085d8:	1b64      	subs	r4, r4, r5
 80085da:	10a4      	asrs	r4, r4, #2
 80085dc:	42a6      	cmp	r6, r4
 80085de:	d109      	bne.n	80085f4 <__libc_init_array+0x24>
 80085e0:	f003 fb42 	bl	800bc68 <_init>
 80085e4:	2600      	movs	r6, #0
 80085e6:	4d0a      	ldr	r5, [pc, #40]	; (8008610 <__libc_init_array+0x40>)
 80085e8:	4c0a      	ldr	r4, [pc, #40]	; (8008614 <__libc_init_array+0x44>)
 80085ea:	1b64      	subs	r4, r4, r5
 80085ec:	10a4      	asrs	r4, r4, #2
 80085ee:	42a6      	cmp	r6, r4
 80085f0:	d105      	bne.n	80085fe <__libc_init_array+0x2e>
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f8:	4798      	blx	r3
 80085fa:	3601      	adds	r6, #1
 80085fc:	e7ee      	b.n	80085dc <__libc_init_array+0xc>
 80085fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008602:	4798      	blx	r3
 8008604:	3601      	adds	r6, #1
 8008606:	e7f2      	b.n	80085ee <__libc_init_array+0x1e>
 8008608:	0800c208 	.word	0x0800c208
 800860c:	0800c208 	.word	0x0800c208
 8008610:	0800c208 	.word	0x0800c208
 8008614:	0800c20c 	.word	0x0800c20c

08008618 <__retarget_lock_init_recursive>:
 8008618:	4770      	bx	lr

0800861a <__retarget_lock_acquire_recursive>:
 800861a:	4770      	bx	lr

0800861c <__retarget_lock_release_recursive>:
 800861c:	4770      	bx	lr

0800861e <memchr>:
 800861e:	4603      	mov	r3, r0
 8008620:	b510      	push	{r4, lr}
 8008622:	b2c9      	uxtb	r1, r1
 8008624:	4402      	add	r2, r0
 8008626:	4293      	cmp	r3, r2
 8008628:	4618      	mov	r0, r3
 800862a:	d101      	bne.n	8008630 <memchr+0x12>
 800862c:	2000      	movs	r0, #0
 800862e:	e003      	b.n	8008638 <memchr+0x1a>
 8008630:	7804      	ldrb	r4, [r0, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	428c      	cmp	r4, r1
 8008636:	d1f6      	bne.n	8008626 <memchr+0x8>
 8008638:	bd10      	pop	{r4, pc}

0800863a <memcpy>:
 800863a:	440a      	add	r2, r1
 800863c:	4291      	cmp	r1, r2
 800863e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008642:	d100      	bne.n	8008646 <memcpy+0xc>
 8008644:	4770      	bx	lr
 8008646:	b510      	push	{r4, lr}
 8008648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800864c:	4291      	cmp	r1, r2
 800864e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008652:	d1f9      	bne.n	8008648 <memcpy+0xe>
 8008654:	bd10      	pop	{r4, pc}
	...

08008658 <nanf>:
 8008658:	4800      	ldr	r0, [pc, #0]	; (800865c <nanf+0x4>)
 800865a:	4770      	bx	lr
 800865c:	7fc00000 	.word	0x7fc00000

08008660 <quorem>:
 8008660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	6903      	ldr	r3, [r0, #16]
 8008666:	690c      	ldr	r4, [r1, #16]
 8008668:	4607      	mov	r7, r0
 800866a:	42a3      	cmp	r3, r4
 800866c:	db7f      	blt.n	800876e <quorem+0x10e>
 800866e:	3c01      	subs	r4, #1
 8008670:	f100 0514 	add.w	r5, r0, #20
 8008674:	f101 0814 	add.w	r8, r1, #20
 8008678:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008686:	3301      	adds	r3, #1
 8008688:	429a      	cmp	r2, r3
 800868a:	fbb2 f6f3 	udiv	r6, r2, r3
 800868e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008692:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008696:	d331      	bcc.n	80086fc <quorem+0x9c>
 8008698:	f04f 0e00 	mov.w	lr, #0
 800869c:	4640      	mov	r0, r8
 800869e:	46ac      	mov	ip, r5
 80086a0:	46f2      	mov	sl, lr
 80086a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80086a6:	b293      	uxth	r3, r2
 80086a8:	fb06 e303 	mla	r3, r6, r3, lr
 80086ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086b0:	0c1a      	lsrs	r2, r3, #16
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	fb06 220e 	mla	r2, r6, lr, r2
 80086b8:	ebaa 0303 	sub.w	r3, sl, r3
 80086bc:	f8dc a000 	ldr.w	sl, [ip]
 80086c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086c4:	fa1f fa8a 	uxth.w	sl, sl
 80086c8:	4453      	add	r3, sl
 80086ca:	f8dc a000 	ldr.w	sl, [ip]
 80086ce:	b292      	uxth	r2, r2
 80086d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80086d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086d8:	b29b      	uxth	r3, r3
 80086da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086de:	4581      	cmp	r9, r0
 80086e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086e4:	f84c 3b04 	str.w	r3, [ip], #4
 80086e8:	d2db      	bcs.n	80086a2 <quorem+0x42>
 80086ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80086ee:	b92b      	cbnz	r3, 80086fc <quorem+0x9c>
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	3b04      	subs	r3, #4
 80086f4:	429d      	cmp	r5, r3
 80086f6:	461a      	mov	r2, r3
 80086f8:	d32d      	bcc.n	8008756 <quorem+0xf6>
 80086fa:	613c      	str	r4, [r7, #16]
 80086fc:	4638      	mov	r0, r7
 80086fe:	f001 f9df 	bl	8009ac0 <__mcmp>
 8008702:	2800      	cmp	r0, #0
 8008704:	db23      	blt.n	800874e <quorem+0xee>
 8008706:	4629      	mov	r1, r5
 8008708:	2000      	movs	r0, #0
 800870a:	3601      	adds	r6, #1
 800870c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008710:	f8d1 c000 	ldr.w	ip, [r1]
 8008714:	b293      	uxth	r3, r2
 8008716:	1ac3      	subs	r3, r0, r3
 8008718:	0c12      	lsrs	r2, r2, #16
 800871a:	fa1f f08c 	uxth.w	r0, ip
 800871e:	4403      	add	r3, r0
 8008720:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008728:	b29b      	uxth	r3, r3
 800872a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800872e:	45c1      	cmp	r9, r8
 8008730:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008734:	f841 3b04 	str.w	r3, [r1], #4
 8008738:	d2e8      	bcs.n	800870c <quorem+0xac>
 800873a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800873e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008742:	b922      	cbnz	r2, 800874e <quorem+0xee>
 8008744:	3b04      	subs	r3, #4
 8008746:	429d      	cmp	r5, r3
 8008748:	461a      	mov	r2, r3
 800874a:	d30a      	bcc.n	8008762 <quorem+0x102>
 800874c:	613c      	str	r4, [r7, #16]
 800874e:	4630      	mov	r0, r6
 8008750:	b003      	add	sp, #12
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	6812      	ldr	r2, [r2, #0]
 8008758:	3b04      	subs	r3, #4
 800875a:	2a00      	cmp	r2, #0
 800875c:	d1cd      	bne.n	80086fa <quorem+0x9a>
 800875e:	3c01      	subs	r4, #1
 8008760:	e7c8      	b.n	80086f4 <quorem+0x94>
 8008762:	6812      	ldr	r2, [r2, #0]
 8008764:	3b04      	subs	r3, #4
 8008766:	2a00      	cmp	r2, #0
 8008768:	d1f0      	bne.n	800874c <quorem+0xec>
 800876a:	3c01      	subs	r4, #1
 800876c:	e7eb      	b.n	8008746 <quorem+0xe6>
 800876e:	2000      	movs	r0, #0
 8008770:	e7ee      	b.n	8008750 <quorem+0xf0>
 8008772:	0000      	movs	r0, r0
 8008774:	0000      	movs	r0, r0
	...

08008778 <_dtoa_r>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	4616      	mov	r6, r2
 800877e:	461f      	mov	r7, r3
 8008780:	69c4      	ldr	r4, [r0, #28]
 8008782:	b099      	sub	sp, #100	; 0x64
 8008784:	4605      	mov	r5, r0
 8008786:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800878a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800878e:	b974      	cbnz	r4, 80087ae <_dtoa_r+0x36>
 8008790:	2010      	movs	r0, #16
 8008792:	f000 fe1d 	bl	80093d0 <malloc>
 8008796:	4602      	mov	r2, r0
 8008798:	61e8      	str	r0, [r5, #28]
 800879a:	b920      	cbnz	r0, 80087a6 <_dtoa_r+0x2e>
 800879c:	21ef      	movs	r1, #239	; 0xef
 800879e:	4bac      	ldr	r3, [pc, #688]	; (8008a50 <_dtoa_r+0x2d8>)
 80087a0:	48ac      	ldr	r0, [pc, #688]	; (8008a54 <_dtoa_r+0x2dc>)
 80087a2:	f002 fbc7 	bl	800af34 <__assert_func>
 80087a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087aa:	6004      	str	r4, [r0, #0]
 80087ac:	60c4      	str	r4, [r0, #12]
 80087ae:	69eb      	ldr	r3, [r5, #28]
 80087b0:	6819      	ldr	r1, [r3, #0]
 80087b2:	b151      	cbz	r1, 80087ca <_dtoa_r+0x52>
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	2301      	movs	r3, #1
 80087b8:	4093      	lsls	r3, r2
 80087ba:	604a      	str	r2, [r1, #4]
 80087bc:	608b      	str	r3, [r1, #8]
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 fefa 	bl	80095b8 <_Bfree>
 80087c4:	2200      	movs	r2, #0
 80087c6:	69eb      	ldr	r3, [r5, #28]
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	1e3b      	subs	r3, r7, #0
 80087cc:	bfaf      	iteee	ge
 80087ce:	2300      	movge	r3, #0
 80087d0:	2201      	movlt	r2, #1
 80087d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087d6:	9305      	strlt	r3, [sp, #20]
 80087d8:	bfa8      	it	ge
 80087da:	f8c8 3000 	strge.w	r3, [r8]
 80087de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80087e2:	4b9d      	ldr	r3, [pc, #628]	; (8008a58 <_dtoa_r+0x2e0>)
 80087e4:	bfb8      	it	lt
 80087e6:	f8c8 2000 	strlt.w	r2, [r8]
 80087ea:	ea33 0309 	bics.w	r3, r3, r9
 80087ee:	d119      	bne.n	8008824 <_dtoa_r+0xac>
 80087f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80087f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087fc:	4333      	orrs	r3, r6
 80087fe:	f000 8589 	beq.w	8009314 <_dtoa_r+0xb9c>
 8008802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008804:	b953      	cbnz	r3, 800881c <_dtoa_r+0xa4>
 8008806:	4b95      	ldr	r3, [pc, #596]	; (8008a5c <_dtoa_r+0x2e4>)
 8008808:	e023      	b.n	8008852 <_dtoa_r+0xda>
 800880a:	4b95      	ldr	r3, [pc, #596]	; (8008a60 <_dtoa_r+0x2e8>)
 800880c:	9303      	str	r3, [sp, #12]
 800880e:	3308      	adds	r3, #8
 8008810:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	9803      	ldr	r0, [sp, #12]
 8008816:	b019      	add	sp, #100	; 0x64
 8008818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881c:	4b8f      	ldr	r3, [pc, #572]	; (8008a5c <_dtoa_r+0x2e4>)
 800881e:	9303      	str	r3, [sp, #12]
 8008820:	3303      	adds	r3, #3
 8008822:	e7f5      	b.n	8008810 <_dtoa_r+0x98>
 8008824:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008828:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800882c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008830:	2200      	movs	r2, #0
 8008832:	2300      	movs	r3, #0
 8008834:	f7f8 f8b8 	bl	80009a8 <__aeabi_dcmpeq>
 8008838:	4680      	mov	r8, r0
 800883a:	b160      	cbz	r0, 8008856 <_dtoa_r+0xde>
 800883c:	2301      	movs	r3, #1
 800883e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8562 	beq.w	800930e <_dtoa_r+0xb96>
 800884a:	4b86      	ldr	r3, [pc, #536]	; (8008a64 <_dtoa_r+0x2ec>)
 800884c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	3b01      	subs	r3, #1
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	e7de      	b.n	8008814 <_dtoa_r+0x9c>
 8008856:	ab16      	add	r3, sp, #88	; 0x58
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	ab17      	add	r3, sp, #92	; 0x5c
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	4628      	mov	r0, r5
 8008860:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008864:	f001 fa3c 	bl	8009ce0 <__d2b>
 8008868:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800886c:	4682      	mov	sl, r0
 800886e:	2c00      	cmp	r4, #0
 8008870:	d07e      	beq.n	8008970 <_dtoa_r+0x1f8>
 8008872:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008878:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800887c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008880:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008884:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008888:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800888c:	4619      	mov	r1, r3
 800888e:	2200      	movs	r2, #0
 8008890:	4b75      	ldr	r3, [pc, #468]	; (8008a68 <_dtoa_r+0x2f0>)
 8008892:	f7f7 fc69 	bl	8000168 <__aeabi_dsub>
 8008896:	a368      	add	r3, pc, #416	; (adr r3, 8008a38 <_dtoa_r+0x2c0>)
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f7f7 fe1c 	bl	80004d8 <__aeabi_dmul>
 80088a0:	a367      	add	r3, pc, #412	; (adr r3, 8008a40 <_dtoa_r+0x2c8>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fc61 	bl	800016c <__adddf3>
 80088aa:	4606      	mov	r6, r0
 80088ac:	4620      	mov	r0, r4
 80088ae:	460f      	mov	r7, r1
 80088b0:	f7f7 fda8 	bl	8000404 <__aeabi_i2d>
 80088b4:	a364      	add	r3, pc, #400	; (adr r3, 8008a48 <_dtoa_r+0x2d0>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f7f7 fe0d 	bl	80004d8 <__aeabi_dmul>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4630      	mov	r0, r6
 80088c4:	4639      	mov	r1, r7
 80088c6:	f7f7 fc51 	bl	800016c <__adddf3>
 80088ca:	4606      	mov	r6, r0
 80088cc:	460f      	mov	r7, r1
 80088ce:	f7f8 f8b3 	bl	8000a38 <__aeabi_d2iz>
 80088d2:	2200      	movs	r2, #0
 80088d4:	4683      	mov	fp, r0
 80088d6:	2300      	movs	r3, #0
 80088d8:	4630      	mov	r0, r6
 80088da:	4639      	mov	r1, r7
 80088dc:	f7f8 f86e 	bl	80009bc <__aeabi_dcmplt>
 80088e0:	b148      	cbz	r0, 80088f6 <_dtoa_r+0x17e>
 80088e2:	4658      	mov	r0, fp
 80088e4:	f7f7 fd8e 	bl	8000404 <__aeabi_i2d>
 80088e8:	4632      	mov	r2, r6
 80088ea:	463b      	mov	r3, r7
 80088ec:	f7f8 f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80088f0:	b908      	cbnz	r0, 80088f6 <_dtoa_r+0x17e>
 80088f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088f6:	f1bb 0f16 	cmp.w	fp, #22
 80088fa:	d857      	bhi.n	80089ac <_dtoa_r+0x234>
 80088fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008900:	4b5a      	ldr	r3, [pc, #360]	; (8008a6c <_dtoa_r+0x2f4>)
 8008902:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f7f8 f857 	bl	80009bc <__aeabi_dcmplt>
 800890e:	2800      	cmp	r0, #0
 8008910:	d04e      	beq.n	80089b0 <_dtoa_r+0x238>
 8008912:	2300      	movs	r3, #0
 8008914:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008918:	930f      	str	r3, [sp, #60]	; 0x3c
 800891a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800891c:	1b1b      	subs	r3, r3, r4
 800891e:	1e5a      	subs	r2, r3, #1
 8008920:	bf46      	itte	mi
 8008922:	f1c3 0901 	rsbmi	r9, r3, #1
 8008926:	2300      	movmi	r3, #0
 8008928:	f04f 0900 	movpl.w	r9, #0
 800892c:	9209      	str	r2, [sp, #36]	; 0x24
 800892e:	bf48      	it	mi
 8008930:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008932:	f1bb 0f00 	cmp.w	fp, #0
 8008936:	db3d      	blt.n	80089b4 <_dtoa_r+0x23c>
 8008938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800893e:	445b      	add	r3, fp
 8008940:	9309      	str	r3, [sp, #36]	; 0x24
 8008942:	2300      	movs	r3, #0
 8008944:	930a      	str	r3, [sp, #40]	; 0x28
 8008946:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008948:	2b09      	cmp	r3, #9
 800894a:	d867      	bhi.n	8008a1c <_dtoa_r+0x2a4>
 800894c:	2b05      	cmp	r3, #5
 800894e:	bfc4      	itt	gt
 8008950:	3b04      	subgt	r3, #4
 8008952:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008956:	bfc8      	it	gt
 8008958:	2400      	movgt	r4, #0
 800895a:	f1a3 0302 	sub.w	r3, r3, #2
 800895e:	bfd8      	it	le
 8008960:	2401      	movle	r4, #1
 8008962:	2b03      	cmp	r3, #3
 8008964:	f200 8086 	bhi.w	8008a74 <_dtoa_r+0x2fc>
 8008968:	e8df f003 	tbb	[pc, r3]
 800896c:	5637392c 	.word	0x5637392c
 8008970:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008974:	441c      	add	r4, r3
 8008976:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800897a:	2b20      	cmp	r3, #32
 800897c:	bfc1      	itttt	gt
 800897e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008982:	fa09 f903 	lslgt.w	r9, r9, r3
 8008986:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800898a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800898e:	bfd6      	itet	le
 8008990:	f1c3 0320 	rsble	r3, r3, #32
 8008994:	ea49 0003 	orrgt.w	r0, r9, r3
 8008998:	fa06 f003 	lslle.w	r0, r6, r3
 800899c:	f7f7 fd22 	bl	80003e4 <__aeabi_ui2d>
 80089a0:	2201      	movs	r2, #1
 80089a2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80089a6:	3c01      	subs	r4, #1
 80089a8:	9213      	str	r2, [sp, #76]	; 0x4c
 80089aa:	e76f      	b.n	800888c <_dtoa_r+0x114>
 80089ac:	2301      	movs	r3, #1
 80089ae:	e7b3      	b.n	8008918 <_dtoa_r+0x1a0>
 80089b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80089b2:	e7b2      	b.n	800891a <_dtoa_r+0x1a2>
 80089b4:	f1cb 0300 	rsb	r3, fp, #0
 80089b8:	930a      	str	r3, [sp, #40]	; 0x28
 80089ba:	2300      	movs	r3, #0
 80089bc:	eba9 090b 	sub.w	r9, r9, fp
 80089c0:	930e      	str	r3, [sp, #56]	; 0x38
 80089c2:	e7c0      	b.n	8008946 <_dtoa_r+0x1ce>
 80089c4:	2300      	movs	r3, #0
 80089c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80089c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dc55      	bgt.n	8008a7a <_dtoa_r+0x302>
 80089ce:	2301      	movs	r3, #1
 80089d0:	461a      	mov	r2, r3
 80089d2:	9306      	str	r3, [sp, #24]
 80089d4:	9308      	str	r3, [sp, #32]
 80089d6:	9223      	str	r2, [sp, #140]	; 0x8c
 80089d8:	e00b      	b.n	80089f2 <_dtoa_r+0x27a>
 80089da:	2301      	movs	r3, #1
 80089dc:	e7f3      	b.n	80089c6 <_dtoa_r+0x24e>
 80089de:	2300      	movs	r3, #0
 80089e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80089e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089e4:	445b      	add	r3, fp
 80089e6:	9306      	str	r3, [sp, #24]
 80089e8:	3301      	adds	r3, #1
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	9308      	str	r3, [sp, #32]
 80089ee:	bfb8      	it	lt
 80089f0:	2301      	movlt	r3, #1
 80089f2:	2100      	movs	r1, #0
 80089f4:	2204      	movs	r2, #4
 80089f6:	69e8      	ldr	r0, [r5, #28]
 80089f8:	f102 0614 	add.w	r6, r2, #20
 80089fc:	429e      	cmp	r6, r3
 80089fe:	d940      	bls.n	8008a82 <_dtoa_r+0x30a>
 8008a00:	6041      	str	r1, [r0, #4]
 8008a02:	4628      	mov	r0, r5
 8008a04:	f000 fd98 	bl	8009538 <_Balloc>
 8008a08:	9003      	str	r0, [sp, #12]
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d13c      	bne.n	8008a88 <_dtoa_r+0x310>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	f240 11af 	movw	r1, #431	; 0x1af
 8008a14:	4b16      	ldr	r3, [pc, #88]	; (8008a70 <_dtoa_r+0x2f8>)
 8008a16:	e6c3      	b.n	80087a0 <_dtoa_r+0x28>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e7e1      	b.n	80089e0 <_dtoa_r+0x268>
 8008a1c:	2401      	movs	r4, #1
 8008a1e:	2300      	movs	r3, #0
 8008a20:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a22:	9322      	str	r3, [sp, #136]	; 0x88
 8008a24:	f04f 33ff 	mov.w	r3, #4294967295
 8008a28:	2200      	movs	r2, #0
 8008a2a:	9306      	str	r3, [sp, #24]
 8008a2c:	9308      	str	r3, [sp, #32]
 8008a2e:	2312      	movs	r3, #18
 8008a30:	e7d1      	b.n	80089d6 <_dtoa_r+0x25e>
 8008a32:	bf00      	nop
 8008a34:	f3af 8000 	nop.w
 8008a38:	636f4361 	.word	0x636f4361
 8008a3c:	3fd287a7 	.word	0x3fd287a7
 8008a40:	8b60c8b3 	.word	0x8b60c8b3
 8008a44:	3fc68a28 	.word	0x3fc68a28
 8008a48:	509f79fb 	.word	0x509f79fb
 8008a4c:	3fd34413 	.word	0x3fd34413
 8008a50:	0800bf22 	.word	0x0800bf22
 8008a54:	0800bf39 	.word	0x0800bf39
 8008a58:	7ff00000 	.word	0x7ff00000
 8008a5c:	0800bf1e 	.word	0x0800bf1e
 8008a60:	0800bf15 	.word	0x0800bf15
 8008a64:	0800beed 	.word	0x0800beed
 8008a68:	3ff80000 	.word	0x3ff80000
 8008a6c:	0800c028 	.word	0x0800c028
 8008a70:	0800bf91 	.word	0x0800bf91
 8008a74:	2301      	movs	r3, #1
 8008a76:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a78:	e7d4      	b.n	8008a24 <_dtoa_r+0x2ac>
 8008a7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a7c:	9306      	str	r3, [sp, #24]
 8008a7e:	9308      	str	r3, [sp, #32]
 8008a80:	e7b7      	b.n	80089f2 <_dtoa_r+0x27a>
 8008a82:	3101      	adds	r1, #1
 8008a84:	0052      	lsls	r2, r2, #1
 8008a86:	e7b7      	b.n	80089f8 <_dtoa_r+0x280>
 8008a88:	69eb      	ldr	r3, [r5, #28]
 8008a8a:	9a03      	ldr	r2, [sp, #12]
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	9b08      	ldr	r3, [sp, #32]
 8008a90:	2b0e      	cmp	r3, #14
 8008a92:	f200 80a8 	bhi.w	8008be6 <_dtoa_r+0x46e>
 8008a96:	2c00      	cmp	r4, #0
 8008a98:	f000 80a5 	beq.w	8008be6 <_dtoa_r+0x46e>
 8008a9c:	f1bb 0f00 	cmp.w	fp, #0
 8008aa0:	dd34      	ble.n	8008b0c <_dtoa_r+0x394>
 8008aa2:	4b9a      	ldr	r3, [pc, #616]	; (8008d0c <_dtoa_r+0x594>)
 8008aa4:	f00b 020f 	and.w	r2, fp, #15
 8008aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ab0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ab4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008ab8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008abc:	d016      	beq.n	8008aec <_dtoa_r+0x374>
 8008abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ac2:	4b93      	ldr	r3, [pc, #588]	; (8008d10 <_dtoa_r+0x598>)
 8008ac4:	2703      	movs	r7, #3
 8008ac6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008aca:	f7f7 fe2f 	bl	800072c <__aeabi_ddiv>
 8008ace:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ad2:	f004 040f 	and.w	r4, r4, #15
 8008ad6:	4e8e      	ldr	r6, [pc, #568]	; (8008d10 <_dtoa_r+0x598>)
 8008ad8:	b954      	cbnz	r4, 8008af0 <_dtoa_r+0x378>
 8008ada:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ae2:	f7f7 fe23 	bl	800072c <__aeabi_ddiv>
 8008ae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aea:	e029      	b.n	8008b40 <_dtoa_r+0x3c8>
 8008aec:	2702      	movs	r7, #2
 8008aee:	e7f2      	b.n	8008ad6 <_dtoa_r+0x35e>
 8008af0:	07e1      	lsls	r1, r4, #31
 8008af2:	d508      	bpl.n	8008b06 <_dtoa_r+0x38e>
 8008af4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008af8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008afc:	f7f7 fcec 	bl	80004d8 <__aeabi_dmul>
 8008b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b04:	3701      	adds	r7, #1
 8008b06:	1064      	asrs	r4, r4, #1
 8008b08:	3608      	adds	r6, #8
 8008b0a:	e7e5      	b.n	8008ad8 <_dtoa_r+0x360>
 8008b0c:	f000 80a5 	beq.w	8008c5a <_dtoa_r+0x4e2>
 8008b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b14:	f1cb 0400 	rsb	r4, fp, #0
 8008b18:	4b7c      	ldr	r3, [pc, #496]	; (8008d0c <_dtoa_r+0x594>)
 8008b1a:	f004 020f 	and.w	r2, r4, #15
 8008b1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fcd7 	bl	80004d8 <__aeabi_dmul>
 8008b2a:	2702      	movs	r7, #2
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b32:	4e77      	ldr	r6, [pc, #476]	; (8008d10 <_dtoa_r+0x598>)
 8008b34:	1124      	asrs	r4, r4, #4
 8008b36:	2c00      	cmp	r4, #0
 8008b38:	f040 8084 	bne.w	8008c44 <_dtoa_r+0x4cc>
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1d2      	bne.n	8008ae6 <_dtoa_r+0x36e>
 8008b40:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008b44:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 8087 	beq.w	8008c5e <_dtoa_r+0x4e6>
 8008b50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b54:	2200      	movs	r2, #0
 8008b56:	4b6f      	ldr	r3, [pc, #444]	; (8008d14 <_dtoa_r+0x59c>)
 8008b58:	f7f7 ff30 	bl	80009bc <__aeabi_dcmplt>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d07e      	beq.n	8008c5e <_dtoa_r+0x4e6>
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d07b      	beq.n	8008c5e <_dtoa_r+0x4e6>
 8008b66:	9b06      	ldr	r3, [sp, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dd38      	ble.n	8008bde <_dtoa_r+0x466>
 8008b6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b70:	2200      	movs	r2, #0
 8008b72:	4b69      	ldr	r3, [pc, #420]	; (8008d18 <_dtoa_r+0x5a0>)
 8008b74:	f7f7 fcb0 	bl	80004d8 <__aeabi_dmul>
 8008b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b7c:	9c06      	ldr	r4, [sp, #24]
 8008b7e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008b82:	3701      	adds	r7, #1
 8008b84:	4638      	mov	r0, r7
 8008b86:	f7f7 fc3d 	bl	8000404 <__aeabi_i2d>
 8008b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b8e:	f7f7 fca3 	bl	80004d8 <__aeabi_dmul>
 8008b92:	2200      	movs	r2, #0
 8008b94:	4b61      	ldr	r3, [pc, #388]	; (8008d1c <_dtoa_r+0x5a4>)
 8008b96:	f7f7 fae9 	bl	800016c <__adddf3>
 8008b9a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ba2:	9611      	str	r6, [sp, #68]	; 0x44
 8008ba4:	2c00      	cmp	r4, #0
 8008ba6:	d15d      	bne.n	8008c64 <_dtoa_r+0x4ec>
 8008ba8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bac:	2200      	movs	r2, #0
 8008bae:	4b5c      	ldr	r3, [pc, #368]	; (8008d20 <_dtoa_r+0x5a8>)
 8008bb0:	f7f7 fada 	bl	8000168 <__aeabi_dsub>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bbc:	4633      	mov	r3, r6
 8008bbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bc0:	f7f7 ff1a 	bl	80009f8 <__aeabi_dcmpgt>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	f040 8295 	bne.w	80090f4 <_dtoa_r+0x97c>
 8008bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008bd4:	f7f7 fef2 	bl	80009bc <__aeabi_dcmplt>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f040 8289 	bne.w	80090f0 <_dtoa_r+0x978>
 8008bde:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008be2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008be6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f2c0 8151 	blt.w	8008e90 <_dtoa_r+0x718>
 8008bee:	f1bb 0f0e 	cmp.w	fp, #14
 8008bf2:	f300 814d 	bgt.w	8008e90 <_dtoa_r+0x718>
 8008bf6:	4b45      	ldr	r3, [pc, #276]	; (8008d0c <_dtoa_r+0x594>)
 8008bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008bfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c00:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008c04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f280 80da 	bge.w	8008dc0 <_dtoa_r+0x648>
 8008c0c:	9b08      	ldr	r3, [sp, #32]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f300 80d6 	bgt.w	8008dc0 <_dtoa_r+0x648>
 8008c14:	f040 826b 	bne.w	80090ee <_dtoa_r+0x976>
 8008c18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4b40      	ldr	r3, [pc, #256]	; (8008d20 <_dtoa_r+0x5a8>)
 8008c20:	f7f7 fc5a 	bl	80004d8 <__aeabi_dmul>
 8008c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c28:	f7f7 fedc 	bl	80009e4 <__aeabi_dcmpge>
 8008c2c:	9c08      	ldr	r4, [sp, #32]
 8008c2e:	4626      	mov	r6, r4
 8008c30:	2800      	cmp	r0, #0
 8008c32:	f040 8241 	bne.w	80090b8 <_dtoa_r+0x940>
 8008c36:	2331      	movs	r3, #49	; 0x31
 8008c38:	9f03      	ldr	r7, [sp, #12]
 8008c3a:	f10b 0b01 	add.w	fp, fp, #1
 8008c3e:	f807 3b01 	strb.w	r3, [r7], #1
 8008c42:	e23d      	b.n	80090c0 <_dtoa_r+0x948>
 8008c44:	07e2      	lsls	r2, r4, #31
 8008c46:	d505      	bpl.n	8008c54 <_dtoa_r+0x4dc>
 8008c48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c4c:	f7f7 fc44 	bl	80004d8 <__aeabi_dmul>
 8008c50:	2301      	movs	r3, #1
 8008c52:	3701      	adds	r7, #1
 8008c54:	1064      	asrs	r4, r4, #1
 8008c56:	3608      	adds	r6, #8
 8008c58:	e76d      	b.n	8008b36 <_dtoa_r+0x3be>
 8008c5a:	2702      	movs	r7, #2
 8008c5c:	e770      	b.n	8008b40 <_dtoa_r+0x3c8>
 8008c5e:	46d8      	mov	r8, fp
 8008c60:	9c08      	ldr	r4, [sp, #32]
 8008c62:	e78f      	b.n	8008b84 <_dtoa_r+0x40c>
 8008c64:	9903      	ldr	r1, [sp, #12]
 8008c66:	4b29      	ldr	r3, [pc, #164]	; (8008d0c <_dtoa_r+0x594>)
 8008c68:	4421      	add	r1, r4
 8008c6a:	9112      	str	r1, [sp, #72]	; 0x48
 8008c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c72:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008c76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	d054      	beq.n	8008d28 <_dtoa_r+0x5b0>
 8008c7e:	2000      	movs	r0, #0
 8008c80:	4928      	ldr	r1, [pc, #160]	; (8008d24 <_dtoa_r+0x5ac>)
 8008c82:	f7f7 fd53 	bl	800072c <__aeabi_ddiv>
 8008c86:	463b      	mov	r3, r7
 8008c88:	4632      	mov	r2, r6
 8008c8a:	f7f7 fa6d 	bl	8000168 <__aeabi_dsub>
 8008c8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c92:	9f03      	ldr	r7, [sp, #12]
 8008c94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c98:	f7f7 fece 	bl	8000a38 <__aeabi_d2iz>
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	f7f7 fbb1 	bl	8000404 <__aeabi_i2d>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008caa:	f7f7 fa5d 	bl	8000168 <__aeabi_dsub>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	3430      	adds	r4, #48	; 0x30
 8008cb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cbc:	f807 4b01 	strb.w	r4, [r7], #1
 8008cc0:	f7f7 fe7c 	bl	80009bc <__aeabi_dcmplt>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d173      	bne.n	8008db0 <_dtoa_r+0x638>
 8008cc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ccc:	2000      	movs	r0, #0
 8008cce:	4911      	ldr	r1, [pc, #68]	; (8008d14 <_dtoa_r+0x59c>)
 8008cd0:	f7f7 fa4a 	bl	8000168 <__aeabi_dsub>
 8008cd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cd8:	f7f7 fe70 	bl	80009bc <__aeabi_dcmplt>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	f040 80b6 	bne.w	8008e4e <_dtoa_r+0x6d6>
 8008ce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ce4:	429f      	cmp	r7, r3
 8008ce6:	f43f af7a 	beq.w	8008bde <_dtoa_r+0x466>
 8008cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cee:	2200      	movs	r2, #0
 8008cf0:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <_dtoa_r+0x5a0>)
 8008cf2:	f7f7 fbf1 	bl	80004d8 <__aeabi_dmul>
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d00:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <_dtoa_r+0x5a0>)
 8008d02:	f7f7 fbe9 	bl	80004d8 <__aeabi_dmul>
 8008d06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d0a:	e7c3      	b.n	8008c94 <_dtoa_r+0x51c>
 8008d0c:	0800c028 	.word	0x0800c028
 8008d10:	0800c000 	.word	0x0800c000
 8008d14:	3ff00000 	.word	0x3ff00000
 8008d18:	40240000 	.word	0x40240000
 8008d1c:	401c0000 	.word	0x401c0000
 8008d20:	40140000 	.word	0x40140000
 8008d24:	3fe00000 	.word	0x3fe00000
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	f7f7 fbd4 	bl	80004d8 <__aeabi_dmul>
 8008d30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d36:	9c03      	ldr	r4, [sp, #12]
 8008d38:	9314      	str	r3, [sp, #80]	; 0x50
 8008d3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d3e:	f7f7 fe7b 	bl	8000a38 <__aeabi_d2iz>
 8008d42:	9015      	str	r0, [sp, #84]	; 0x54
 8008d44:	f7f7 fb5e 	bl	8000404 <__aeabi_i2d>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d50:	f7f7 fa0a 	bl	8000168 <__aeabi_dsub>
 8008d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d56:	4606      	mov	r6, r0
 8008d58:	3330      	adds	r3, #48	; 0x30
 8008d5a:	f804 3b01 	strb.w	r3, [r4], #1
 8008d5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d60:	460f      	mov	r7, r1
 8008d62:	429c      	cmp	r4, r3
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	d124      	bne.n	8008db4 <_dtoa_r+0x63c>
 8008d6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d6e:	4baf      	ldr	r3, [pc, #700]	; (800902c <_dtoa_r+0x8b4>)
 8008d70:	f7f7 f9fc 	bl	800016c <__adddf3>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4630      	mov	r0, r6
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	f7f7 fe3c 	bl	80009f8 <__aeabi_dcmpgt>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d163      	bne.n	8008e4c <_dtoa_r+0x6d4>
 8008d84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d88:	2000      	movs	r0, #0
 8008d8a:	49a8      	ldr	r1, [pc, #672]	; (800902c <_dtoa_r+0x8b4>)
 8008d8c:	f7f7 f9ec 	bl	8000168 <__aeabi_dsub>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4630      	mov	r0, r6
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fe10 	bl	80009bc <__aeabi_dcmplt>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	f43f af1e 	beq.w	8008bde <_dtoa_r+0x466>
 8008da2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008da4:	1e7b      	subs	r3, r7, #1
 8008da6:	9314      	str	r3, [sp, #80]	; 0x50
 8008da8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008dac:	2b30      	cmp	r3, #48	; 0x30
 8008dae:	d0f8      	beq.n	8008da2 <_dtoa_r+0x62a>
 8008db0:	46c3      	mov	fp, r8
 8008db2:	e03b      	b.n	8008e2c <_dtoa_r+0x6b4>
 8008db4:	4b9e      	ldr	r3, [pc, #632]	; (8009030 <_dtoa_r+0x8b8>)
 8008db6:	f7f7 fb8f 	bl	80004d8 <__aeabi_dmul>
 8008dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dbe:	e7bc      	b.n	8008d3a <_dtoa_r+0x5c2>
 8008dc0:	9f03      	ldr	r7, [sp, #12]
 8008dc2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008dc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 fcad 	bl	800072c <__aeabi_ddiv>
 8008dd2:	f7f7 fe31 	bl	8000a38 <__aeabi_d2iz>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	f7f7 fb14 	bl	8000404 <__aeabi_i2d>
 8008ddc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008de0:	f7f7 fb7a 	bl	80004d8 <__aeabi_dmul>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4640      	mov	r0, r8
 8008dea:	4649      	mov	r1, r9
 8008dec:	f7f7 f9bc 	bl	8000168 <__aeabi_dsub>
 8008df0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008df4:	f807 6b01 	strb.w	r6, [r7], #1
 8008df8:	9e03      	ldr	r6, [sp, #12]
 8008dfa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008dfe:	1bbe      	subs	r6, r7, r6
 8008e00:	45b4      	cmp	ip, r6
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	d136      	bne.n	8008e76 <_dtoa_r+0x6fe>
 8008e08:	f7f7 f9b0 	bl	800016c <__adddf3>
 8008e0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e10:	4680      	mov	r8, r0
 8008e12:	4689      	mov	r9, r1
 8008e14:	f7f7 fdf0 	bl	80009f8 <__aeabi_dcmpgt>
 8008e18:	bb58      	cbnz	r0, 8008e72 <_dtoa_r+0x6fa>
 8008e1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fdc1 	bl	80009a8 <__aeabi_dcmpeq>
 8008e26:	b108      	cbz	r0, 8008e2c <_dtoa_r+0x6b4>
 8008e28:	07e3      	lsls	r3, r4, #31
 8008e2a:	d422      	bmi.n	8008e72 <_dtoa_r+0x6fa>
 8008e2c:	4651      	mov	r1, sl
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 fbc2 	bl	80095b8 <_Bfree>
 8008e34:	2300      	movs	r3, #0
 8008e36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008e38:	703b      	strb	r3, [r7, #0]
 8008e3a:	f10b 0301 	add.w	r3, fp, #1
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f43f ace6 	beq.w	8008814 <_dtoa_r+0x9c>
 8008e48:	601f      	str	r7, [r3, #0]
 8008e4a:	e4e3      	b.n	8008814 <_dtoa_r+0x9c>
 8008e4c:	4627      	mov	r7, r4
 8008e4e:	463b      	mov	r3, r7
 8008e50:	461f      	mov	r7, r3
 8008e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e56:	2a39      	cmp	r2, #57	; 0x39
 8008e58:	d107      	bne.n	8008e6a <_dtoa_r+0x6f2>
 8008e5a:	9a03      	ldr	r2, [sp, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d1f7      	bne.n	8008e50 <_dtoa_r+0x6d8>
 8008e60:	2230      	movs	r2, #48	; 0x30
 8008e62:	9903      	ldr	r1, [sp, #12]
 8008e64:	f108 0801 	add.w	r8, r8, #1
 8008e68:	700a      	strb	r2, [r1, #0]
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	3201      	adds	r2, #1
 8008e6e:	701a      	strb	r2, [r3, #0]
 8008e70:	e79e      	b.n	8008db0 <_dtoa_r+0x638>
 8008e72:	46d8      	mov	r8, fp
 8008e74:	e7eb      	b.n	8008e4e <_dtoa_r+0x6d6>
 8008e76:	2200      	movs	r2, #0
 8008e78:	4b6d      	ldr	r3, [pc, #436]	; (8009030 <_dtoa_r+0x8b8>)
 8008e7a:	f7f7 fb2d 	bl	80004d8 <__aeabi_dmul>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2300      	movs	r3, #0
 8008e82:	4680      	mov	r8, r0
 8008e84:	4689      	mov	r9, r1
 8008e86:	f7f7 fd8f 	bl	80009a8 <__aeabi_dcmpeq>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d09b      	beq.n	8008dc6 <_dtoa_r+0x64e>
 8008e8e:	e7cd      	b.n	8008e2c <_dtoa_r+0x6b4>
 8008e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	f000 80c4 	beq.w	8009020 <_dtoa_r+0x8a8>
 8008e98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e9a:	2a01      	cmp	r2, #1
 8008e9c:	f300 80a8 	bgt.w	8008ff0 <_dtoa_r+0x878>
 8008ea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	f000 80a0 	beq.w	8008fe8 <_dtoa_r+0x870>
 8008ea8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008eac:	464f      	mov	r7, r9
 8008eae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	441a      	add	r2, r3
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	4499      	add	r9, r3
 8008eba:	9209      	str	r2, [sp, #36]	; 0x24
 8008ebc:	f000 fc7c 	bl	80097b8 <__i2b>
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	b15f      	cbz	r7, 8008edc <_dtoa_r+0x764>
 8008ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	dd08      	ble.n	8008edc <_dtoa_r+0x764>
 8008eca:	42bb      	cmp	r3, r7
 8008ecc:	bfa8      	it	ge
 8008ece:	463b      	movge	r3, r7
 8008ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed2:	eba9 0903 	sub.w	r9, r9, r3
 8008ed6:	1aff      	subs	r7, r7, r3
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	9309      	str	r3, [sp, #36]	; 0x24
 8008edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ede:	b1f3      	cbz	r3, 8008f1e <_dtoa_r+0x7a6>
 8008ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 80a0 	beq.w	8009028 <_dtoa_r+0x8b0>
 8008ee8:	2c00      	cmp	r4, #0
 8008eea:	dd10      	ble.n	8008f0e <_dtoa_r+0x796>
 8008eec:	4631      	mov	r1, r6
 8008eee:	4622      	mov	r2, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f000 fd1f 	bl	8009934 <__pow5mult>
 8008ef6:	4652      	mov	r2, sl
 8008ef8:	4601      	mov	r1, r0
 8008efa:	4606      	mov	r6, r0
 8008efc:	4628      	mov	r0, r5
 8008efe:	f000 fc71 	bl	80097e4 <__multiply>
 8008f02:	4680      	mov	r8, r0
 8008f04:	4651      	mov	r1, sl
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 fb56 	bl	80095b8 <_Bfree>
 8008f0c:	46c2      	mov	sl, r8
 8008f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f10:	1b1a      	subs	r2, r3, r4
 8008f12:	d004      	beq.n	8008f1e <_dtoa_r+0x7a6>
 8008f14:	4651      	mov	r1, sl
 8008f16:	4628      	mov	r0, r5
 8008f18:	f000 fd0c 	bl	8009934 <__pow5mult>
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 fc49 	bl	80097b8 <__i2b>
 8008f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f28:	4604      	mov	r4, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f340 8082 	ble.w	8009034 <_dtoa_r+0x8bc>
 8008f30:	461a      	mov	r2, r3
 8008f32:	4601      	mov	r1, r0
 8008f34:	4628      	mov	r0, r5
 8008f36:	f000 fcfd 	bl	8009934 <__pow5mult>
 8008f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	dd7b      	ble.n	800903a <_dtoa_r+0x8c2>
 8008f42:	f04f 0800 	mov.w	r8, #0
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f4c:	6918      	ldr	r0, [r3, #16]
 8008f4e:	f000 fbe5 	bl	800971c <__hi0bits>
 8008f52:	f1c0 0020 	rsb	r0, r0, #32
 8008f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f58:	4418      	add	r0, r3
 8008f5a:	f010 001f 	ands.w	r0, r0, #31
 8008f5e:	f000 8092 	beq.w	8009086 <_dtoa_r+0x90e>
 8008f62:	f1c0 0320 	rsb	r3, r0, #32
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	f340 8085 	ble.w	8009076 <_dtoa_r+0x8fe>
 8008f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6e:	f1c0 001c 	rsb	r0, r0, #28
 8008f72:	4403      	add	r3, r0
 8008f74:	4481      	add	r9, r0
 8008f76:	4407      	add	r7, r0
 8008f78:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7a:	f1b9 0f00 	cmp.w	r9, #0
 8008f7e:	dd05      	ble.n	8008f8c <_dtoa_r+0x814>
 8008f80:	4651      	mov	r1, sl
 8008f82:	464a      	mov	r2, r9
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 fd2f 	bl	80099e8 <__lshift>
 8008f8a:	4682      	mov	sl, r0
 8008f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	dd05      	ble.n	8008f9e <_dtoa_r+0x826>
 8008f92:	4621      	mov	r1, r4
 8008f94:	461a      	mov	r2, r3
 8008f96:	4628      	mov	r0, r5
 8008f98:	f000 fd26 	bl	80099e8 <__lshift>
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d072      	beq.n	800908a <_dtoa_r+0x912>
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4650      	mov	r0, sl
 8008fa8:	f000 fd8a 	bl	8009ac0 <__mcmp>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	da6c      	bge.n	800908a <_dtoa_r+0x912>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4651      	mov	r1, sl
 8008fb4:	220a      	movs	r2, #10
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f000 fb20 	bl	80095fc <__multadd>
 8008fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fbe:	4682      	mov	sl, r0
 8008fc0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 81ac 	beq.w	8009322 <_dtoa_r+0xbaa>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	4631      	mov	r1, r6
 8008fce:	220a      	movs	r2, #10
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f000 fb13 	bl	80095fc <__multadd>
 8008fd6:	9b06      	ldr	r3, [sp, #24]
 8008fd8:	4606      	mov	r6, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f300 8093 	bgt.w	8009106 <_dtoa_r+0x98e>
 8008fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	dc59      	bgt.n	800909a <_dtoa_r+0x922>
 8008fe6:	e08e      	b.n	8009106 <_dtoa_r+0x98e>
 8008fe8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008fea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fee:	e75d      	b.n	8008eac <_dtoa_r+0x734>
 8008ff0:	9b08      	ldr	r3, [sp, #32]
 8008ff2:	1e5c      	subs	r4, r3, #1
 8008ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff6:	42a3      	cmp	r3, r4
 8008ff8:	bfbf      	itttt	lt
 8008ffa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ffc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008ffe:	1ae3      	sublt	r3, r4, r3
 8009000:	18d2      	addlt	r2, r2, r3
 8009002:	bfa8      	it	ge
 8009004:	1b1c      	subge	r4, r3, r4
 8009006:	9b08      	ldr	r3, [sp, #32]
 8009008:	bfbe      	ittt	lt
 800900a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800900c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800900e:	2400      	movlt	r4, #0
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfb5      	itete	lt
 8009014:	eba9 0703 	sublt.w	r7, r9, r3
 8009018:	464f      	movge	r7, r9
 800901a:	2300      	movlt	r3, #0
 800901c:	9b08      	ldrge	r3, [sp, #32]
 800901e:	e747      	b.n	8008eb0 <_dtoa_r+0x738>
 8009020:	464f      	mov	r7, r9
 8009022:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009024:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009026:	e74c      	b.n	8008ec2 <_dtoa_r+0x74a>
 8009028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800902a:	e773      	b.n	8008f14 <_dtoa_r+0x79c>
 800902c:	3fe00000 	.word	0x3fe00000
 8009030:	40240000 	.word	0x40240000
 8009034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009036:	2b01      	cmp	r3, #1
 8009038:	dc18      	bgt.n	800906c <_dtoa_r+0x8f4>
 800903a:	9b04      	ldr	r3, [sp, #16]
 800903c:	b9b3      	cbnz	r3, 800906c <_dtoa_r+0x8f4>
 800903e:	9b05      	ldr	r3, [sp, #20]
 8009040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009044:	b993      	cbnz	r3, 800906c <_dtoa_r+0x8f4>
 8009046:	9b05      	ldr	r3, [sp, #20]
 8009048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800904c:	0d1b      	lsrs	r3, r3, #20
 800904e:	051b      	lsls	r3, r3, #20
 8009050:	b17b      	cbz	r3, 8009072 <_dtoa_r+0x8fa>
 8009052:	f04f 0801 	mov.w	r8, #1
 8009056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009058:	f109 0901 	add.w	r9, r9, #1
 800905c:	3301      	adds	r3, #1
 800905e:	9309      	str	r3, [sp, #36]	; 0x24
 8009060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009062:	2b00      	cmp	r3, #0
 8009064:	f47f af6f 	bne.w	8008f46 <_dtoa_r+0x7ce>
 8009068:	2001      	movs	r0, #1
 800906a:	e774      	b.n	8008f56 <_dtoa_r+0x7de>
 800906c:	f04f 0800 	mov.w	r8, #0
 8009070:	e7f6      	b.n	8009060 <_dtoa_r+0x8e8>
 8009072:	4698      	mov	r8, r3
 8009074:	e7f4      	b.n	8009060 <_dtoa_r+0x8e8>
 8009076:	d080      	beq.n	8008f7a <_dtoa_r+0x802>
 8009078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800907a:	331c      	adds	r3, #28
 800907c:	441a      	add	r2, r3
 800907e:	4499      	add	r9, r3
 8009080:	441f      	add	r7, r3
 8009082:	9209      	str	r2, [sp, #36]	; 0x24
 8009084:	e779      	b.n	8008f7a <_dtoa_r+0x802>
 8009086:	4603      	mov	r3, r0
 8009088:	e7f6      	b.n	8009078 <_dtoa_r+0x900>
 800908a:	9b08      	ldr	r3, [sp, #32]
 800908c:	2b00      	cmp	r3, #0
 800908e:	dc34      	bgt.n	80090fa <_dtoa_r+0x982>
 8009090:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009092:	2b02      	cmp	r3, #2
 8009094:	dd31      	ble.n	80090fa <_dtoa_r+0x982>
 8009096:	9b08      	ldr	r3, [sp, #32]
 8009098:	9306      	str	r3, [sp, #24]
 800909a:	9b06      	ldr	r3, [sp, #24]
 800909c:	b963      	cbnz	r3, 80090b8 <_dtoa_r+0x940>
 800909e:	4621      	mov	r1, r4
 80090a0:	2205      	movs	r2, #5
 80090a2:	4628      	mov	r0, r5
 80090a4:	f000 faaa 	bl	80095fc <__multadd>
 80090a8:	4601      	mov	r1, r0
 80090aa:	4604      	mov	r4, r0
 80090ac:	4650      	mov	r0, sl
 80090ae:	f000 fd07 	bl	8009ac0 <__mcmp>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f73f adbf 	bgt.w	8008c36 <_dtoa_r+0x4be>
 80090b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090ba:	9f03      	ldr	r7, [sp, #12]
 80090bc:	ea6f 0b03 	mvn.w	fp, r3
 80090c0:	f04f 0800 	mov.w	r8, #0
 80090c4:	4621      	mov	r1, r4
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 fa76 	bl	80095b8 <_Bfree>
 80090cc:	2e00      	cmp	r6, #0
 80090ce:	f43f aead 	beq.w	8008e2c <_dtoa_r+0x6b4>
 80090d2:	f1b8 0f00 	cmp.w	r8, #0
 80090d6:	d005      	beq.n	80090e4 <_dtoa_r+0x96c>
 80090d8:	45b0      	cmp	r8, r6
 80090da:	d003      	beq.n	80090e4 <_dtoa_r+0x96c>
 80090dc:	4641      	mov	r1, r8
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 fa6a 	bl	80095b8 <_Bfree>
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	f000 fa66 	bl	80095b8 <_Bfree>
 80090ec:	e69e      	b.n	8008e2c <_dtoa_r+0x6b4>
 80090ee:	2400      	movs	r4, #0
 80090f0:	4626      	mov	r6, r4
 80090f2:	e7e1      	b.n	80090b8 <_dtoa_r+0x940>
 80090f4:	46c3      	mov	fp, r8
 80090f6:	4626      	mov	r6, r4
 80090f8:	e59d      	b.n	8008c36 <_dtoa_r+0x4be>
 80090fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80c8 	beq.w	8009292 <_dtoa_r+0xb1a>
 8009102:	9b08      	ldr	r3, [sp, #32]
 8009104:	9306      	str	r3, [sp, #24]
 8009106:	2f00      	cmp	r7, #0
 8009108:	dd05      	ble.n	8009116 <_dtoa_r+0x99e>
 800910a:	4631      	mov	r1, r6
 800910c:	463a      	mov	r2, r7
 800910e:	4628      	mov	r0, r5
 8009110:	f000 fc6a 	bl	80099e8 <__lshift>
 8009114:	4606      	mov	r6, r0
 8009116:	f1b8 0f00 	cmp.w	r8, #0
 800911a:	d05b      	beq.n	80091d4 <_dtoa_r+0xa5c>
 800911c:	4628      	mov	r0, r5
 800911e:	6871      	ldr	r1, [r6, #4]
 8009120:	f000 fa0a 	bl	8009538 <_Balloc>
 8009124:	4607      	mov	r7, r0
 8009126:	b928      	cbnz	r0, 8009134 <_dtoa_r+0x9bc>
 8009128:	4602      	mov	r2, r0
 800912a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800912e:	4b81      	ldr	r3, [pc, #516]	; (8009334 <_dtoa_r+0xbbc>)
 8009130:	f7ff bb36 	b.w	80087a0 <_dtoa_r+0x28>
 8009134:	6932      	ldr	r2, [r6, #16]
 8009136:	f106 010c 	add.w	r1, r6, #12
 800913a:	3202      	adds	r2, #2
 800913c:	0092      	lsls	r2, r2, #2
 800913e:	300c      	adds	r0, #12
 8009140:	f7ff fa7b 	bl	800863a <memcpy>
 8009144:	2201      	movs	r2, #1
 8009146:	4639      	mov	r1, r7
 8009148:	4628      	mov	r0, r5
 800914a:	f000 fc4d 	bl	80099e8 <__lshift>
 800914e:	46b0      	mov	r8, r6
 8009150:	4606      	mov	r6, r0
 8009152:	9b03      	ldr	r3, [sp, #12]
 8009154:	9a03      	ldr	r2, [sp, #12]
 8009156:	3301      	adds	r3, #1
 8009158:	9308      	str	r3, [sp, #32]
 800915a:	9b06      	ldr	r3, [sp, #24]
 800915c:	4413      	add	r3, r2
 800915e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009160:	9b04      	ldr	r3, [sp, #16]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	930a      	str	r3, [sp, #40]	; 0x28
 8009168:	9b08      	ldr	r3, [sp, #32]
 800916a:	4621      	mov	r1, r4
 800916c:	3b01      	subs	r3, #1
 800916e:	4650      	mov	r0, sl
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	f7ff fa75 	bl	8008660 <quorem>
 8009176:	4641      	mov	r1, r8
 8009178:	9006      	str	r0, [sp, #24]
 800917a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800917e:	4650      	mov	r0, sl
 8009180:	f000 fc9e 	bl	8009ac0 <__mcmp>
 8009184:	4632      	mov	r2, r6
 8009186:	9009      	str	r0, [sp, #36]	; 0x24
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 fcb4 	bl	8009af8 <__mdiff>
 8009190:	68c2      	ldr	r2, [r0, #12]
 8009192:	4607      	mov	r7, r0
 8009194:	bb02      	cbnz	r2, 80091d8 <_dtoa_r+0xa60>
 8009196:	4601      	mov	r1, r0
 8009198:	4650      	mov	r0, sl
 800919a:	f000 fc91 	bl	8009ac0 <__mcmp>
 800919e:	4602      	mov	r2, r0
 80091a0:	4639      	mov	r1, r7
 80091a2:	4628      	mov	r0, r5
 80091a4:	920c      	str	r2, [sp, #48]	; 0x30
 80091a6:	f000 fa07 	bl	80095b8 <_Bfree>
 80091aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091ae:	9f08      	ldr	r7, [sp, #32]
 80091b0:	ea43 0102 	orr.w	r1, r3, r2
 80091b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b6:	4319      	orrs	r1, r3
 80091b8:	d110      	bne.n	80091dc <_dtoa_r+0xa64>
 80091ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80091be:	d029      	beq.n	8009214 <_dtoa_r+0xa9c>
 80091c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dd02      	ble.n	80091cc <_dtoa_r+0xa54>
 80091c6:	9b06      	ldr	r3, [sp, #24]
 80091c8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80091cc:	9b04      	ldr	r3, [sp, #16]
 80091ce:	f883 9000 	strb.w	r9, [r3]
 80091d2:	e777      	b.n	80090c4 <_dtoa_r+0x94c>
 80091d4:	4630      	mov	r0, r6
 80091d6:	e7ba      	b.n	800914e <_dtoa_r+0x9d6>
 80091d8:	2201      	movs	r2, #1
 80091da:	e7e1      	b.n	80091a0 <_dtoa_r+0xa28>
 80091dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091de:	2b00      	cmp	r3, #0
 80091e0:	db04      	blt.n	80091ec <_dtoa_r+0xa74>
 80091e2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80091e4:	430b      	orrs	r3, r1
 80091e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091e8:	430b      	orrs	r3, r1
 80091ea:	d120      	bne.n	800922e <_dtoa_r+0xab6>
 80091ec:	2a00      	cmp	r2, #0
 80091ee:	dded      	ble.n	80091cc <_dtoa_r+0xa54>
 80091f0:	4651      	mov	r1, sl
 80091f2:	2201      	movs	r2, #1
 80091f4:	4628      	mov	r0, r5
 80091f6:	f000 fbf7 	bl	80099e8 <__lshift>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4682      	mov	sl, r0
 80091fe:	f000 fc5f 	bl	8009ac0 <__mcmp>
 8009202:	2800      	cmp	r0, #0
 8009204:	dc03      	bgt.n	800920e <_dtoa_r+0xa96>
 8009206:	d1e1      	bne.n	80091cc <_dtoa_r+0xa54>
 8009208:	f019 0f01 	tst.w	r9, #1
 800920c:	d0de      	beq.n	80091cc <_dtoa_r+0xa54>
 800920e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009212:	d1d8      	bne.n	80091c6 <_dtoa_r+0xa4e>
 8009214:	2339      	movs	r3, #57	; 0x39
 8009216:	9a04      	ldr	r2, [sp, #16]
 8009218:	7013      	strb	r3, [r2, #0]
 800921a:	463b      	mov	r3, r7
 800921c:	461f      	mov	r7, r3
 800921e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009222:	3b01      	subs	r3, #1
 8009224:	2a39      	cmp	r2, #57	; 0x39
 8009226:	d06b      	beq.n	8009300 <_dtoa_r+0xb88>
 8009228:	3201      	adds	r2, #1
 800922a:	701a      	strb	r2, [r3, #0]
 800922c:	e74a      	b.n	80090c4 <_dtoa_r+0x94c>
 800922e:	2a00      	cmp	r2, #0
 8009230:	dd07      	ble.n	8009242 <_dtoa_r+0xaca>
 8009232:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009236:	d0ed      	beq.n	8009214 <_dtoa_r+0xa9c>
 8009238:	9a04      	ldr	r2, [sp, #16]
 800923a:	f109 0301 	add.w	r3, r9, #1
 800923e:	7013      	strb	r3, [r2, #0]
 8009240:	e740      	b.n	80090c4 <_dtoa_r+0x94c>
 8009242:	9b08      	ldr	r3, [sp, #32]
 8009244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009246:	f803 9c01 	strb.w	r9, [r3, #-1]
 800924a:	4293      	cmp	r3, r2
 800924c:	d042      	beq.n	80092d4 <_dtoa_r+0xb5c>
 800924e:	4651      	mov	r1, sl
 8009250:	2300      	movs	r3, #0
 8009252:	220a      	movs	r2, #10
 8009254:	4628      	mov	r0, r5
 8009256:	f000 f9d1 	bl	80095fc <__multadd>
 800925a:	45b0      	cmp	r8, r6
 800925c:	4682      	mov	sl, r0
 800925e:	f04f 0300 	mov.w	r3, #0
 8009262:	f04f 020a 	mov.w	r2, #10
 8009266:	4641      	mov	r1, r8
 8009268:	4628      	mov	r0, r5
 800926a:	d107      	bne.n	800927c <_dtoa_r+0xb04>
 800926c:	f000 f9c6 	bl	80095fc <__multadd>
 8009270:	4680      	mov	r8, r0
 8009272:	4606      	mov	r6, r0
 8009274:	9b08      	ldr	r3, [sp, #32]
 8009276:	3301      	adds	r3, #1
 8009278:	9308      	str	r3, [sp, #32]
 800927a:	e775      	b.n	8009168 <_dtoa_r+0x9f0>
 800927c:	f000 f9be 	bl	80095fc <__multadd>
 8009280:	4631      	mov	r1, r6
 8009282:	4680      	mov	r8, r0
 8009284:	2300      	movs	r3, #0
 8009286:	220a      	movs	r2, #10
 8009288:	4628      	mov	r0, r5
 800928a:	f000 f9b7 	bl	80095fc <__multadd>
 800928e:	4606      	mov	r6, r0
 8009290:	e7f0      	b.n	8009274 <_dtoa_r+0xafc>
 8009292:	9b08      	ldr	r3, [sp, #32]
 8009294:	9306      	str	r3, [sp, #24]
 8009296:	9f03      	ldr	r7, [sp, #12]
 8009298:	4621      	mov	r1, r4
 800929a:	4650      	mov	r0, sl
 800929c:	f7ff f9e0 	bl	8008660 <quorem>
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80092a6:	f807 9b01 	strb.w	r9, [r7], #1
 80092aa:	1afa      	subs	r2, r7, r3
 80092ac:	9b06      	ldr	r3, [sp, #24]
 80092ae:	4293      	cmp	r3, r2
 80092b0:	dd07      	ble.n	80092c2 <_dtoa_r+0xb4a>
 80092b2:	4651      	mov	r1, sl
 80092b4:	2300      	movs	r3, #0
 80092b6:	220a      	movs	r2, #10
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 f99f 	bl	80095fc <__multadd>
 80092be:	4682      	mov	sl, r0
 80092c0:	e7ea      	b.n	8009298 <_dtoa_r+0xb20>
 80092c2:	9b06      	ldr	r3, [sp, #24]
 80092c4:	f04f 0800 	mov.w	r8, #0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	bfcc      	ite	gt
 80092cc:	461f      	movgt	r7, r3
 80092ce:	2701      	movle	r7, #1
 80092d0:	9b03      	ldr	r3, [sp, #12]
 80092d2:	441f      	add	r7, r3
 80092d4:	4651      	mov	r1, sl
 80092d6:	2201      	movs	r2, #1
 80092d8:	4628      	mov	r0, r5
 80092da:	f000 fb85 	bl	80099e8 <__lshift>
 80092de:	4621      	mov	r1, r4
 80092e0:	4682      	mov	sl, r0
 80092e2:	f000 fbed 	bl	8009ac0 <__mcmp>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	dc97      	bgt.n	800921a <_dtoa_r+0xaa2>
 80092ea:	d102      	bne.n	80092f2 <_dtoa_r+0xb7a>
 80092ec:	f019 0f01 	tst.w	r9, #1
 80092f0:	d193      	bne.n	800921a <_dtoa_r+0xaa2>
 80092f2:	463b      	mov	r3, r7
 80092f4:	461f      	mov	r7, r3
 80092f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092fa:	2a30      	cmp	r2, #48	; 0x30
 80092fc:	d0fa      	beq.n	80092f4 <_dtoa_r+0xb7c>
 80092fe:	e6e1      	b.n	80090c4 <_dtoa_r+0x94c>
 8009300:	9a03      	ldr	r2, [sp, #12]
 8009302:	429a      	cmp	r2, r3
 8009304:	d18a      	bne.n	800921c <_dtoa_r+0xaa4>
 8009306:	2331      	movs	r3, #49	; 0x31
 8009308:	f10b 0b01 	add.w	fp, fp, #1
 800930c:	e797      	b.n	800923e <_dtoa_r+0xac6>
 800930e:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <_dtoa_r+0xbc0>)
 8009310:	f7ff ba9f 	b.w	8008852 <_dtoa_r+0xda>
 8009314:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009316:	2b00      	cmp	r3, #0
 8009318:	f47f aa77 	bne.w	800880a <_dtoa_r+0x92>
 800931c:	4b07      	ldr	r3, [pc, #28]	; (800933c <_dtoa_r+0xbc4>)
 800931e:	f7ff ba98 	b.w	8008852 <_dtoa_r+0xda>
 8009322:	9b06      	ldr	r3, [sp, #24]
 8009324:	2b00      	cmp	r3, #0
 8009326:	dcb6      	bgt.n	8009296 <_dtoa_r+0xb1e>
 8009328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800932a:	2b02      	cmp	r3, #2
 800932c:	f73f aeb5 	bgt.w	800909a <_dtoa_r+0x922>
 8009330:	e7b1      	b.n	8009296 <_dtoa_r+0xb1e>
 8009332:	bf00      	nop
 8009334:	0800bf91 	.word	0x0800bf91
 8009338:	0800beec 	.word	0x0800beec
 800933c:	0800bf15 	.word	0x0800bf15

08009340 <_free_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4605      	mov	r5, r0
 8009344:	2900      	cmp	r1, #0
 8009346:	d040      	beq.n	80093ca <_free_r+0x8a>
 8009348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800934c:	1f0c      	subs	r4, r1, #4
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfb8      	it	lt
 8009352:	18e4      	addlt	r4, r4, r3
 8009354:	f000 f8e4 	bl	8009520 <__malloc_lock>
 8009358:	4a1c      	ldr	r2, [pc, #112]	; (80093cc <_free_r+0x8c>)
 800935a:	6813      	ldr	r3, [r2, #0]
 800935c:	b933      	cbnz	r3, 800936c <_free_r+0x2c>
 800935e:	6063      	str	r3, [r4, #4]
 8009360:	6014      	str	r4, [r2, #0]
 8009362:	4628      	mov	r0, r5
 8009364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009368:	f000 b8e0 	b.w	800952c <__malloc_unlock>
 800936c:	42a3      	cmp	r3, r4
 800936e:	d908      	bls.n	8009382 <_free_r+0x42>
 8009370:	6820      	ldr	r0, [r4, #0]
 8009372:	1821      	adds	r1, r4, r0
 8009374:	428b      	cmp	r3, r1
 8009376:	bf01      	itttt	eq
 8009378:	6819      	ldreq	r1, [r3, #0]
 800937a:	685b      	ldreq	r3, [r3, #4]
 800937c:	1809      	addeq	r1, r1, r0
 800937e:	6021      	streq	r1, [r4, #0]
 8009380:	e7ed      	b.n	800935e <_free_r+0x1e>
 8009382:	461a      	mov	r2, r3
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	b10b      	cbz	r3, 800938c <_free_r+0x4c>
 8009388:	42a3      	cmp	r3, r4
 800938a:	d9fa      	bls.n	8009382 <_free_r+0x42>
 800938c:	6811      	ldr	r1, [r2, #0]
 800938e:	1850      	adds	r0, r2, r1
 8009390:	42a0      	cmp	r0, r4
 8009392:	d10b      	bne.n	80093ac <_free_r+0x6c>
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	4401      	add	r1, r0
 8009398:	1850      	adds	r0, r2, r1
 800939a:	4283      	cmp	r3, r0
 800939c:	6011      	str	r1, [r2, #0]
 800939e:	d1e0      	bne.n	8009362 <_free_r+0x22>
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	4408      	add	r0, r1
 80093a6:	6010      	str	r0, [r2, #0]
 80093a8:	6053      	str	r3, [r2, #4]
 80093aa:	e7da      	b.n	8009362 <_free_r+0x22>
 80093ac:	d902      	bls.n	80093b4 <_free_r+0x74>
 80093ae:	230c      	movs	r3, #12
 80093b0:	602b      	str	r3, [r5, #0]
 80093b2:	e7d6      	b.n	8009362 <_free_r+0x22>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	1821      	adds	r1, r4, r0
 80093b8:	428b      	cmp	r3, r1
 80093ba:	bf01      	itttt	eq
 80093bc:	6819      	ldreq	r1, [r3, #0]
 80093be:	685b      	ldreq	r3, [r3, #4]
 80093c0:	1809      	addeq	r1, r1, r0
 80093c2:	6021      	streq	r1, [r4, #0]
 80093c4:	6063      	str	r3, [r4, #4]
 80093c6:	6054      	str	r4, [r2, #4]
 80093c8:	e7cb      	b.n	8009362 <_free_r+0x22>
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	200014bc 	.word	0x200014bc

080093d0 <malloc>:
 80093d0:	4b02      	ldr	r3, [pc, #8]	; (80093dc <malloc+0xc>)
 80093d2:	4601      	mov	r1, r0
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	f000 b823 	b.w	8009420 <_malloc_r>
 80093da:	bf00      	nop
 80093dc:	20000074 	.word	0x20000074

080093e0 <sbrk_aligned>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	4e0e      	ldr	r6, [pc, #56]	; (800941c <sbrk_aligned+0x3c>)
 80093e4:	460c      	mov	r4, r1
 80093e6:	6831      	ldr	r1, [r6, #0]
 80093e8:	4605      	mov	r5, r0
 80093ea:	b911      	cbnz	r1, 80093f2 <sbrk_aligned+0x12>
 80093ec:	f001 fd8c 	bl	800af08 <_sbrk_r>
 80093f0:	6030      	str	r0, [r6, #0]
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f001 fd87 	bl	800af08 <_sbrk_r>
 80093fa:	1c43      	adds	r3, r0, #1
 80093fc:	d00a      	beq.n	8009414 <sbrk_aligned+0x34>
 80093fe:	1cc4      	adds	r4, r0, #3
 8009400:	f024 0403 	bic.w	r4, r4, #3
 8009404:	42a0      	cmp	r0, r4
 8009406:	d007      	beq.n	8009418 <sbrk_aligned+0x38>
 8009408:	1a21      	subs	r1, r4, r0
 800940a:	4628      	mov	r0, r5
 800940c:	f001 fd7c 	bl	800af08 <_sbrk_r>
 8009410:	3001      	adds	r0, #1
 8009412:	d101      	bne.n	8009418 <sbrk_aligned+0x38>
 8009414:	f04f 34ff 	mov.w	r4, #4294967295
 8009418:	4620      	mov	r0, r4
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	200014c0 	.word	0x200014c0

08009420 <_malloc_r>:
 8009420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009424:	1ccd      	adds	r5, r1, #3
 8009426:	f025 0503 	bic.w	r5, r5, #3
 800942a:	3508      	adds	r5, #8
 800942c:	2d0c      	cmp	r5, #12
 800942e:	bf38      	it	cc
 8009430:	250c      	movcc	r5, #12
 8009432:	2d00      	cmp	r5, #0
 8009434:	4607      	mov	r7, r0
 8009436:	db01      	blt.n	800943c <_malloc_r+0x1c>
 8009438:	42a9      	cmp	r1, r5
 800943a:	d905      	bls.n	8009448 <_malloc_r+0x28>
 800943c:	230c      	movs	r3, #12
 800943e:	2600      	movs	r6, #0
 8009440:	603b      	str	r3, [r7, #0]
 8009442:	4630      	mov	r0, r6
 8009444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009448:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800951c <_malloc_r+0xfc>
 800944c:	f000 f868 	bl	8009520 <__malloc_lock>
 8009450:	f8d8 3000 	ldr.w	r3, [r8]
 8009454:	461c      	mov	r4, r3
 8009456:	bb5c      	cbnz	r4, 80094b0 <_malloc_r+0x90>
 8009458:	4629      	mov	r1, r5
 800945a:	4638      	mov	r0, r7
 800945c:	f7ff ffc0 	bl	80093e0 <sbrk_aligned>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	4604      	mov	r4, r0
 8009464:	d155      	bne.n	8009512 <_malloc_r+0xf2>
 8009466:	f8d8 4000 	ldr.w	r4, [r8]
 800946a:	4626      	mov	r6, r4
 800946c:	2e00      	cmp	r6, #0
 800946e:	d145      	bne.n	80094fc <_malloc_r+0xdc>
 8009470:	2c00      	cmp	r4, #0
 8009472:	d048      	beq.n	8009506 <_malloc_r+0xe6>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	4631      	mov	r1, r6
 8009478:	4638      	mov	r0, r7
 800947a:	eb04 0903 	add.w	r9, r4, r3
 800947e:	f001 fd43 	bl	800af08 <_sbrk_r>
 8009482:	4581      	cmp	r9, r0
 8009484:	d13f      	bne.n	8009506 <_malloc_r+0xe6>
 8009486:	6821      	ldr	r1, [r4, #0]
 8009488:	4638      	mov	r0, r7
 800948a:	1a6d      	subs	r5, r5, r1
 800948c:	4629      	mov	r1, r5
 800948e:	f7ff ffa7 	bl	80093e0 <sbrk_aligned>
 8009492:	3001      	adds	r0, #1
 8009494:	d037      	beq.n	8009506 <_malloc_r+0xe6>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	442b      	add	r3, r5
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	f8d8 3000 	ldr.w	r3, [r8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d038      	beq.n	8009516 <_malloc_r+0xf6>
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	42a2      	cmp	r2, r4
 80094a8:	d12b      	bne.n	8009502 <_malloc_r+0xe2>
 80094aa:	2200      	movs	r2, #0
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	e00f      	b.n	80094d0 <_malloc_r+0xb0>
 80094b0:	6822      	ldr	r2, [r4, #0]
 80094b2:	1b52      	subs	r2, r2, r5
 80094b4:	d41f      	bmi.n	80094f6 <_malloc_r+0xd6>
 80094b6:	2a0b      	cmp	r2, #11
 80094b8:	d917      	bls.n	80094ea <_malloc_r+0xca>
 80094ba:	1961      	adds	r1, r4, r5
 80094bc:	42a3      	cmp	r3, r4
 80094be:	6025      	str	r5, [r4, #0]
 80094c0:	bf18      	it	ne
 80094c2:	6059      	strne	r1, [r3, #4]
 80094c4:	6863      	ldr	r3, [r4, #4]
 80094c6:	bf08      	it	eq
 80094c8:	f8c8 1000 	streq.w	r1, [r8]
 80094cc:	5162      	str	r2, [r4, r5]
 80094ce:	604b      	str	r3, [r1, #4]
 80094d0:	4638      	mov	r0, r7
 80094d2:	f104 060b 	add.w	r6, r4, #11
 80094d6:	f000 f829 	bl	800952c <__malloc_unlock>
 80094da:	f026 0607 	bic.w	r6, r6, #7
 80094de:	1d23      	adds	r3, r4, #4
 80094e0:	1af2      	subs	r2, r6, r3
 80094e2:	d0ae      	beq.n	8009442 <_malloc_r+0x22>
 80094e4:	1b9b      	subs	r3, r3, r6
 80094e6:	50a3      	str	r3, [r4, r2]
 80094e8:	e7ab      	b.n	8009442 <_malloc_r+0x22>
 80094ea:	42a3      	cmp	r3, r4
 80094ec:	6862      	ldr	r2, [r4, #4]
 80094ee:	d1dd      	bne.n	80094ac <_malloc_r+0x8c>
 80094f0:	f8c8 2000 	str.w	r2, [r8]
 80094f4:	e7ec      	b.n	80094d0 <_malloc_r+0xb0>
 80094f6:	4623      	mov	r3, r4
 80094f8:	6864      	ldr	r4, [r4, #4]
 80094fa:	e7ac      	b.n	8009456 <_malloc_r+0x36>
 80094fc:	4634      	mov	r4, r6
 80094fe:	6876      	ldr	r6, [r6, #4]
 8009500:	e7b4      	b.n	800946c <_malloc_r+0x4c>
 8009502:	4613      	mov	r3, r2
 8009504:	e7cc      	b.n	80094a0 <_malloc_r+0x80>
 8009506:	230c      	movs	r3, #12
 8009508:	4638      	mov	r0, r7
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	f000 f80e 	bl	800952c <__malloc_unlock>
 8009510:	e797      	b.n	8009442 <_malloc_r+0x22>
 8009512:	6025      	str	r5, [r4, #0]
 8009514:	e7dc      	b.n	80094d0 <_malloc_r+0xb0>
 8009516:	605b      	str	r3, [r3, #4]
 8009518:	deff      	udf	#255	; 0xff
 800951a:	bf00      	nop
 800951c:	200014bc 	.word	0x200014bc

08009520 <__malloc_lock>:
 8009520:	4801      	ldr	r0, [pc, #4]	; (8009528 <__malloc_lock+0x8>)
 8009522:	f7ff b87a 	b.w	800861a <__retarget_lock_acquire_recursive>
 8009526:	bf00      	nop
 8009528:	200014b8 	.word	0x200014b8

0800952c <__malloc_unlock>:
 800952c:	4801      	ldr	r0, [pc, #4]	; (8009534 <__malloc_unlock+0x8>)
 800952e:	f7ff b875 	b.w	800861c <__retarget_lock_release_recursive>
 8009532:	bf00      	nop
 8009534:	200014b8 	.word	0x200014b8

08009538 <_Balloc>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	69c6      	ldr	r6, [r0, #28]
 800953c:	4604      	mov	r4, r0
 800953e:	460d      	mov	r5, r1
 8009540:	b976      	cbnz	r6, 8009560 <_Balloc+0x28>
 8009542:	2010      	movs	r0, #16
 8009544:	f7ff ff44 	bl	80093d0 <malloc>
 8009548:	4602      	mov	r2, r0
 800954a:	61e0      	str	r0, [r4, #28]
 800954c:	b920      	cbnz	r0, 8009558 <_Balloc+0x20>
 800954e:	216b      	movs	r1, #107	; 0x6b
 8009550:	4b17      	ldr	r3, [pc, #92]	; (80095b0 <_Balloc+0x78>)
 8009552:	4818      	ldr	r0, [pc, #96]	; (80095b4 <_Balloc+0x7c>)
 8009554:	f001 fcee 	bl	800af34 <__assert_func>
 8009558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800955c:	6006      	str	r6, [r0, #0]
 800955e:	60c6      	str	r6, [r0, #12]
 8009560:	69e6      	ldr	r6, [r4, #28]
 8009562:	68f3      	ldr	r3, [r6, #12]
 8009564:	b183      	cbz	r3, 8009588 <_Balloc+0x50>
 8009566:	69e3      	ldr	r3, [r4, #28]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800956e:	b9b8      	cbnz	r0, 80095a0 <_Balloc+0x68>
 8009570:	2101      	movs	r1, #1
 8009572:	fa01 f605 	lsl.w	r6, r1, r5
 8009576:	1d72      	adds	r2, r6, #5
 8009578:	4620      	mov	r0, r4
 800957a:	0092      	lsls	r2, r2, #2
 800957c:	f001 fcf8 	bl	800af70 <_calloc_r>
 8009580:	b160      	cbz	r0, 800959c <_Balloc+0x64>
 8009582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009586:	e00e      	b.n	80095a6 <_Balloc+0x6e>
 8009588:	2221      	movs	r2, #33	; 0x21
 800958a:	2104      	movs	r1, #4
 800958c:	4620      	mov	r0, r4
 800958e:	f001 fcef 	bl	800af70 <_calloc_r>
 8009592:	69e3      	ldr	r3, [r4, #28]
 8009594:	60f0      	str	r0, [r6, #12]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e4      	bne.n	8009566 <_Balloc+0x2e>
 800959c:	2000      	movs	r0, #0
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	6802      	ldr	r2, [r0, #0]
 80095a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095a6:	2300      	movs	r3, #0
 80095a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095ac:	e7f7      	b.n	800959e <_Balloc+0x66>
 80095ae:	bf00      	nop
 80095b0:	0800bf22 	.word	0x0800bf22
 80095b4:	0800bfa2 	.word	0x0800bfa2

080095b8 <_Bfree>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	69c6      	ldr	r6, [r0, #28]
 80095bc:	4605      	mov	r5, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	b976      	cbnz	r6, 80095e0 <_Bfree+0x28>
 80095c2:	2010      	movs	r0, #16
 80095c4:	f7ff ff04 	bl	80093d0 <malloc>
 80095c8:	4602      	mov	r2, r0
 80095ca:	61e8      	str	r0, [r5, #28]
 80095cc:	b920      	cbnz	r0, 80095d8 <_Bfree+0x20>
 80095ce:	218f      	movs	r1, #143	; 0x8f
 80095d0:	4b08      	ldr	r3, [pc, #32]	; (80095f4 <_Bfree+0x3c>)
 80095d2:	4809      	ldr	r0, [pc, #36]	; (80095f8 <_Bfree+0x40>)
 80095d4:	f001 fcae 	bl	800af34 <__assert_func>
 80095d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095dc:	6006      	str	r6, [r0, #0]
 80095de:	60c6      	str	r6, [r0, #12]
 80095e0:	b13c      	cbz	r4, 80095f2 <_Bfree+0x3a>
 80095e2:	69eb      	ldr	r3, [r5, #28]
 80095e4:	6862      	ldr	r2, [r4, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095ec:	6021      	str	r1, [r4, #0]
 80095ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	0800bf22 	.word	0x0800bf22
 80095f8:	0800bfa2 	.word	0x0800bfa2

080095fc <__multadd>:
 80095fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009600:	4607      	mov	r7, r0
 8009602:	460c      	mov	r4, r1
 8009604:	461e      	mov	r6, r3
 8009606:	2000      	movs	r0, #0
 8009608:	690d      	ldr	r5, [r1, #16]
 800960a:	f101 0c14 	add.w	ip, r1, #20
 800960e:	f8dc 3000 	ldr.w	r3, [ip]
 8009612:	3001      	adds	r0, #1
 8009614:	b299      	uxth	r1, r3
 8009616:	fb02 6101 	mla	r1, r2, r1, r6
 800961a:	0c1e      	lsrs	r6, r3, #16
 800961c:	0c0b      	lsrs	r3, r1, #16
 800961e:	fb02 3306 	mla	r3, r2, r6, r3
 8009622:	b289      	uxth	r1, r1
 8009624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009628:	4285      	cmp	r5, r0
 800962a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800962e:	f84c 1b04 	str.w	r1, [ip], #4
 8009632:	dcec      	bgt.n	800960e <__multadd+0x12>
 8009634:	b30e      	cbz	r6, 800967a <__multadd+0x7e>
 8009636:	68a3      	ldr	r3, [r4, #8]
 8009638:	42ab      	cmp	r3, r5
 800963a:	dc19      	bgt.n	8009670 <__multadd+0x74>
 800963c:	6861      	ldr	r1, [r4, #4]
 800963e:	4638      	mov	r0, r7
 8009640:	3101      	adds	r1, #1
 8009642:	f7ff ff79 	bl	8009538 <_Balloc>
 8009646:	4680      	mov	r8, r0
 8009648:	b928      	cbnz	r0, 8009656 <__multadd+0x5a>
 800964a:	4602      	mov	r2, r0
 800964c:	21ba      	movs	r1, #186	; 0xba
 800964e:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <__multadd+0x84>)
 8009650:	480c      	ldr	r0, [pc, #48]	; (8009684 <__multadd+0x88>)
 8009652:	f001 fc6f 	bl	800af34 <__assert_func>
 8009656:	6922      	ldr	r2, [r4, #16]
 8009658:	f104 010c 	add.w	r1, r4, #12
 800965c:	3202      	adds	r2, #2
 800965e:	0092      	lsls	r2, r2, #2
 8009660:	300c      	adds	r0, #12
 8009662:	f7fe ffea 	bl	800863a <memcpy>
 8009666:	4621      	mov	r1, r4
 8009668:	4638      	mov	r0, r7
 800966a:	f7ff ffa5 	bl	80095b8 <_Bfree>
 800966e:	4644      	mov	r4, r8
 8009670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009674:	3501      	adds	r5, #1
 8009676:	615e      	str	r6, [r3, #20]
 8009678:	6125      	str	r5, [r4, #16]
 800967a:	4620      	mov	r0, r4
 800967c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009680:	0800bf91 	.word	0x0800bf91
 8009684:	0800bfa2 	.word	0x0800bfa2

08009688 <__s2b>:
 8009688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800968c:	4615      	mov	r5, r2
 800968e:	2209      	movs	r2, #9
 8009690:	461f      	mov	r7, r3
 8009692:	3308      	adds	r3, #8
 8009694:	460c      	mov	r4, r1
 8009696:	fb93 f3f2 	sdiv	r3, r3, r2
 800969a:	4606      	mov	r6, r0
 800969c:	2201      	movs	r2, #1
 800969e:	2100      	movs	r1, #0
 80096a0:	429a      	cmp	r2, r3
 80096a2:	db09      	blt.n	80096b8 <__s2b+0x30>
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7ff ff47 	bl	8009538 <_Balloc>
 80096aa:	b940      	cbnz	r0, 80096be <__s2b+0x36>
 80096ac:	4602      	mov	r2, r0
 80096ae:	21d3      	movs	r1, #211	; 0xd3
 80096b0:	4b18      	ldr	r3, [pc, #96]	; (8009714 <__s2b+0x8c>)
 80096b2:	4819      	ldr	r0, [pc, #100]	; (8009718 <__s2b+0x90>)
 80096b4:	f001 fc3e 	bl	800af34 <__assert_func>
 80096b8:	0052      	lsls	r2, r2, #1
 80096ba:	3101      	adds	r1, #1
 80096bc:	e7f0      	b.n	80096a0 <__s2b+0x18>
 80096be:	9b08      	ldr	r3, [sp, #32]
 80096c0:	2d09      	cmp	r5, #9
 80096c2:	6143      	str	r3, [r0, #20]
 80096c4:	f04f 0301 	mov.w	r3, #1
 80096c8:	6103      	str	r3, [r0, #16]
 80096ca:	dd16      	ble.n	80096fa <__s2b+0x72>
 80096cc:	f104 0909 	add.w	r9, r4, #9
 80096d0:	46c8      	mov	r8, r9
 80096d2:	442c      	add	r4, r5
 80096d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096d8:	4601      	mov	r1, r0
 80096da:	220a      	movs	r2, #10
 80096dc:	4630      	mov	r0, r6
 80096de:	3b30      	subs	r3, #48	; 0x30
 80096e0:	f7ff ff8c 	bl	80095fc <__multadd>
 80096e4:	45a0      	cmp	r8, r4
 80096e6:	d1f5      	bne.n	80096d4 <__s2b+0x4c>
 80096e8:	f1a5 0408 	sub.w	r4, r5, #8
 80096ec:	444c      	add	r4, r9
 80096ee:	1b2d      	subs	r5, r5, r4
 80096f0:	1963      	adds	r3, r4, r5
 80096f2:	42bb      	cmp	r3, r7
 80096f4:	db04      	blt.n	8009700 <__s2b+0x78>
 80096f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096fa:	2509      	movs	r5, #9
 80096fc:	340a      	adds	r4, #10
 80096fe:	e7f6      	b.n	80096ee <__s2b+0x66>
 8009700:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009704:	4601      	mov	r1, r0
 8009706:	220a      	movs	r2, #10
 8009708:	4630      	mov	r0, r6
 800970a:	3b30      	subs	r3, #48	; 0x30
 800970c:	f7ff ff76 	bl	80095fc <__multadd>
 8009710:	e7ee      	b.n	80096f0 <__s2b+0x68>
 8009712:	bf00      	nop
 8009714:	0800bf91 	.word	0x0800bf91
 8009718:	0800bfa2 	.word	0x0800bfa2

0800971c <__hi0bits>:
 800971c:	0c02      	lsrs	r2, r0, #16
 800971e:	0412      	lsls	r2, r2, #16
 8009720:	4603      	mov	r3, r0
 8009722:	b9ca      	cbnz	r2, 8009758 <__hi0bits+0x3c>
 8009724:	0403      	lsls	r3, r0, #16
 8009726:	2010      	movs	r0, #16
 8009728:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800972c:	bf04      	itt	eq
 800972e:	021b      	lsleq	r3, r3, #8
 8009730:	3008      	addeq	r0, #8
 8009732:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009736:	bf04      	itt	eq
 8009738:	011b      	lsleq	r3, r3, #4
 800973a:	3004      	addeq	r0, #4
 800973c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009740:	bf04      	itt	eq
 8009742:	009b      	lsleq	r3, r3, #2
 8009744:	3002      	addeq	r0, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	db05      	blt.n	8009756 <__hi0bits+0x3a>
 800974a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800974e:	f100 0001 	add.w	r0, r0, #1
 8009752:	bf08      	it	eq
 8009754:	2020      	moveq	r0, #32
 8009756:	4770      	bx	lr
 8009758:	2000      	movs	r0, #0
 800975a:	e7e5      	b.n	8009728 <__hi0bits+0xc>

0800975c <__lo0bits>:
 800975c:	6803      	ldr	r3, [r0, #0]
 800975e:	4602      	mov	r2, r0
 8009760:	f013 0007 	ands.w	r0, r3, #7
 8009764:	d00b      	beq.n	800977e <__lo0bits+0x22>
 8009766:	07d9      	lsls	r1, r3, #31
 8009768:	d421      	bmi.n	80097ae <__lo0bits+0x52>
 800976a:	0798      	lsls	r0, r3, #30
 800976c:	bf49      	itett	mi
 800976e:	085b      	lsrmi	r3, r3, #1
 8009770:	089b      	lsrpl	r3, r3, #2
 8009772:	2001      	movmi	r0, #1
 8009774:	6013      	strmi	r3, [r2, #0]
 8009776:	bf5c      	itt	pl
 8009778:	2002      	movpl	r0, #2
 800977a:	6013      	strpl	r3, [r2, #0]
 800977c:	4770      	bx	lr
 800977e:	b299      	uxth	r1, r3
 8009780:	b909      	cbnz	r1, 8009786 <__lo0bits+0x2a>
 8009782:	2010      	movs	r0, #16
 8009784:	0c1b      	lsrs	r3, r3, #16
 8009786:	b2d9      	uxtb	r1, r3
 8009788:	b909      	cbnz	r1, 800978e <__lo0bits+0x32>
 800978a:	3008      	adds	r0, #8
 800978c:	0a1b      	lsrs	r3, r3, #8
 800978e:	0719      	lsls	r1, r3, #28
 8009790:	bf04      	itt	eq
 8009792:	091b      	lsreq	r3, r3, #4
 8009794:	3004      	addeq	r0, #4
 8009796:	0799      	lsls	r1, r3, #30
 8009798:	bf04      	itt	eq
 800979a:	089b      	lsreq	r3, r3, #2
 800979c:	3002      	addeq	r0, #2
 800979e:	07d9      	lsls	r1, r3, #31
 80097a0:	d403      	bmi.n	80097aa <__lo0bits+0x4e>
 80097a2:	085b      	lsrs	r3, r3, #1
 80097a4:	f100 0001 	add.w	r0, r0, #1
 80097a8:	d003      	beq.n	80097b2 <__lo0bits+0x56>
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	4770      	bx	lr
 80097ae:	2000      	movs	r0, #0
 80097b0:	4770      	bx	lr
 80097b2:	2020      	movs	r0, #32
 80097b4:	4770      	bx	lr
	...

080097b8 <__i2b>:
 80097b8:	b510      	push	{r4, lr}
 80097ba:	460c      	mov	r4, r1
 80097bc:	2101      	movs	r1, #1
 80097be:	f7ff febb 	bl	8009538 <_Balloc>
 80097c2:	4602      	mov	r2, r0
 80097c4:	b928      	cbnz	r0, 80097d2 <__i2b+0x1a>
 80097c6:	f240 1145 	movw	r1, #325	; 0x145
 80097ca:	4b04      	ldr	r3, [pc, #16]	; (80097dc <__i2b+0x24>)
 80097cc:	4804      	ldr	r0, [pc, #16]	; (80097e0 <__i2b+0x28>)
 80097ce:	f001 fbb1 	bl	800af34 <__assert_func>
 80097d2:	2301      	movs	r3, #1
 80097d4:	6144      	str	r4, [r0, #20]
 80097d6:	6103      	str	r3, [r0, #16]
 80097d8:	bd10      	pop	{r4, pc}
 80097da:	bf00      	nop
 80097dc:	0800bf91 	.word	0x0800bf91
 80097e0:	0800bfa2 	.word	0x0800bfa2

080097e4 <__multiply>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	4691      	mov	r9, r2
 80097ea:	690a      	ldr	r2, [r1, #16]
 80097ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097f0:	460c      	mov	r4, r1
 80097f2:	429a      	cmp	r2, r3
 80097f4:	bfbe      	ittt	lt
 80097f6:	460b      	movlt	r3, r1
 80097f8:	464c      	movlt	r4, r9
 80097fa:	4699      	movlt	r9, r3
 80097fc:	6927      	ldr	r7, [r4, #16]
 80097fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009802:	68a3      	ldr	r3, [r4, #8]
 8009804:	6861      	ldr	r1, [r4, #4]
 8009806:	eb07 060a 	add.w	r6, r7, sl
 800980a:	42b3      	cmp	r3, r6
 800980c:	b085      	sub	sp, #20
 800980e:	bfb8      	it	lt
 8009810:	3101      	addlt	r1, #1
 8009812:	f7ff fe91 	bl	8009538 <_Balloc>
 8009816:	b930      	cbnz	r0, 8009826 <__multiply+0x42>
 8009818:	4602      	mov	r2, r0
 800981a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800981e:	4b43      	ldr	r3, [pc, #268]	; (800992c <__multiply+0x148>)
 8009820:	4843      	ldr	r0, [pc, #268]	; (8009930 <__multiply+0x14c>)
 8009822:	f001 fb87 	bl	800af34 <__assert_func>
 8009826:	f100 0514 	add.w	r5, r0, #20
 800982a:	462b      	mov	r3, r5
 800982c:	2200      	movs	r2, #0
 800982e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009832:	4543      	cmp	r3, r8
 8009834:	d321      	bcc.n	800987a <__multiply+0x96>
 8009836:	f104 0314 	add.w	r3, r4, #20
 800983a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800983e:	f109 0314 	add.w	r3, r9, #20
 8009842:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009846:	9202      	str	r2, [sp, #8]
 8009848:	1b3a      	subs	r2, r7, r4
 800984a:	3a15      	subs	r2, #21
 800984c:	f022 0203 	bic.w	r2, r2, #3
 8009850:	3204      	adds	r2, #4
 8009852:	f104 0115 	add.w	r1, r4, #21
 8009856:	428f      	cmp	r7, r1
 8009858:	bf38      	it	cc
 800985a:	2204      	movcc	r2, #4
 800985c:	9201      	str	r2, [sp, #4]
 800985e:	9a02      	ldr	r2, [sp, #8]
 8009860:	9303      	str	r3, [sp, #12]
 8009862:	429a      	cmp	r2, r3
 8009864:	d80c      	bhi.n	8009880 <__multiply+0x9c>
 8009866:	2e00      	cmp	r6, #0
 8009868:	dd03      	ble.n	8009872 <__multiply+0x8e>
 800986a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800986e:	2b00      	cmp	r3, #0
 8009870:	d05a      	beq.n	8009928 <__multiply+0x144>
 8009872:	6106      	str	r6, [r0, #16]
 8009874:	b005      	add	sp, #20
 8009876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987a:	f843 2b04 	str.w	r2, [r3], #4
 800987e:	e7d8      	b.n	8009832 <__multiply+0x4e>
 8009880:	f8b3 a000 	ldrh.w	sl, [r3]
 8009884:	f1ba 0f00 	cmp.w	sl, #0
 8009888:	d023      	beq.n	80098d2 <__multiply+0xee>
 800988a:	46a9      	mov	r9, r5
 800988c:	f04f 0c00 	mov.w	ip, #0
 8009890:	f104 0e14 	add.w	lr, r4, #20
 8009894:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009898:	f8d9 1000 	ldr.w	r1, [r9]
 800989c:	fa1f fb82 	uxth.w	fp, r2
 80098a0:	b289      	uxth	r1, r1
 80098a2:	fb0a 110b 	mla	r1, sl, fp, r1
 80098a6:	4461      	add	r1, ip
 80098a8:	f8d9 c000 	ldr.w	ip, [r9]
 80098ac:	0c12      	lsrs	r2, r2, #16
 80098ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80098b2:	fb0a c202 	mla	r2, sl, r2, ip
 80098b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098ba:	b289      	uxth	r1, r1
 80098bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098c0:	4577      	cmp	r7, lr
 80098c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098c6:	f849 1b04 	str.w	r1, [r9], #4
 80098ca:	d8e3      	bhi.n	8009894 <__multiply+0xb0>
 80098cc:	9a01      	ldr	r2, [sp, #4]
 80098ce:	f845 c002 	str.w	ip, [r5, r2]
 80098d2:	9a03      	ldr	r2, [sp, #12]
 80098d4:	3304      	adds	r3, #4
 80098d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098da:	f1b9 0f00 	cmp.w	r9, #0
 80098de:	d021      	beq.n	8009924 <__multiply+0x140>
 80098e0:	46ae      	mov	lr, r5
 80098e2:	f04f 0a00 	mov.w	sl, #0
 80098e6:	6829      	ldr	r1, [r5, #0]
 80098e8:	f104 0c14 	add.w	ip, r4, #20
 80098ec:	f8bc b000 	ldrh.w	fp, [ip]
 80098f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098f4:	b289      	uxth	r1, r1
 80098f6:	fb09 220b 	mla	r2, r9, fp, r2
 80098fa:	4452      	add	r2, sl
 80098fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009900:	f84e 1b04 	str.w	r1, [lr], #4
 8009904:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009908:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800990c:	f8be 1000 	ldrh.w	r1, [lr]
 8009910:	4567      	cmp	r7, ip
 8009912:	fb09 110a 	mla	r1, r9, sl, r1
 8009916:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800991a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800991e:	d8e5      	bhi.n	80098ec <__multiply+0x108>
 8009920:	9a01      	ldr	r2, [sp, #4]
 8009922:	50a9      	str	r1, [r5, r2]
 8009924:	3504      	adds	r5, #4
 8009926:	e79a      	b.n	800985e <__multiply+0x7a>
 8009928:	3e01      	subs	r6, #1
 800992a:	e79c      	b.n	8009866 <__multiply+0x82>
 800992c:	0800bf91 	.word	0x0800bf91
 8009930:	0800bfa2 	.word	0x0800bfa2

08009934 <__pow5mult>:
 8009934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009938:	4615      	mov	r5, r2
 800993a:	f012 0203 	ands.w	r2, r2, #3
 800993e:	4606      	mov	r6, r0
 8009940:	460f      	mov	r7, r1
 8009942:	d007      	beq.n	8009954 <__pow5mult+0x20>
 8009944:	4c25      	ldr	r4, [pc, #148]	; (80099dc <__pow5mult+0xa8>)
 8009946:	3a01      	subs	r2, #1
 8009948:	2300      	movs	r3, #0
 800994a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800994e:	f7ff fe55 	bl	80095fc <__multadd>
 8009952:	4607      	mov	r7, r0
 8009954:	10ad      	asrs	r5, r5, #2
 8009956:	d03d      	beq.n	80099d4 <__pow5mult+0xa0>
 8009958:	69f4      	ldr	r4, [r6, #28]
 800995a:	b97c      	cbnz	r4, 800997c <__pow5mult+0x48>
 800995c:	2010      	movs	r0, #16
 800995e:	f7ff fd37 	bl	80093d0 <malloc>
 8009962:	4602      	mov	r2, r0
 8009964:	61f0      	str	r0, [r6, #28]
 8009966:	b928      	cbnz	r0, 8009974 <__pow5mult+0x40>
 8009968:	f240 11b3 	movw	r1, #435	; 0x1b3
 800996c:	4b1c      	ldr	r3, [pc, #112]	; (80099e0 <__pow5mult+0xac>)
 800996e:	481d      	ldr	r0, [pc, #116]	; (80099e4 <__pow5mult+0xb0>)
 8009970:	f001 fae0 	bl	800af34 <__assert_func>
 8009974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009978:	6004      	str	r4, [r0, #0]
 800997a:	60c4      	str	r4, [r0, #12]
 800997c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009984:	b94c      	cbnz	r4, 800999a <__pow5mult+0x66>
 8009986:	f240 2171 	movw	r1, #625	; 0x271
 800998a:	4630      	mov	r0, r6
 800998c:	f7ff ff14 	bl	80097b8 <__i2b>
 8009990:	2300      	movs	r3, #0
 8009992:	4604      	mov	r4, r0
 8009994:	f8c8 0008 	str.w	r0, [r8, #8]
 8009998:	6003      	str	r3, [r0, #0]
 800999a:	f04f 0900 	mov.w	r9, #0
 800999e:	07eb      	lsls	r3, r5, #31
 80099a0:	d50a      	bpl.n	80099b8 <__pow5mult+0x84>
 80099a2:	4639      	mov	r1, r7
 80099a4:	4622      	mov	r2, r4
 80099a6:	4630      	mov	r0, r6
 80099a8:	f7ff ff1c 	bl	80097e4 <__multiply>
 80099ac:	4680      	mov	r8, r0
 80099ae:	4639      	mov	r1, r7
 80099b0:	4630      	mov	r0, r6
 80099b2:	f7ff fe01 	bl	80095b8 <_Bfree>
 80099b6:	4647      	mov	r7, r8
 80099b8:	106d      	asrs	r5, r5, #1
 80099ba:	d00b      	beq.n	80099d4 <__pow5mult+0xa0>
 80099bc:	6820      	ldr	r0, [r4, #0]
 80099be:	b938      	cbnz	r0, 80099d0 <__pow5mult+0x9c>
 80099c0:	4622      	mov	r2, r4
 80099c2:	4621      	mov	r1, r4
 80099c4:	4630      	mov	r0, r6
 80099c6:	f7ff ff0d 	bl	80097e4 <__multiply>
 80099ca:	6020      	str	r0, [r4, #0]
 80099cc:	f8c0 9000 	str.w	r9, [r0]
 80099d0:	4604      	mov	r4, r0
 80099d2:	e7e4      	b.n	800999e <__pow5mult+0x6a>
 80099d4:	4638      	mov	r0, r7
 80099d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099da:	bf00      	nop
 80099dc:	0800c0f0 	.word	0x0800c0f0
 80099e0:	0800bf22 	.word	0x0800bf22
 80099e4:	0800bfa2 	.word	0x0800bfa2

080099e8 <__lshift>:
 80099e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	460c      	mov	r4, r1
 80099ee:	4607      	mov	r7, r0
 80099f0:	4691      	mov	r9, r2
 80099f2:	6923      	ldr	r3, [r4, #16]
 80099f4:	6849      	ldr	r1, [r1, #4]
 80099f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099fa:	68a3      	ldr	r3, [r4, #8]
 80099fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a00:	f108 0601 	add.w	r6, r8, #1
 8009a04:	42b3      	cmp	r3, r6
 8009a06:	db0b      	blt.n	8009a20 <__lshift+0x38>
 8009a08:	4638      	mov	r0, r7
 8009a0a:	f7ff fd95 	bl	8009538 <_Balloc>
 8009a0e:	4605      	mov	r5, r0
 8009a10:	b948      	cbnz	r0, 8009a26 <__lshift+0x3e>
 8009a12:	4602      	mov	r2, r0
 8009a14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009a18:	4b27      	ldr	r3, [pc, #156]	; (8009ab8 <__lshift+0xd0>)
 8009a1a:	4828      	ldr	r0, [pc, #160]	; (8009abc <__lshift+0xd4>)
 8009a1c:	f001 fa8a 	bl	800af34 <__assert_func>
 8009a20:	3101      	adds	r1, #1
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	e7ee      	b.n	8009a04 <__lshift+0x1c>
 8009a26:	2300      	movs	r3, #0
 8009a28:	f100 0114 	add.w	r1, r0, #20
 8009a2c:	f100 0210 	add.w	r2, r0, #16
 8009a30:	4618      	mov	r0, r3
 8009a32:	4553      	cmp	r3, sl
 8009a34:	db33      	blt.n	8009a9e <__lshift+0xb6>
 8009a36:	6920      	ldr	r0, [r4, #16]
 8009a38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a3c:	f104 0314 	add.w	r3, r4, #20
 8009a40:	f019 091f 	ands.w	r9, r9, #31
 8009a44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a4c:	d02b      	beq.n	8009aa6 <__lshift+0xbe>
 8009a4e:	468a      	mov	sl, r1
 8009a50:	2200      	movs	r2, #0
 8009a52:	f1c9 0e20 	rsb	lr, r9, #32
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	fa00 f009 	lsl.w	r0, r0, r9
 8009a5c:	4310      	orrs	r0, r2
 8009a5e:	f84a 0b04 	str.w	r0, [sl], #4
 8009a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a66:	459c      	cmp	ip, r3
 8009a68:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a6c:	d8f3      	bhi.n	8009a56 <__lshift+0x6e>
 8009a6e:	ebac 0304 	sub.w	r3, ip, r4
 8009a72:	3b15      	subs	r3, #21
 8009a74:	f023 0303 	bic.w	r3, r3, #3
 8009a78:	3304      	adds	r3, #4
 8009a7a:	f104 0015 	add.w	r0, r4, #21
 8009a7e:	4584      	cmp	ip, r0
 8009a80:	bf38      	it	cc
 8009a82:	2304      	movcc	r3, #4
 8009a84:	50ca      	str	r2, [r1, r3]
 8009a86:	b10a      	cbz	r2, 8009a8c <__lshift+0xa4>
 8009a88:	f108 0602 	add.w	r6, r8, #2
 8009a8c:	3e01      	subs	r6, #1
 8009a8e:	4638      	mov	r0, r7
 8009a90:	4621      	mov	r1, r4
 8009a92:	612e      	str	r6, [r5, #16]
 8009a94:	f7ff fd90 	bl	80095b8 <_Bfree>
 8009a98:	4628      	mov	r0, r5
 8009a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	e7c5      	b.n	8009a32 <__lshift+0x4a>
 8009aa6:	3904      	subs	r1, #4
 8009aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aac:	459c      	cmp	ip, r3
 8009aae:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ab2:	d8f9      	bhi.n	8009aa8 <__lshift+0xc0>
 8009ab4:	e7ea      	b.n	8009a8c <__lshift+0xa4>
 8009ab6:	bf00      	nop
 8009ab8:	0800bf91 	.word	0x0800bf91
 8009abc:	0800bfa2 	.word	0x0800bfa2

08009ac0 <__mcmp>:
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	690a      	ldr	r2, [r1, #16]
 8009ac4:	6900      	ldr	r0, [r0, #16]
 8009ac6:	b530      	push	{r4, r5, lr}
 8009ac8:	1a80      	subs	r0, r0, r2
 8009aca:	d10d      	bne.n	8009ae8 <__mcmp+0x28>
 8009acc:	3314      	adds	r3, #20
 8009ace:	3114      	adds	r1, #20
 8009ad0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ad4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ad8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009adc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ae0:	4295      	cmp	r5, r2
 8009ae2:	d002      	beq.n	8009aea <__mcmp+0x2a>
 8009ae4:	d304      	bcc.n	8009af0 <__mcmp+0x30>
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	bd30      	pop	{r4, r5, pc}
 8009aea:	42a3      	cmp	r3, r4
 8009aec:	d3f4      	bcc.n	8009ad8 <__mcmp+0x18>
 8009aee:	e7fb      	b.n	8009ae8 <__mcmp+0x28>
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	e7f8      	b.n	8009ae8 <__mcmp+0x28>
	...

08009af8 <__mdiff>:
 8009af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	460d      	mov	r5, r1
 8009afe:	4607      	mov	r7, r0
 8009b00:	4611      	mov	r1, r2
 8009b02:	4628      	mov	r0, r5
 8009b04:	4614      	mov	r4, r2
 8009b06:	f7ff ffdb 	bl	8009ac0 <__mcmp>
 8009b0a:	1e06      	subs	r6, r0, #0
 8009b0c:	d111      	bne.n	8009b32 <__mdiff+0x3a>
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff fd11 	bl	8009538 <_Balloc>
 8009b16:	4602      	mov	r2, r0
 8009b18:	b928      	cbnz	r0, 8009b26 <__mdiff+0x2e>
 8009b1a:	f240 2137 	movw	r1, #567	; 0x237
 8009b1e:	4b3a      	ldr	r3, [pc, #232]	; (8009c08 <__mdiff+0x110>)
 8009b20:	483a      	ldr	r0, [pc, #232]	; (8009c0c <__mdiff+0x114>)
 8009b22:	f001 fa07 	bl	800af34 <__assert_func>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b32:	bfa4      	itt	ge
 8009b34:	4623      	movge	r3, r4
 8009b36:	462c      	movge	r4, r5
 8009b38:	4638      	mov	r0, r7
 8009b3a:	6861      	ldr	r1, [r4, #4]
 8009b3c:	bfa6      	itte	ge
 8009b3e:	461d      	movge	r5, r3
 8009b40:	2600      	movge	r6, #0
 8009b42:	2601      	movlt	r6, #1
 8009b44:	f7ff fcf8 	bl	8009538 <_Balloc>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	b918      	cbnz	r0, 8009b54 <__mdiff+0x5c>
 8009b4c:	f240 2145 	movw	r1, #581	; 0x245
 8009b50:	4b2d      	ldr	r3, [pc, #180]	; (8009c08 <__mdiff+0x110>)
 8009b52:	e7e5      	b.n	8009b20 <__mdiff+0x28>
 8009b54:	f102 0814 	add.w	r8, r2, #20
 8009b58:	46c2      	mov	sl, r8
 8009b5a:	f04f 0c00 	mov.w	ip, #0
 8009b5e:	6927      	ldr	r7, [r4, #16]
 8009b60:	60c6      	str	r6, [r0, #12]
 8009b62:	692e      	ldr	r6, [r5, #16]
 8009b64:	f104 0014 	add.w	r0, r4, #20
 8009b68:	f105 0914 	add.w	r9, r5, #20
 8009b6c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009b70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b74:	3410      	adds	r4, #16
 8009b76:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009b7a:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b7e:	fa1f f18b 	uxth.w	r1, fp
 8009b82:	4461      	add	r1, ip
 8009b84:	fa1f fc83 	uxth.w	ip, r3
 8009b88:	0c1b      	lsrs	r3, r3, #16
 8009b8a:	eba1 010c 	sub.w	r1, r1, ip
 8009b8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b96:	b289      	uxth	r1, r1
 8009b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009b9c:	454e      	cmp	r6, r9
 8009b9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009ba2:	f84a 1b04 	str.w	r1, [sl], #4
 8009ba6:	d8e6      	bhi.n	8009b76 <__mdiff+0x7e>
 8009ba8:	1b73      	subs	r3, r6, r5
 8009baa:	3b15      	subs	r3, #21
 8009bac:	f023 0303 	bic.w	r3, r3, #3
 8009bb0:	3515      	adds	r5, #21
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	42ae      	cmp	r6, r5
 8009bb6:	bf38      	it	cc
 8009bb8:	2304      	movcc	r3, #4
 8009bba:	4418      	add	r0, r3
 8009bbc:	4443      	add	r3, r8
 8009bbe:	461e      	mov	r6, r3
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	4575      	cmp	r5, lr
 8009bc4:	d30e      	bcc.n	8009be4 <__mdiff+0xec>
 8009bc6:	f10e 0103 	add.w	r1, lr, #3
 8009bca:	1a09      	subs	r1, r1, r0
 8009bcc:	f021 0103 	bic.w	r1, r1, #3
 8009bd0:	3803      	subs	r0, #3
 8009bd2:	4586      	cmp	lr, r0
 8009bd4:	bf38      	it	cc
 8009bd6:	2100      	movcc	r1, #0
 8009bd8:	440b      	add	r3, r1
 8009bda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bde:	b189      	cbz	r1, 8009c04 <__mdiff+0x10c>
 8009be0:	6117      	str	r7, [r2, #16]
 8009be2:	e7a3      	b.n	8009b2c <__mdiff+0x34>
 8009be4:	f855 8b04 	ldr.w	r8, [r5], #4
 8009be8:	fa1f f188 	uxth.w	r1, r8
 8009bec:	4461      	add	r1, ip
 8009bee:	140c      	asrs	r4, r1, #16
 8009bf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009bf4:	b289      	uxth	r1, r1
 8009bf6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009bfa:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009bfe:	f846 1b04 	str.w	r1, [r6], #4
 8009c02:	e7de      	b.n	8009bc2 <__mdiff+0xca>
 8009c04:	3f01      	subs	r7, #1
 8009c06:	e7e8      	b.n	8009bda <__mdiff+0xe2>
 8009c08:	0800bf91 	.word	0x0800bf91
 8009c0c:	0800bfa2 	.word	0x0800bfa2

08009c10 <__ulp>:
 8009c10:	4b0e      	ldr	r3, [pc, #56]	; (8009c4c <__ulp+0x3c>)
 8009c12:	400b      	ands	r3, r1
 8009c14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	dc08      	bgt.n	8009c2e <__ulp+0x1e>
 8009c1c:	425b      	negs	r3, r3
 8009c1e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009c22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c26:	da04      	bge.n	8009c32 <__ulp+0x22>
 8009c28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c2c:	4113      	asrs	r3, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	e008      	b.n	8009c44 <__ulp+0x34>
 8009c32:	f1a2 0314 	sub.w	r3, r2, #20
 8009c36:	2b1e      	cmp	r3, #30
 8009c38:	bfd6      	itet	le
 8009c3a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009c3e:	2201      	movgt	r2, #1
 8009c40:	40da      	lsrle	r2, r3
 8009c42:	2300      	movs	r3, #0
 8009c44:	4619      	mov	r1, r3
 8009c46:	4610      	mov	r0, r2
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	7ff00000 	.word	0x7ff00000

08009c50 <__b2d>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	6905      	ldr	r5, [r0, #16]
 8009c54:	f100 0714 	add.w	r7, r0, #20
 8009c58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009c5c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009c60:	1f2e      	subs	r6, r5, #4
 8009c62:	4620      	mov	r0, r4
 8009c64:	f7ff fd5a 	bl	800971c <__hi0bits>
 8009c68:	f1c0 0220 	rsb	r2, r0, #32
 8009c6c:	280a      	cmp	r0, #10
 8009c6e:	4603      	mov	r3, r0
 8009c70:	f8df c068 	ldr.w	ip, [pc, #104]	; 8009cdc <__b2d+0x8c>
 8009c74:	600a      	str	r2, [r1, #0]
 8009c76:	dc12      	bgt.n	8009c9e <__b2d+0x4e>
 8009c78:	f1c0 0e0b 	rsb	lr, r0, #11
 8009c7c:	fa24 f20e 	lsr.w	r2, r4, lr
 8009c80:	42b7      	cmp	r7, r6
 8009c82:	ea42 010c 	orr.w	r1, r2, ip
 8009c86:	bf2c      	ite	cs
 8009c88:	2200      	movcs	r2, #0
 8009c8a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009c8e:	3315      	adds	r3, #21
 8009c90:	fa04 f303 	lsl.w	r3, r4, r3
 8009c94:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9e:	42b7      	cmp	r7, r6
 8009ca0:	bf2e      	itee	cs
 8009ca2:	2200      	movcs	r2, #0
 8009ca4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009ca8:	f1a5 0608 	subcc.w	r6, r5, #8
 8009cac:	3b0b      	subs	r3, #11
 8009cae:	d012      	beq.n	8009cd6 <__b2d+0x86>
 8009cb0:	f1c3 0520 	rsb	r5, r3, #32
 8009cb4:	fa22 f105 	lsr.w	r1, r2, r5
 8009cb8:	409c      	lsls	r4, r3
 8009cba:	430c      	orrs	r4, r1
 8009cbc:	42be      	cmp	r6, r7
 8009cbe:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8009cc2:	bf94      	ite	ls
 8009cc4:	2400      	movls	r4, #0
 8009cc6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009cca:	409a      	lsls	r2, r3
 8009ccc:	40ec      	lsrs	r4, r5
 8009cce:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009cd2:	4322      	orrs	r2, r4
 8009cd4:	e7e1      	b.n	8009c9a <__b2d+0x4a>
 8009cd6:	ea44 010c 	orr.w	r1, r4, ip
 8009cda:	e7de      	b.n	8009c9a <__b2d+0x4a>
 8009cdc:	3ff00000 	.word	0x3ff00000

08009ce0 <__d2b>:
 8009ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	4617      	mov	r7, r2
 8009ce6:	461c      	mov	r4, r3
 8009ce8:	9e08      	ldr	r6, [sp, #32]
 8009cea:	f7ff fc25 	bl	8009538 <_Balloc>
 8009cee:	4605      	mov	r5, r0
 8009cf0:	b930      	cbnz	r0, 8009d00 <__d2b+0x20>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	f240 310f 	movw	r1, #783	; 0x30f
 8009cf8:	4b22      	ldr	r3, [pc, #136]	; (8009d84 <__d2b+0xa4>)
 8009cfa:	4823      	ldr	r0, [pc, #140]	; (8009d88 <__d2b+0xa8>)
 8009cfc:	f001 f91a 	bl	800af34 <__assert_func>
 8009d00:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009d04:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009d08:	bb24      	cbnz	r4, 8009d54 <__d2b+0x74>
 8009d0a:	2f00      	cmp	r7, #0
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	d026      	beq.n	8009d5e <__d2b+0x7e>
 8009d10:	4668      	mov	r0, sp
 8009d12:	9700      	str	r7, [sp, #0]
 8009d14:	f7ff fd22 	bl	800975c <__lo0bits>
 8009d18:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d1c:	b1e8      	cbz	r0, 8009d5a <__d2b+0x7a>
 8009d1e:	f1c0 0320 	rsb	r3, r0, #32
 8009d22:	fa02 f303 	lsl.w	r3, r2, r3
 8009d26:	430b      	orrs	r3, r1
 8009d28:	40c2      	lsrs	r2, r0
 8009d2a:	616b      	str	r3, [r5, #20]
 8009d2c:	9201      	str	r2, [sp, #4]
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	bf14      	ite	ne
 8009d34:	2102      	movne	r1, #2
 8009d36:	2101      	moveq	r1, #1
 8009d38:	61ab      	str	r3, [r5, #24]
 8009d3a:	6129      	str	r1, [r5, #16]
 8009d3c:	b1bc      	cbz	r4, 8009d6e <__d2b+0x8e>
 8009d3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009d42:	4404      	add	r4, r0
 8009d44:	6034      	str	r4, [r6, #0]
 8009d46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4c:	6018      	str	r0, [r3, #0]
 8009d4e:	4628      	mov	r0, r5
 8009d50:	b003      	add	sp, #12
 8009d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d58:	e7d7      	b.n	8009d0a <__d2b+0x2a>
 8009d5a:	6169      	str	r1, [r5, #20]
 8009d5c:	e7e7      	b.n	8009d2e <__d2b+0x4e>
 8009d5e:	a801      	add	r0, sp, #4
 8009d60:	f7ff fcfc 	bl	800975c <__lo0bits>
 8009d64:	9b01      	ldr	r3, [sp, #4]
 8009d66:	2101      	movs	r1, #1
 8009d68:	616b      	str	r3, [r5, #20]
 8009d6a:	3020      	adds	r0, #32
 8009d6c:	e7e5      	b.n	8009d3a <__d2b+0x5a>
 8009d6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d72:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009d76:	6030      	str	r0, [r6, #0]
 8009d78:	6918      	ldr	r0, [r3, #16]
 8009d7a:	f7ff fccf 	bl	800971c <__hi0bits>
 8009d7e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009d82:	e7e2      	b.n	8009d4a <__d2b+0x6a>
 8009d84:	0800bf91 	.word	0x0800bf91
 8009d88:	0800bfa2 	.word	0x0800bfa2

08009d8c <__ratio>:
 8009d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	4688      	mov	r8, r1
 8009d92:	4669      	mov	r1, sp
 8009d94:	4681      	mov	r9, r0
 8009d96:	f7ff ff5b 	bl	8009c50 <__b2d>
 8009d9a:	460f      	mov	r7, r1
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	460d      	mov	r5, r1
 8009da0:	4640      	mov	r0, r8
 8009da2:	a901      	add	r1, sp, #4
 8009da4:	f7ff ff54 	bl	8009c50 <__b2d>
 8009da8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009db0:	468b      	mov	fp, r1
 8009db2:	eba3 0c02 	sub.w	ip, r3, r2
 8009db6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dba:	1a9b      	subs	r3, r3, r2
 8009dbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	bfd5      	itete	le
 8009dc4:	460a      	movle	r2, r1
 8009dc6:	462a      	movgt	r2, r5
 8009dc8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009dcc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009dd0:	bfd8      	it	le
 8009dd2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009dd6:	465b      	mov	r3, fp
 8009dd8:	4602      	mov	r2, r0
 8009dda:	4639      	mov	r1, r7
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f7f6 fca5 	bl	800072c <__aeabi_ddiv>
 8009de2:	b003      	add	sp, #12
 8009de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009de8 <__copybits>:
 8009de8:	3901      	subs	r1, #1
 8009dea:	b570      	push	{r4, r5, r6, lr}
 8009dec:	1149      	asrs	r1, r1, #5
 8009dee:	6914      	ldr	r4, [r2, #16]
 8009df0:	3101      	adds	r1, #1
 8009df2:	f102 0314 	add.w	r3, r2, #20
 8009df6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009dfa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009dfe:	1f05      	subs	r5, r0, #4
 8009e00:	42a3      	cmp	r3, r4
 8009e02:	d30c      	bcc.n	8009e1e <__copybits+0x36>
 8009e04:	1aa3      	subs	r3, r4, r2
 8009e06:	3b11      	subs	r3, #17
 8009e08:	f023 0303 	bic.w	r3, r3, #3
 8009e0c:	3211      	adds	r2, #17
 8009e0e:	42a2      	cmp	r2, r4
 8009e10:	bf88      	it	hi
 8009e12:	2300      	movhi	r3, #0
 8009e14:	4418      	add	r0, r3
 8009e16:	2300      	movs	r3, #0
 8009e18:	4288      	cmp	r0, r1
 8009e1a:	d305      	bcc.n	8009e28 <__copybits+0x40>
 8009e1c:	bd70      	pop	{r4, r5, r6, pc}
 8009e1e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e22:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e26:	e7eb      	b.n	8009e00 <__copybits+0x18>
 8009e28:	f840 3b04 	str.w	r3, [r0], #4
 8009e2c:	e7f4      	b.n	8009e18 <__copybits+0x30>

08009e2e <__any_on>:
 8009e2e:	f100 0214 	add.w	r2, r0, #20
 8009e32:	6900      	ldr	r0, [r0, #16]
 8009e34:	114b      	asrs	r3, r1, #5
 8009e36:	4298      	cmp	r0, r3
 8009e38:	b510      	push	{r4, lr}
 8009e3a:	db11      	blt.n	8009e60 <__any_on+0x32>
 8009e3c:	dd0a      	ble.n	8009e54 <__any_on+0x26>
 8009e3e:	f011 011f 	ands.w	r1, r1, #31
 8009e42:	d007      	beq.n	8009e54 <__any_on+0x26>
 8009e44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e48:	fa24 f001 	lsr.w	r0, r4, r1
 8009e4c:	fa00 f101 	lsl.w	r1, r0, r1
 8009e50:	428c      	cmp	r4, r1
 8009e52:	d10b      	bne.n	8009e6c <__any_on+0x3e>
 8009e54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d803      	bhi.n	8009e64 <__any_on+0x36>
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	bd10      	pop	{r4, pc}
 8009e60:	4603      	mov	r3, r0
 8009e62:	e7f7      	b.n	8009e54 <__any_on+0x26>
 8009e64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	d0f5      	beq.n	8009e58 <__any_on+0x2a>
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	e7f6      	b.n	8009e5e <__any_on+0x30>

08009e70 <sulp>:
 8009e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e74:	460f      	mov	r7, r1
 8009e76:	4690      	mov	r8, r2
 8009e78:	f7ff feca 	bl	8009c10 <__ulp>
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	460d      	mov	r5, r1
 8009e80:	f1b8 0f00 	cmp.w	r8, #0
 8009e84:	d011      	beq.n	8009eaa <sulp+0x3a>
 8009e86:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009e8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	dd0b      	ble.n	8009eaa <sulp+0x3a>
 8009e92:	2400      	movs	r4, #0
 8009e94:	051b      	lsls	r3, r3, #20
 8009e96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009e9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009e9e:	4622      	mov	r2, r4
 8009ea0:	462b      	mov	r3, r5
 8009ea2:	f7f6 fb19 	bl	80004d8 <__aeabi_dmul>
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4629      	mov	r1, r5
 8009eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb2:	0000      	movs	r0, r0
 8009eb4:	0000      	movs	r0, r0
	...

08009eb8 <_strtod_l>:
 8009eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	b09f      	sub	sp, #124	; 0x7c
 8009ebe:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	921a      	str	r2, [sp, #104]	; 0x68
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	f04f 0800 	mov.w	r8, #0
 8009ecc:	f04f 0900 	mov.w	r9, #0
 8009ed0:	460a      	mov	r2, r1
 8009ed2:	9219      	str	r2, [sp, #100]	; 0x64
 8009ed4:	7811      	ldrb	r1, [r2, #0]
 8009ed6:	292b      	cmp	r1, #43	; 0x2b
 8009ed8:	d04a      	beq.n	8009f70 <_strtod_l+0xb8>
 8009eda:	d838      	bhi.n	8009f4e <_strtod_l+0x96>
 8009edc:	290d      	cmp	r1, #13
 8009ede:	d832      	bhi.n	8009f46 <_strtod_l+0x8e>
 8009ee0:	2908      	cmp	r1, #8
 8009ee2:	d832      	bhi.n	8009f4a <_strtod_l+0x92>
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	d03b      	beq.n	8009f60 <_strtod_l+0xa8>
 8009ee8:	2200      	movs	r2, #0
 8009eea:	920e      	str	r2, [sp, #56]	; 0x38
 8009eec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009eee:	7832      	ldrb	r2, [r6, #0]
 8009ef0:	2a30      	cmp	r2, #48	; 0x30
 8009ef2:	f040 80b2 	bne.w	800a05a <_strtod_l+0x1a2>
 8009ef6:	7872      	ldrb	r2, [r6, #1]
 8009ef8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009efc:	2a58      	cmp	r2, #88	; 0x58
 8009efe:	d16e      	bne.n	8009fde <_strtod_l+0x126>
 8009f00:	9302      	str	r3, [sp, #8]
 8009f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f04:	4620      	mov	r0, r4
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	ab1a      	add	r3, sp, #104	; 0x68
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	4a8c      	ldr	r2, [pc, #560]	; (800a140 <_strtod_l+0x288>)
 8009f0e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009f10:	a919      	add	r1, sp, #100	; 0x64
 8009f12:	f001 f8a9 	bl	800b068 <__gethex>
 8009f16:	f010 070f 	ands.w	r7, r0, #15
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	d005      	beq.n	8009f2a <_strtod_l+0x72>
 8009f1e:	2f06      	cmp	r7, #6
 8009f20:	d128      	bne.n	8009f74 <_strtod_l+0xbc>
 8009f22:	2300      	movs	r3, #0
 8009f24:	3601      	adds	r6, #1
 8009f26:	9619      	str	r6, [sp, #100]	; 0x64
 8009f28:	930e      	str	r3, [sp, #56]	; 0x38
 8009f2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f040 85a0 	bne.w	800aa72 <_strtod_l+0xbba>
 8009f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f34:	b1cb      	cbz	r3, 8009f6a <_strtod_l+0xb2>
 8009f36:	4642      	mov	r2, r8
 8009f38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	b01f      	add	sp, #124	; 0x7c
 8009f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f46:	2920      	cmp	r1, #32
 8009f48:	d1ce      	bne.n	8009ee8 <_strtod_l+0x30>
 8009f4a:	3201      	adds	r2, #1
 8009f4c:	e7c1      	b.n	8009ed2 <_strtod_l+0x1a>
 8009f4e:	292d      	cmp	r1, #45	; 0x2d
 8009f50:	d1ca      	bne.n	8009ee8 <_strtod_l+0x30>
 8009f52:	2101      	movs	r1, #1
 8009f54:	910e      	str	r1, [sp, #56]	; 0x38
 8009f56:	1c51      	adds	r1, r2, #1
 8009f58:	9119      	str	r1, [sp, #100]	; 0x64
 8009f5a:	7852      	ldrb	r2, [r2, #1]
 8009f5c:	2a00      	cmp	r2, #0
 8009f5e:	d1c5      	bne.n	8009eec <_strtod_l+0x34>
 8009f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f62:	9519      	str	r5, [sp, #100]	; 0x64
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f040 8582 	bne.w	800aa6e <_strtod_l+0xbb6>
 8009f6a:	4642      	mov	r2, r8
 8009f6c:	464b      	mov	r3, r9
 8009f6e:	e7e5      	b.n	8009f3c <_strtod_l+0x84>
 8009f70:	2100      	movs	r1, #0
 8009f72:	e7ef      	b.n	8009f54 <_strtod_l+0x9c>
 8009f74:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f76:	b13a      	cbz	r2, 8009f88 <_strtod_l+0xd0>
 8009f78:	2135      	movs	r1, #53	; 0x35
 8009f7a:	a81c      	add	r0, sp, #112	; 0x70
 8009f7c:	f7ff ff34 	bl	8009de8 <__copybits>
 8009f80:	4620      	mov	r0, r4
 8009f82:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f84:	f7ff fb18 	bl	80095b8 <_Bfree>
 8009f88:	3f01      	subs	r7, #1
 8009f8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009f8c:	2f04      	cmp	r7, #4
 8009f8e:	d806      	bhi.n	8009f9e <_strtod_l+0xe6>
 8009f90:	e8df f007 	tbb	[pc, r7]
 8009f94:	201d0314 	.word	0x201d0314
 8009f98:	14          	.byte	0x14
 8009f99:	00          	.byte	0x00
 8009f9a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009f9e:	05e9      	lsls	r1, r5, #23
 8009fa0:	bf48      	it	mi
 8009fa2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009fa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009faa:	0d1b      	lsrs	r3, r3, #20
 8009fac:	051b      	lsls	r3, r3, #20
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1bb      	bne.n	8009f2a <_strtod_l+0x72>
 8009fb2:	f7fe fb07 	bl	80085c4 <__errno>
 8009fb6:	2322      	movs	r3, #34	; 0x22
 8009fb8:	6003      	str	r3, [r0, #0]
 8009fba:	e7b6      	b.n	8009f2a <_strtod_l+0x72>
 8009fbc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009fc0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009fc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009fc8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009fcc:	e7e7      	b.n	8009f9e <_strtod_l+0xe6>
 8009fce:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a144 <_strtod_l+0x28c>
 8009fd2:	e7e4      	b.n	8009f9e <_strtod_l+0xe6>
 8009fd4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009fd8:	f04f 38ff 	mov.w	r8, #4294967295
 8009fdc:	e7df      	b.n	8009f9e <_strtod_l+0xe6>
 8009fde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	9219      	str	r2, [sp, #100]	; 0x64
 8009fe4:	785b      	ldrb	r3, [r3, #1]
 8009fe6:	2b30      	cmp	r3, #48	; 0x30
 8009fe8:	d0f9      	beq.n	8009fde <_strtod_l+0x126>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d09d      	beq.n	8009f2a <_strtod_l+0x72>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f04f 0a00 	mov.w	sl, #0
 8009ff4:	220a      	movs	r2, #10
 8009ff6:	46d3      	mov	fp, sl
 8009ff8:	9305      	str	r3, [sp, #20]
 8009ffa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ffc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800a000:	930b      	str	r3, [sp, #44]	; 0x2c
 800a002:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a004:	7806      	ldrb	r6, [r0, #0]
 800a006:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a00a:	b2d9      	uxtb	r1, r3
 800a00c:	2909      	cmp	r1, #9
 800a00e:	d926      	bls.n	800a05e <_strtod_l+0x1a6>
 800a010:	2201      	movs	r2, #1
 800a012:	494d      	ldr	r1, [pc, #308]	; (800a148 <_strtod_l+0x290>)
 800a014:	f000 ff66 	bl	800aee4 <strncmp>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d030      	beq.n	800a07e <_strtod_l+0x1c6>
 800a01c:	2000      	movs	r0, #0
 800a01e:	4632      	mov	r2, r6
 800a020:	4603      	mov	r3, r0
 800a022:	465e      	mov	r6, fp
 800a024:	9008      	str	r0, [sp, #32]
 800a026:	2a65      	cmp	r2, #101	; 0x65
 800a028:	d001      	beq.n	800a02e <_strtod_l+0x176>
 800a02a:	2a45      	cmp	r2, #69	; 0x45
 800a02c:	d113      	bne.n	800a056 <_strtod_l+0x19e>
 800a02e:	b91e      	cbnz	r6, 800a038 <_strtod_l+0x180>
 800a030:	9a05      	ldr	r2, [sp, #20]
 800a032:	4302      	orrs	r2, r0
 800a034:	d094      	beq.n	8009f60 <_strtod_l+0xa8>
 800a036:	2600      	movs	r6, #0
 800a038:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a03a:	1c6a      	adds	r2, r5, #1
 800a03c:	9219      	str	r2, [sp, #100]	; 0x64
 800a03e:	786a      	ldrb	r2, [r5, #1]
 800a040:	2a2b      	cmp	r2, #43	; 0x2b
 800a042:	d074      	beq.n	800a12e <_strtod_l+0x276>
 800a044:	2a2d      	cmp	r2, #45	; 0x2d
 800a046:	d078      	beq.n	800a13a <_strtod_l+0x282>
 800a048:	f04f 0c00 	mov.w	ip, #0
 800a04c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a050:	2909      	cmp	r1, #9
 800a052:	d97f      	bls.n	800a154 <_strtod_l+0x29c>
 800a054:	9519      	str	r5, [sp, #100]	; 0x64
 800a056:	2700      	movs	r7, #0
 800a058:	e09e      	b.n	800a198 <_strtod_l+0x2e0>
 800a05a:	2300      	movs	r3, #0
 800a05c:	e7c8      	b.n	8009ff0 <_strtod_l+0x138>
 800a05e:	f1bb 0f08 	cmp.w	fp, #8
 800a062:	bfd8      	it	le
 800a064:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800a066:	f100 0001 	add.w	r0, r0, #1
 800a06a:	bfd6      	itet	le
 800a06c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a070:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a074:	930a      	strle	r3, [sp, #40]	; 0x28
 800a076:	f10b 0b01 	add.w	fp, fp, #1
 800a07a:	9019      	str	r0, [sp, #100]	; 0x64
 800a07c:	e7c1      	b.n	800a002 <_strtod_l+0x14a>
 800a07e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	9219      	str	r2, [sp, #100]	; 0x64
 800a084:	785a      	ldrb	r2, [r3, #1]
 800a086:	f1bb 0f00 	cmp.w	fp, #0
 800a08a:	d037      	beq.n	800a0fc <_strtod_l+0x244>
 800a08c:	465e      	mov	r6, fp
 800a08e:	9008      	str	r0, [sp, #32]
 800a090:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a094:	2b09      	cmp	r3, #9
 800a096:	d912      	bls.n	800a0be <_strtod_l+0x206>
 800a098:	2301      	movs	r3, #1
 800a09a:	e7c4      	b.n	800a026 <_strtod_l+0x16e>
 800a09c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a09e:	3001      	adds	r0, #1
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	9219      	str	r2, [sp, #100]	; 0x64
 800a0a4:	785a      	ldrb	r2, [r3, #1]
 800a0a6:	2a30      	cmp	r2, #48	; 0x30
 800a0a8:	d0f8      	beq.n	800a09c <_strtod_l+0x1e4>
 800a0aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a0ae:	2b08      	cmp	r3, #8
 800a0b0:	f200 84e4 	bhi.w	800aa7c <_strtod_l+0xbc4>
 800a0b4:	9008      	str	r0, [sp, #32]
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0be:	3a30      	subs	r2, #48	; 0x30
 800a0c0:	f100 0301 	add.w	r3, r0, #1
 800a0c4:	d014      	beq.n	800a0f0 <_strtod_l+0x238>
 800a0c6:	9908      	ldr	r1, [sp, #32]
 800a0c8:	eb00 0c06 	add.w	ip, r0, r6
 800a0cc:	4419      	add	r1, r3
 800a0ce:	9108      	str	r1, [sp, #32]
 800a0d0:	4633      	mov	r3, r6
 800a0d2:	210a      	movs	r1, #10
 800a0d4:	4563      	cmp	r3, ip
 800a0d6:	d113      	bne.n	800a100 <_strtod_l+0x248>
 800a0d8:	1833      	adds	r3, r6, r0
 800a0da:	2b08      	cmp	r3, #8
 800a0dc:	f106 0601 	add.w	r6, r6, #1
 800a0e0:	4406      	add	r6, r0
 800a0e2:	dc1a      	bgt.n	800a11a <_strtod_l+0x262>
 800a0e4:	230a      	movs	r3, #10
 800a0e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0e8:	fb03 2301 	mla	r3, r3, r1, r2
 800a0ec:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	1c51      	adds	r1, r2, #1
 800a0f6:	9119      	str	r1, [sp, #100]	; 0x64
 800a0f8:	7852      	ldrb	r2, [r2, #1]
 800a0fa:	e7c9      	b.n	800a090 <_strtod_l+0x1d8>
 800a0fc:	4658      	mov	r0, fp
 800a0fe:	e7d2      	b.n	800a0a6 <_strtod_l+0x1ee>
 800a100:	2b08      	cmp	r3, #8
 800a102:	f103 0301 	add.w	r3, r3, #1
 800a106:	dc03      	bgt.n	800a110 <_strtod_l+0x258>
 800a108:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a10a:	434f      	muls	r7, r1
 800a10c:	970a      	str	r7, [sp, #40]	; 0x28
 800a10e:	e7e1      	b.n	800a0d4 <_strtod_l+0x21c>
 800a110:	2b10      	cmp	r3, #16
 800a112:	bfd8      	it	le
 800a114:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a118:	e7dc      	b.n	800a0d4 <_strtod_l+0x21c>
 800a11a:	2e10      	cmp	r6, #16
 800a11c:	bfdc      	itt	le
 800a11e:	230a      	movle	r3, #10
 800a120:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a124:	e7e3      	b.n	800a0ee <_strtod_l+0x236>
 800a126:	2300      	movs	r3, #0
 800a128:	9308      	str	r3, [sp, #32]
 800a12a:	2301      	movs	r3, #1
 800a12c:	e780      	b.n	800a030 <_strtod_l+0x178>
 800a12e:	f04f 0c00 	mov.w	ip, #0
 800a132:	1caa      	adds	r2, r5, #2
 800a134:	9219      	str	r2, [sp, #100]	; 0x64
 800a136:	78aa      	ldrb	r2, [r5, #2]
 800a138:	e788      	b.n	800a04c <_strtod_l+0x194>
 800a13a:	f04f 0c01 	mov.w	ip, #1
 800a13e:	e7f8      	b.n	800a132 <_strtod_l+0x27a>
 800a140:	0800c100 	.word	0x0800c100
 800a144:	7ff00000 	.word	0x7ff00000
 800a148:	0800c0fc 	.word	0x0800c0fc
 800a14c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a14e:	1c51      	adds	r1, r2, #1
 800a150:	9119      	str	r1, [sp, #100]	; 0x64
 800a152:	7852      	ldrb	r2, [r2, #1]
 800a154:	2a30      	cmp	r2, #48	; 0x30
 800a156:	d0f9      	beq.n	800a14c <_strtod_l+0x294>
 800a158:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a15c:	2908      	cmp	r1, #8
 800a15e:	f63f af7a 	bhi.w	800a056 <_strtod_l+0x19e>
 800a162:	3a30      	subs	r2, #48	; 0x30
 800a164:	9209      	str	r2, [sp, #36]	; 0x24
 800a166:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a168:	920c      	str	r2, [sp, #48]	; 0x30
 800a16a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a16c:	1c57      	adds	r7, r2, #1
 800a16e:	9719      	str	r7, [sp, #100]	; 0x64
 800a170:	7852      	ldrb	r2, [r2, #1]
 800a172:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a176:	f1be 0f09 	cmp.w	lr, #9
 800a17a:	d938      	bls.n	800a1ee <_strtod_l+0x336>
 800a17c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a17e:	1a7f      	subs	r7, r7, r1
 800a180:	2f08      	cmp	r7, #8
 800a182:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a186:	dc03      	bgt.n	800a190 <_strtod_l+0x2d8>
 800a188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a18a:	428f      	cmp	r7, r1
 800a18c:	bfa8      	it	ge
 800a18e:	460f      	movge	r7, r1
 800a190:	f1bc 0f00 	cmp.w	ip, #0
 800a194:	d000      	beq.n	800a198 <_strtod_l+0x2e0>
 800a196:	427f      	negs	r7, r7
 800a198:	2e00      	cmp	r6, #0
 800a19a:	d14f      	bne.n	800a23c <_strtod_l+0x384>
 800a19c:	9905      	ldr	r1, [sp, #20]
 800a19e:	4301      	orrs	r1, r0
 800a1a0:	f47f aec3 	bne.w	8009f2a <_strtod_l+0x72>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f47f aedb 	bne.w	8009f60 <_strtod_l+0xa8>
 800a1aa:	2a69      	cmp	r2, #105	; 0x69
 800a1ac:	d029      	beq.n	800a202 <_strtod_l+0x34a>
 800a1ae:	dc26      	bgt.n	800a1fe <_strtod_l+0x346>
 800a1b0:	2a49      	cmp	r2, #73	; 0x49
 800a1b2:	d026      	beq.n	800a202 <_strtod_l+0x34a>
 800a1b4:	2a4e      	cmp	r2, #78	; 0x4e
 800a1b6:	f47f aed3 	bne.w	8009f60 <_strtod_l+0xa8>
 800a1ba:	499a      	ldr	r1, [pc, #616]	; (800a424 <_strtod_l+0x56c>)
 800a1bc:	a819      	add	r0, sp, #100	; 0x64
 800a1be:	f001 f995 	bl	800b4ec <__match>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	f43f aecc 	beq.w	8009f60 <_strtod_l+0xa8>
 800a1c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b28      	cmp	r3, #40	; 0x28
 800a1ce:	d12f      	bne.n	800a230 <_strtod_l+0x378>
 800a1d0:	4995      	ldr	r1, [pc, #596]	; (800a428 <_strtod_l+0x570>)
 800a1d2:	aa1c      	add	r2, sp, #112	; 0x70
 800a1d4:	a819      	add	r0, sp, #100	; 0x64
 800a1d6:	f001 f99d 	bl	800b514 <__hexnan>
 800a1da:	2805      	cmp	r0, #5
 800a1dc:	d128      	bne.n	800a230 <_strtod_l+0x378>
 800a1de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a1e0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a1e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a1e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a1ec:	e69d      	b.n	8009f2a <_strtod_l+0x72>
 800a1ee:	210a      	movs	r1, #10
 800a1f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a1f2:	fb01 2107 	mla	r1, r1, r7, r2
 800a1f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a1fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a1fc:	e7b5      	b.n	800a16a <_strtod_l+0x2b2>
 800a1fe:	2a6e      	cmp	r2, #110	; 0x6e
 800a200:	e7d9      	b.n	800a1b6 <_strtod_l+0x2fe>
 800a202:	498a      	ldr	r1, [pc, #552]	; (800a42c <_strtod_l+0x574>)
 800a204:	a819      	add	r0, sp, #100	; 0x64
 800a206:	f001 f971 	bl	800b4ec <__match>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f43f aea8 	beq.w	8009f60 <_strtod_l+0xa8>
 800a210:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a212:	4987      	ldr	r1, [pc, #540]	; (800a430 <_strtod_l+0x578>)
 800a214:	3b01      	subs	r3, #1
 800a216:	a819      	add	r0, sp, #100	; 0x64
 800a218:	9319      	str	r3, [sp, #100]	; 0x64
 800a21a:	f001 f967 	bl	800b4ec <__match>
 800a21e:	b910      	cbnz	r0, 800a226 <_strtod_l+0x36e>
 800a220:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a222:	3301      	adds	r3, #1
 800a224:	9319      	str	r3, [sp, #100]	; 0x64
 800a226:	f04f 0800 	mov.w	r8, #0
 800a22a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a434 <_strtod_l+0x57c>
 800a22e:	e67c      	b.n	8009f2a <_strtod_l+0x72>
 800a230:	4881      	ldr	r0, [pc, #516]	; (800a438 <_strtod_l+0x580>)
 800a232:	f000 fe79 	bl	800af28 <nan>
 800a236:	4680      	mov	r8, r0
 800a238:	4689      	mov	r9, r1
 800a23a:	e676      	b.n	8009f2a <_strtod_l+0x72>
 800a23c:	9b08      	ldr	r3, [sp, #32]
 800a23e:	f1bb 0f00 	cmp.w	fp, #0
 800a242:	bf08      	it	eq
 800a244:	46b3      	moveq	fp, r6
 800a246:	1afb      	subs	r3, r7, r3
 800a248:	2e10      	cmp	r6, #16
 800a24a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a24c:	4635      	mov	r5, r6
 800a24e:	9309      	str	r3, [sp, #36]	; 0x24
 800a250:	bfa8      	it	ge
 800a252:	2510      	movge	r5, #16
 800a254:	f7f6 f8c6 	bl	80003e4 <__aeabi_ui2d>
 800a258:	2e09      	cmp	r6, #9
 800a25a:	4680      	mov	r8, r0
 800a25c:	4689      	mov	r9, r1
 800a25e:	dd13      	ble.n	800a288 <_strtod_l+0x3d0>
 800a260:	4b76      	ldr	r3, [pc, #472]	; (800a43c <_strtod_l+0x584>)
 800a262:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a266:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a26a:	f7f6 f935 	bl	80004d8 <__aeabi_dmul>
 800a26e:	4680      	mov	r8, r0
 800a270:	4650      	mov	r0, sl
 800a272:	4689      	mov	r9, r1
 800a274:	f7f6 f8b6 	bl	80003e4 <__aeabi_ui2d>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4640      	mov	r0, r8
 800a27e:	4649      	mov	r1, r9
 800a280:	f7f5 ff74 	bl	800016c <__adddf3>
 800a284:	4680      	mov	r8, r0
 800a286:	4689      	mov	r9, r1
 800a288:	2e0f      	cmp	r6, #15
 800a28a:	dc36      	bgt.n	800a2fa <_strtod_l+0x442>
 800a28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f43f ae4b 	beq.w	8009f2a <_strtod_l+0x72>
 800a294:	dd22      	ble.n	800a2dc <_strtod_l+0x424>
 800a296:	2b16      	cmp	r3, #22
 800a298:	dc09      	bgt.n	800a2ae <_strtod_l+0x3f6>
 800a29a:	4968      	ldr	r1, [pc, #416]	; (800a43c <_strtod_l+0x584>)
 800a29c:	4642      	mov	r2, r8
 800a29e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2a8:	f7f6 f916 	bl	80004d8 <__aeabi_dmul>
 800a2ac:	e7c3      	b.n	800a236 <_strtod_l+0x37e>
 800a2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2b0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	db20      	blt.n	800a2fa <_strtod_l+0x442>
 800a2b8:	4c60      	ldr	r4, [pc, #384]	; (800a43c <_strtod_l+0x584>)
 800a2ba:	f1c6 060f 	rsb	r6, r6, #15
 800a2be:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a2c2:	4642      	mov	r2, r8
 800a2c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	f7f6 f905 	bl	80004d8 <__aeabi_dmul>
 800a2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d0:	1b9e      	subs	r6, r3, r6
 800a2d2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a2d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a2da:	e7e5      	b.n	800a2a8 <_strtod_l+0x3f0>
 800a2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2de:	3316      	adds	r3, #22
 800a2e0:	db0b      	blt.n	800a2fa <_strtod_l+0x442>
 800a2e2:	9b08      	ldr	r3, [sp, #32]
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	1bdf      	subs	r7, r3, r7
 800a2e8:	4b54      	ldr	r3, [pc, #336]	; (800a43c <_strtod_l+0x584>)
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f4:	f7f6 fa1a 	bl	800072c <__aeabi_ddiv>
 800a2f8:	e79d      	b.n	800a236 <_strtod_l+0x37e>
 800a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fc:	1b75      	subs	r5, r6, r5
 800a2fe:	441d      	add	r5, r3
 800a300:	2d00      	cmp	r5, #0
 800a302:	dd70      	ble.n	800a3e6 <_strtod_l+0x52e>
 800a304:	f015 030f 	ands.w	r3, r5, #15
 800a308:	d00a      	beq.n	800a320 <_strtod_l+0x468>
 800a30a:	494c      	ldr	r1, [pc, #304]	; (800a43c <_strtod_l+0x584>)
 800a30c:	4642      	mov	r2, r8
 800a30e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a312:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a316:	464b      	mov	r3, r9
 800a318:	f7f6 f8de 	bl	80004d8 <__aeabi_dmul>
 800a31c:	4680      	mov	r8, r0
 800a31e:	4689      	mov	r9, r1
 800a320:	f035 050f 	bics.w	r5, r5, #15
 800a324:	d04d      	beq.n	800a3c2 <_strtod_l+0x50a>
 800a326:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a32a:	dd22      	ble.n	800a372 <_strtod_l+0x4ba>
 800a32c:	2600      	movs	r6, #0
 800a32e:	46b3      	mov	fp, r6
 800a330:	960b      	str	r6, [sp, #44]	; 0x2c
 800a332:	9608      	str	r6, [sp, #32]
 800a334:	2322      	movs	r3, #34	; 0x22
 800a336:	f04f 0800 	mov.w	r8, #0
 800a33a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800a434 <_strtod_l+0x57c>
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a342:	2b00      	cmp	r3, #0
 800a344:	f43f adf1 	beq.w	8009f2a <_strtod_l+0x72>
 800a348:	4620      	mov	r0, r4
 800a34a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a34c:	f7ff f934 	bl	80095b8 <_Bfree>
 800a350:	4620      	mov	r0, r4
 800a352:	9908      	ldr	r1, [sp, #32]
 800a354:	f7ff f930 	bl	80095b8 <_Bfree>
 800a358:	4659      	mov	r1, fp
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff f92c 	bl	80095b8 <_Bfree>
 800a360:	4620      	mov	r0, r4
 800a362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a364:	f7ff f928 	bl	80095b8 <_Bfree>
 800a368:	4631      	mov	r1, r6
 800a36a:	4620      	mov	r0, r4
 800a36c:	f7ff f924 	bl	80095b8 <_Bfree>
 800a370:	e5db      	b.n	8009f2a <_strtod_l+0x72>
 800a372:	4b33      	ldr	r3, [pc, #204]	; (800a440 <_strtod_l+0x588>)
 800a374:	4640      	mov	r0, r8
 800a376:	9305      	str	r3, [sp, #20]
 800a378:	2300      	movs	r3, #0
 800a37a:	4649      	mov	r1, r9
 800a37c:	469a      	mov	sl, r3
 800a37e:	112d      	asrs	r5, r5, #4
 800a380:	2d01      	cmp	r5, #1
 800a382:	dc21      	bgt.n	800a3c8 <_strtod_l+0x510>
 800a384:	b10b      	cbz	r3, 800a38a <_strtod_l+0x4d2>
 800a386:	4680      	mov	r8, r0
 800a388:	4689      	mov	r9, r1
 800a38a:	492d      	ldr	r1, [pc, #180]	; (800a440 <_strtod_l+0x588>)
 800a38c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a390:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a394:	4642      	mov	r2, r8
 800a396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39a:	464b      	mov	r3, r9
 800a39c:	f7f6 f89c 	bl	80004d8 <__aeabi_dmul>
 800a3a0:	4b24      	ldr	r3, [pc, #144]	; (800a434 <_strtod_l+0x57c>)
 800a3a2:	460a      	mov	r2, r1
 800a3a4:	400b      	ands	r3, r1
 800a3a6:	4927      	ldr	r1, [pc, #156]	; (800a444 <_strtod_l+0x58c>)
 800a3a8:	4680      	mov	r8, r0
 800a3aa:	428b      	cmp	r3, r1
 800a3ac:	d8be      	bhi.n	800a32c <_strtod_l+0x474>
 800a3ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a3b2:	428b      	cmp	r3, r1
 800a3b4:	bf86      	itte	hi
 800a3b6:	f04f 38ff 	movhi.w	r8, #4294967295
 800a3ba:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a448 <_strtod_l+0x590>
 800a3be:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9305      	str	r3, [sp, #20]
 800a3c6:	e07b      	b.n	800a4c0 <_strtod_l+0x608>
 800a3c8:	07ea      	lsls	r2, r5, #31
 800a3ca:	d505      	bpl.n	800a3d8 <_strtod_l+0x520>
 800a3cc:	9b05      	ldr	r3, [sp, #20]
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f7f6 f881 	bl	80004d8 <__aeabi_dmul>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	9a05      	ldr	r2, [sp, #20]
 800a3da:	f10a 0a01 	add.w	sl, sl, #1
 800a3de:	3208      	adds	r2, #8
 800a3e0:	106d      	asrs	r5, r5, #1
 800a3e2:	9205      	str	r2, [sp, #20]
 800a3e4:	e7cc      	b.n	800a380 <_strtod_l+0x4c8>
 800a3e6:	d0ec      	beq.n	800a3c2 <_strtod_l+0x50a>
 800a3e8:	426d      	negs	r5, r5
 800a3ea:	f015 020f 	ands.w	r2, r5, #15
 800a3ee:	d00a      	beq.n	800a406 <_strtod_l+0x54e>
 800a3f0:	4b12      	ldr	r3, [pc, #72]	; (800a43c <_strtod_l+0x584>)
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	f7f6 f995 	bl	800072c <__aeabi_ddiv>
 800a402:	4680      	mov	r8, r0
 800a404:	4689      	mov	r9, r1
 800a406:	112d      	asrs	r5, r5, #4
 800a408:	d0db      	beq.n	800a3c2 <_strtod_l+0x50a>
 800a40a:	2d1f      	cmp	r5, #31
 800a40c:	dd1e      	ble.n	800a44c <_strtod_l+0x594>
 800a40e:	2600      	movs	r6, #0
 800a410:	46b3      	mov	fp, r6
 800a412:	960b      	str	r6, [sp, #44]	; 0x2c
 800a414:	9608      	str	r6, [sp, #32]
 800a416:	2322      	movs	r3, #34	; 0x22
 800a418:	f04f 0800 	mov.w	r8, #0
 800a41c:	f04f 0900 	mov.w	r9, #0
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	e78d      	b.n	800a340 <_strtod_l+0x488>
 800a424:	0800bee9 	.word	0x0800bee9
 800a428:	0800c114 	.word	0x0800c114
 800a42c:	0800bee1 	.word	0x0800bee1
 800a430:	0800bf18 	.word	0x0800bf18
 800a434:	7ff00000 	.word	0x7ff00000
 800a438:	0800c1a4 	.word	0x0800c1a4
 800a43c:	0800c028 	.word	0x0800c028
 800a440:	0800c000 	.word	0x0800c000
 800a444:	7ca00000 	.word	0x7ca00000
 800a448:	7fefffff 	.word	0x7fefffff
 800a44c:	f015 0310 	ands.w	r3, r5, #16
 800a450:	bf18      	it	ne
 800a452:	236a      	movne	r3, #106	; 0x6a
 800a454:	4640      	mov	r0, r8
 800a456:	9305      	str	r3, [sp, #20]
 800a458:	4649      	mov	r1, r9
 800a45a:	2300      	movs	r3, #0
 800a45c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a728 <_strtod_l+0x870>
 800a460:	07ea      	lsls	r2, r5, #31
 800a462:	d504      	bpl.n	800a46e <_strtod_l+0x5b6>
 800a464:	e9da 2300 	ldrd	r2, r3, [sl]
 800a468:	f7f6 f836 	bl	80004d8 <__aeabi_dmul>
 800a46c:	2301      	movs	r3, #1
 800a46e:	106d      	asrs	r5, r5, #1
 800a470:	f10a 0a08 	add.w	sl, sl, #8
 800a474:	d1f4      	bne.n	800a460 <_strtod_l+0x5a8>
 800a476:	b10b      	cbz	r3, 800a47c <_strtod_l+0x5c4>
 800a478:	4680      	mov	r8, r0
 800a47a:	4689      	mov	r9, r1
 800a47c:	9b05      	ldr	r3, [sp, #20]
 800a47e:	b1bb      	cbz	r3, 800a4b0 <_strtod_l+0x5f8>
 800a480:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a484:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a488:	2b00      	cmp	r3, #0
 800a48a:	4649      	mov	r1, r9
 800a48c:	dd10      	ble.n	800a4b0 <_strtod_l+0x5f8>
 800a48e:	2b1f      	cmp	r3, #31
 800a490:	f340 8128 	ble.w	800a6e4 <_strtod_l+0x82c>
 800a494:	2b34      	cmp	r3, #52	; 0x34
 800a496:	bfd8      	it	le
 800a498:	f04f 33ff 	movle.w	r3, #4294967295
 800a49c:	f04f 0800 	mov.w	r8, #0
 800a4a0:	bfcf      	iteee	gt
 800a4a2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a4a6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a4aa:	4093      	lslle	r3, r2
 800a4ac:	ea03 0901 	andle.w	r9, r3, r1
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	f7f6 fa76 	bl	80009a8 <__aeabi_dcmpeq>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d1a6      	bne.n	800a40e <_strtod_l+0x556>
 800a4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4c2:	465a      	mov	r2, fp
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4633      	mov	r3, r6
 800a4ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4cc:	f7ff f8dc 	bl	8009688 <__s2b>
 800a4d0:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	f43f af2a 	beq.w	800a32c <_strtod_l+0x474>
 800a4d8:	2600      	movs	r6, #0
 800a4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4dc:	9b08      	ldr	r3, [sp, #32]
 800a4de:	2a00      	cmp	r2, #0
 800a4e0:	eba3 0307 	sub.w	r3, r3, r7
 800a4e4:	bfa8      	it	ge
 800a4e6:	2300      	movge	r3, #0
 800a4e8:	46b3      	mov	fp, r6
 800a4ea:	9312      	str	r3, [sp, #72]	; 0x48
 800a4ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a4f0:	9316      	str	r3, [sp, #88]	; 0x58
 800a4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	6859      	ldr	r1, [r3, #4]
 800a4f8:	f7ff f81e 	bl	8009538 <_Balloc>
 800a4fc:	9008      	str	r0, [sp, #32]
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f43f af18 	beq.w	800a334 <_strtod_l+0x47c>
 800a504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a506:	300c      	adds	r0, #12
 800a508:	691a      	ldr	r2, [r3, #16]
 800a50a:	f103 010c 	add.w	r1, r3, #12
 800a50e:	3202      	adds	r2, #2
 800a510:	0092      	lsls	r2, r2, #2
 800a512:	f7fe f892 	bl	800863a <memcpy>
 800a516:	ab1c      	add	r3, sp, #112	; 0x70
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	4642      	mov	r2, r8
 800a520:	464b      	mov	r3, r9
 800a522:	4620      	mov	r0, r4
 800a524:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a528:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800a52c:	f7ff fbd8 	bl	8009ce0 <__d2b>
 800a530:	901a      	str	r0, [sp, #104]	; 0x68
 800a532:	2800      	cmp	r0, #0
 800a534:	f43f aefe 	beq.w	800a334 <_strtod_l+0x47c>
 800a538:	2101      	movs	r1, #1
 800a53a:	4620      	mov	r0, r4
 800a53c:	f7ff f93c 	bl	80097b8 <__i2b>
 800a540:	4683      	mov	fp, r0
 800a542:	2800      	cmp	r0, #0
 800a544:	f43f aef6 	beq.w	800a334 <_strtod_l+0x47c>
 800a548:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a54a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a54c:	2f00      	cmp	r7, #0
 800a54e:	bfab      	itete	ge
 800a550:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800a552:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a554:	eb07 0a03 	addge.w	sl, r7, r3
 800a558:	1bdd      	sublt	r5, r3, r7
 800a55a:	9b05      	ldr	r3, [sp, #20]
 800a55c:	bfa8      	it	ge
 800a55e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a560:	eba7 0703 	sub.w	r7, r7, r3
 800a564:	4417      	add	r7, r2
 800a566:	4b71      	ldr	r3, [pc, #452]	; (800a72c <_strtod_l+0x874>)
 800a568:	f107 37ff 	add.w	r7, r7, #4294967295
 800a56c:	bfb8      	it	lt
 800a56e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800a572:	429f      	cmp	r7, r3
 800a574:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a578:	f280 80c7 	bge.w	800a70a <_strtod_l+0x852>
 800a57c:	1bdb      	subs	r3, r3, r7
 800a57e:	2b1f      	cmp	r3, #31
 800a580:	f04f 0101 	mov.w	r1, #1
 800a584:	eba2 0203 	sub.w	r2, r2, r3
 800a588:	f300 80b3 	bgt.w	800a6f2 <_strtod_l+0x83a>
 800a58c:	fa01 f303 	lsl.w	r3, r1, r3
 800a590:	9313      	str	r3, [sp, #76]	; 0x4c
 800a592:	2300      	movs	r3, #0
 800a594:	9310      	str	r3, [sp, #64]	; 0x40
 800a596:	eb0a 0702 	add.w	r7, sl, r2
 800a59a:	9b05      	ldr	r3, [sp, #20]
 800a59c:	45ba      	cmp	sl, r7
 800a59e:	4415      	add	r5, r2
 800a5a0:	441d      	add	r5, r3
 800a5a2:	4653      	mov	r3, sl
 800a5a4:	bfa8      	it	ge
 800a5a6:	463b      	movge	r3, r7
 800a5a8:	42ab      	cmp	r3, r5
 800a5aa:	bfa8      	it	ge
 800a5ac:	462b      	movge	r3, r5
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	bfc2      	ittt	gt
 800a5b2:	1aff      	subgt	r7, r7, r3
 800a5b4:	1aed      	subgt	r5, r5, r3
 800a5b6:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a5ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	dd17      	ble.n	800a5f0 <_strtod_l+0x738>
 800a5c0:	4659      	mov	r1, fp
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7ff f9b5 	bl	8009934 <__pow5mult>
 800a5ca:	4683      	mov	fp, r0
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f43f aeb1 	beq.w	800a334 <_strtod_l+0x47c>
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f7ff f904 	bl	80097e4 <__multiply>
 800a5dc:	900a      	str	r0, [sp, #40]	; 0x28
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	f43f aea8 	beq.w	800a334 <_strtod_l+0x47c>
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a5e8:	f7fe ffe6 	bl	80095b8 <_Bfree>
 800a5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a5f0:	2f00      	cmp	r7, #0
 800a5f2:	f300 808f 	bgt.w	800a714 <_strtod_l+0x85c>
 800a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	dd08      	ble.n	800a60e <_strtod_l+0x756>
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a600:	9908      	ldr	r1, [sp, #32]
 800a602:	f7ff f997 	bl	8009934 <__pow5mult>
 800a606:	9008      	str	r0, [sp, #32]
 800a608:	2800      	cmp	r0, #0
 800a60a:	f43f ae93 	beq.w	800a334 <_strtod_l+0x47c>
 800a60e:	2d00      	cmp	r5, #0
 800a610:	dd08      	ble.n	800a624 <_strtod_l+0x76c>
 800a612:	462a      	mov	r2, r5
 800a614:	4620      	mov	r0, r4
 800a616:	9908      	ldr	r1, [sp, #32]
 800a618:	f7ff f9e6 	bl	80099e8 <__lshift>
 800a61c:	9008      	str	r0, [sp, #32]
 800a61e:	2800      	cmp	r0, #0
 800a620:	f43f ae88 	beq.w	800a334 <_strtod_l+0x47c>
 800a624:	f1ba 0f00 	cmp.w	sl, #0
 800a628:	dd08      	ble.n	800a63c <_strtod_l+0x784>
 800a62a:	4659      	mov	r1, fp
 800a62c:	4652      	mov	r2, sl
 800a62e:	4620      	mov	r0, r4
 800a630:	f7ff f9da 	bl	80099e8 <__lshift>
 800a634:	4683      	mov	fp, r0
 800a636:	2800      	cmp	r0, #0
 800a638:	f43f ae7c 	beq.w	800a334 <_strtod_l+0x47c>
 800a63c:	4620      	mov	r0, r4
 800a63e:	9a08      	ldr	r2, [sp, #32]
 800a640:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a642:	f7ff fa59 	bl	8009af8 <__mdiff>
 800a646:	4606      	mov	r6, r0
 800a648:	2800      	cmp	r0, #0
 800a64a:	f43f ae73 	beq.w	800a334 <_strtod_l+0x47c>
 800a64e:	2500      	movs	r5, #0
 800a650:	68c3      	ldr	r3, [r0, #12]
 800a652:	4659      	mov	r1, fp
 800a654:	60c5      	str	r5, [r0, #12]
 800a656:	930a      	str	r3, [sp, #40]	; 0x28
 800a658:	f7ff fa32 	bl	8009ac0 <__mcmp>
 800a65c:	42a8      	cmp	r0, r5
 800a65e:	da6b      	bge.n	800a738 <_strtod_l+0x880>
 800a660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a662:	ea53 0308 	orrs.w	r3, r3, r8
 800a666:	f040 808f 	bne.w	800a788 <_strtod_l+0x8d0>
 800a66a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f040 808a 	bne.w	800a788 <_strtod_l+0x8d0>
 800a674:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a678:	0d1b      	lsrs	r3, r3, #20
 800a67a:	051b      	lsls	r3, r3, #20
 800a67c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a680:	f240 8082 	bls.w	800a788 <_strtod_l+0x8d0>
 800a684:	6973      	ldr	r3, [r6, #20]
 800a686:	b913      	cbnz	r3, 800a68e <_strtod_l+0x7d6>
 800a688:	6933      	ldr	r3, [r6, #16]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	dd7c      	ble.n	800a788 <_strtod_l+0x8d0>
 800a68e:	4631      	mov	r1, r6
 800a690:	2201      	movs	r2, #1
 800a692:	4620      	mov	r0, r4
 800a694:	f7ff f9a8 	bl	80099e8 <__lshift>
 800a698:	4659      	mov	r1, fp
 800a69a:	4606      	mov	r6, r0
 800a69c:	f7ff fa10 	bl	8009ac0 <__mcmp>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	dd71      	ble.n	800a788 <_strtod_l+0x8d0>
 800a6a4:	9905      	ldr	r1, [sp, #20]
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	4a21      	ldr	r2, [pc, #132]	; (800a730 <_strtod_l+0x878>)
 800a6aa:	2900      	cmp	r1, #0
 800a6ac:	f000 808d 	beq.w	800a7ca <_strtod_l+0x912>
 800a6b0:	ea02 0109 	and.w	r1, r2, r9
 800a6b4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a6b8:	f300 8087 	bgt.w	800a7ca <_strtod_l+0x912>
 800a6bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a6c0:	f77f aea9 	ble.w	800a416 <_strtod_l+0x55e>
 800a6c4:	4640      	mov	r0, r8
 800a6c6:	4649      	mov	r1, r9
 800a6c8:	4b1a      	ldr	r3, [pc, #104]	; (800a734 <_strtod_l+0x87c>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f7f5 ff04 	bl	80004d8 <__aeabi_dmul>
 800a6d0:	4b17      	ldr	r3, [pc, #92]	; (800a730 <_strtod_l+0x878>)
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	400b      	ands	r3, r1
 800a6d6:	4689      	mov	r9, r1
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f47f ae35 	bne.w	800a348 <_strtod_l+0x490>
 800a6de:	2322      	movs	r3, #34	; 0x22
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	e631      	b.n	800a348 <_strtod_l+0x490>
 800a6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ec:	ea03 0808 	and.w	r8, r3, r8
 800a6f0:	e6de      	b.n	800a4b0 <_strtod_l+0x5f8>
 800a6f2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800a6f6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800a6fa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800a6fe:	37e2      	adds	r7, #226	; 0xe2
 800a700:	fa01 f307 	lsl.w	r3, r1, r7
 800a704:	9310      	str	r3, [sp, #64]	; 0x40
 800a706:	9113      	str	r1, [sp, #76]	; 0x4c
 800a708:	e745      	b.n	800a596 <_strtod_l+0x6de>
 800a70a:	2300      	movs	r3, #0
 800a70c:	9310      	str	r3, [sp, #64]	; 0x40
 800a70e:	2301      	movs	r3, #1
 800a710:	9313      	str	r3, [sp, #76]	; 0x4c
 800a712:	e740      	b.n	800a596 <_strtod_l+0x6de>
 800a714:	463a      	mov	r2, r7
 800a716:	4620      	mov	r0, r4
 800a718:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a71a:	f7ff f965 	bl	80099e8 <__lshift>
 800a71e:	901a      	str	r0, [sp, #104]	; 0x68
 800a720:	2800      	cmp	r0, #0
 800a722:	f47f af68 	bne.w	800a5f6 <_strtod_l+0x73e>
 800a726:	e605      	b.n	800a334 <_strtod_l+0x47c>
 800a728:	0800c128 	.word	0x0800c128
 800a72c:	fffffc02 	.word	0xfffffc02
 800a730:	7ff00000 	.word	0x7ff00000
 800a734:	39500000 	.word	0x39500000
 800a738:	46ca      	mov	sl, r9
 800a73a:	d165      	bne.n	800a808 <_strtod_l+0x950>
 800a73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a73e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a742:	b352      	cbz	r2, 800a79a <_strtod_l+0x8e2>
 800a744:	4a9e      	ldr	r2, [pc, #632]	; (800a9c0 <_strtod_l+0xb08>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d12a      	bne.n	800a7a0 <_strtod_l+0x8e8>
 800a74a:	9b05      	ldr	r3, [sp, #20]
 800a74c:	4641      	mov	r1, r8
 800a74e:	b1fb      	cbz	r3, 800a790 <_strtod_l+0x8d8>
 800a750:	4b9c      	ldr	r3, [pc, #624]	; (800a9c4 <_strtod_l+0xb0c>)
 800a752:	f04f 32ff 	mov.w	r2, #4294967295
 800a756:	ea09 0303 	and.w	r3, r9, r3
 800a75a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a75e:	d81a      	bhi.n	800a796 <_strtod_l+0x8de>
 800a760:	0d1b      	lsrs	r3, r3, #20
 800a762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a766:	fa02 f303 	lsl.w	r3, r2, r3
 800a76a:	4299      	cmp	r1, r3
 800a76c:	d118      	bne.n	800a7a0 <_strtod_l+0x8e8>
 800a76e:	4b96      	ldr	r3, [pc, #600]	; (800a9c8 <_strtod_l+0xb10>)
 800a770:	459a      	cmp	sl, r3
 800a772:	d102      	bne.n	800a77a <_strtod_l+0x8c2>
 800a774:	3101      	adds	r1, #1
 800a776:	f43f addd 	beq.w	800a334 <_strtod_l+0x47c>
 800a77a:	f04f 0800 	mov.w	r8, #0
 800a77e:	4b91      	ldr	r3, [pc, #580]	; (800a9c4 <_strtod_l+0xb0c>)
 800a780:	ea0a 0303 	and.w	r3, sl, r3
 800a784:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a788:	9b05      	ldr	r3, [sp, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d19a      	bne.n	800a6c4 <_strtod_l+0x80c>
 800a78e:	e5db      	b.n	800a348 <_strtod_l+0x490>
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	e7e9      	b.n	800a76a <_strtod_l+0x8b2>
 800a796:	4613      	mov	r3, r2
 800a798:	e7e7      	b.n	800a76a <_strtod_l+0x8b2>
 800a79a:	ea53 0308 	orrs.w	r3, r3, r8
 800a79e:	d081      	beq.n	800a6a4 <_strtod_l+0x7ec>
 800a7a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7a2:	b1e3      	cbz	r3, 800a7de <_strtod_l+0x926>
 800a7a4:	ea13 0f0a 	tst.w	r3, sl
 800a7a8:	d0ee      	beq.n	800a788 <_strtod_l+0x8d0>
 800a7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	9a05      	ldr	r2, [sp, #20]
 800a7b2:	b1c3      	cbz	r3, 800a7e6 <_strtod_l+0x92e>
 800a7b4:	f7ff fb5c 	bl	8009e70 <sulp>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a7be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a7c0:	f7f5 fcd4 	bl	800016c <__adddf3>
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	4689      	mov	r9, r1
 800a7c8:	e7de      	b.n	800a788 <_strtod_l+0x8d0>
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a7d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a7d4:	f04f 38ff 	mov.w	r8, #4294967295
 800a7d8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a7dc:	e7d4      	b.n	800a788 <_strtod_l+0x8d0>
 800a7de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7e0:	ea13 0f08 	tst.w	r3, r8
 800a7e4:	e7e0      	b.n	800a7a8 <_strtod_l+0x8f0>
 800a7e6:	f7ff fb43 	bl	8009e70 <sulp>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a7f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a7f2:	f7f5 fcb9 	bl	8000168 <__aeabi_dsub>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	4680      	mov	r8, r0
 800a7fc:	4689      	mov	r9, r1
 800a7fe:	f7f6 f8d3 	bl	80009a8 <__aeabi_dcmpeq>
 800a802:	2800      	cmp	r0, #0
 800a804:	d0c0      	beq.n	800a788 <_strtod_l+0x8d0>
 800a806:	e606      	b.n	800a416 <_strtod_l+0x55e>
 800a808:	4659      	mov	r1, fp
 800a80a:	4630      	mov	r0, r6
 800a80c:	f7ff fabe 	bl	8009d8c <__ratio>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a818:	2200      	movs	r2, #0
 800a81a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a81e:	f7f6 f8d7 	bl	80009d0 <__aeabi_dcmple>
 800a822:	2800      	cmp	r0, #0
 800a824:	d06f      	beq.n	800a906 <_strtod_l+0xa4e>
 800a826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d17c      	bne.n	800a926 <_strtod_l+0xa6e>
 800a82c:	f1b8 0f00 	cmp.w	r8, #0
 800a830:	d159      	bne.n	800a8e6 <_strtod_l+0xa2e>
 800a832:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a836:	2b00      	cmp	r3, #0
 800a838:	d17b      	bne.n	800a932 <_strtod_l+0xa7a>
 800a83a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a83e:	2200      	movs	r2, #0
 800a840:	4b62      	ldr	r3, [pc, #392]	; (800a9cc <_strtod_l+0xb14>)
 800a842:	f7f6 f8bb 	bl	80009bc <__aeabi_dcmplt>
 800a846:	2800      	cmp	r0, #0
 800a848:	d15a      	bne.n	800a900 <_strtod_l+0xa48>
 800a84a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a84e:	2200      	movs	r2, #0
 800a850:	4b5f      	ldr	r3, [pc, #380]	; (800a9d0 <_strtod_l+0xb18>)
 800a852:	f7f5 fe41 	bl	80004d8 <__aeabi_dmul>
 800a856:	4605      	mov	r5, r0
 800a858:	460f      	mov	r7, r1
 800a85a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a85e:	9506      	str	r5, [sp, #24]
 800a860:	9307      	str	r3, [sp, #28]
 800a862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a866:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a86a:	4b56      	ldr	r3, [pc, #344]	; (800a9c4 <_strtod_l+0xb0c>)
 800a86c:	4a55      	ldr	r2, [pc, #340]	; (800a9c4 <_strtod_l+0xb0c>)
 800a86e:	ea0a 0303 	and.w	r3, sl, r3
 800a872:	9313      	str	r3, [sp, #76]	; 0x4c
 800a874:	4b57      	ldr	r3, [pc, #348]	; (800a9d4 <_strtod_l+0xb1c>)
 800a876:	ea0a 0202 	and.w	r2, sl, r2
 800a87a:	429a      	cmp	r2, r3
 800a87c:	f040 80b0 	bne.w	800a9e0 <_strtod_l+0xb28>
 800a880:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a884:	4640      	mov	r0, r8
 800a886:	4649      	mov	r1, r9
 800a888:	f7ff f9c2 	bl	8009c10 <__ulp>
 800a88c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a890:	f7f5 fe22 	bl	80004d8 <__aeabi_dmul>
 800a894:	4642      	mov	r2, r8
 800a896:	464b      	mov	r3, r9
 800a898:	f7f5 fc68 	bl	800016c <__adddf3>
 800a89c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a9c4 <_strtod_l+0xb0c>
 800a8a0:	4a4d      	ldr	r2, [pc, #308]	; (800a9d8 <_strtod_l+0xb20>)
 800a8a2:	ea01 0a0a 	and.w	sl, r1, sl
 800a8a6:	4592      	cmp	sl, r2
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	d948      	bls.n	800a93e <_strtod_l+0xa86>
 800a8ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8ae:	4b46      	ldr	r3, [pc, #280]	; (800a9c8 <_strtod_l+0xb10>)
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d103      	bne.n	800a8bc <_strtod_l+0xa04>
 800a8b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	f43f ad3c 	beq.w	800a334 <_strtod_l+0x47c>
 800a8bc:	f04f 38ff 	mov.w	r8, #4294967295
 800a8c0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a9c8 <_strtod_l+0xb10>
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a8c8:	f7fe fe76 	bl	80095b8 <_Bfree>
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	9908      	ldr	r1, [sp, #32]
 800a8d0:	f7fe fe72 	bl	80095b8 <_Bfree>
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f7fe fe6e 	bl	80095b8 <_Bfree>
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f7fe fe6a 	bl	80095b8 <_Bfree>
 800a8e4:	e605      	b.n	800a4f2 <_strtod_l+0x63a>
 800a8e6:	f1b8 0f01 	cmp.w	r8, #1
 800a8ea:	d103      	bne.n	800a8f4 <_strtod_l+0xa3c>
 800a8ec:	f1b9 0f00 	cmp.w	r9, #0
 800a8f0:	f43f ad91 	beq.w	800a416 <_strtod_l+0x55e>
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	4b39      	ldr	r3, [pc, #228]	; (800a9dc <_strtod_l+0xb24>)
 800a8f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a8fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8fe:	e016      	b.n	800a92e <_strtod_l+0xa76>
 800a900:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a902:	4f33      	ldr	r7, [pc, #204]	; (800a9d0 <_strtod_l+0xb18>)
 800a904:	e7a9      	b.n	800a85a <_strtod_l+0x9a2>
 800a906:	4b32      	ldr	r3, [pc, #200]	; (800a9d0 <_strtod_l+0xb18>)
 800a908:	2200      	movs	r2, #0
 800a90a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a90e:	f7f5 fde3 	bl	80004d8 <__aeabi_dmul>
 800a912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a914:	4605      	mov	r5, r0
 800a916:	460f      	mov	r7, r1
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d09e      	beq.n	800a85a <_strtod_l+0x9a2>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a924:	e79d      	b.n	800a862 <_strtod_l+0x9aa>
 800a926:	2200      	movs	r2, #0
 800a928:	4b28      	ldr	r3, [pc, #160]	; (800a9cc <_strtod_l+0xb14>)
 800a92a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a92e:	4f27      	ldr	r7, [pc, #156]	; (800a9cc <_strtod_l+0xb14>)
 800a930:	e797      	b.n	800a862 <_strtod_l+0x9aa>
 800a932:	2200      	movs	r2, #0
 800a934:	4b29      	ldr	r3, [pc, #164]	; (800a9dc <_strtod_l+0xb24>)
 800a936:	4645      	mov	r5, r8
 800a938:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a93c:	e7f7      	b.n	800a92e <_strtod_l+0xa76>
 800a93e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800a942:	9b05      	ldr	r3, [sp, #20]
 800a944:	46ca      	mov	sl, r9
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1bc      	bne.n	800a8c4 <_strtod_l+0xa0c>
 800a94a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a94e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a950:	0d1b      	lsrs	r3, r3, #20
 800a952:	051b      	lsls	r3, r3, #20
 800a954:	429a      	cmp	r2, r3
 800a956:	d1b5      	bne.n	800a8c4 <_strtod_l+0xa0c>
 800a958:	4628      	mov	r0, r5
 800a95a:	4639      	mov	r1, r7
 800a95c:	f7f6 f904 	bl	8000b68 <__aeabi_d2lz>
 800a960:	f7f5 fd8c 	bl	800047c <__aeabi_l2d>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4628      	mov	r0, r5
 800a96a:	4639      	mov	r1, r7
 800a96c:	f7f5 fbfc 	bl	8000168 <__aeabi_dsub>
 800a970:	460b      	mov	r3, r1
 800a972:	4602      	mov	r2, r0
 800a974:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800a978:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a97c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a97e:	ea4a 0a08 	orr.w	sl, sl, r8
 800a982:	ea5a 0a03 	orrs.w	sl, sl, r3
 800a986:	d06c      	beq.n	800aa62 <_strtod_l+0xbaa>
 800a988:	a309      	add	r3, pc, #36	; (adr r3, 800a9b0 <_strtod_l+0xaf8>)
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f7f6 f815 	bl	80009bc <__aeabi_dcmplt>
 800a992:	2800      	cmp	r0, #0
 800a994:	f47f acd8 	bne.w	800a348 <_strtod_l+0x490>
 800a998:	a307      	add	r3, pc, #28	; (adr r3, 800a9b8 <_strtod_l+0xb00>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9a2:	f7f6 f829 	bl	80009f8 <__aeabi_dcmpgt>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d08c      	beq.n	800a8c4 <_strtod_l+0xa0c>
 800a9aa:	e4cd      	b.n	800a348 <_strtod_l+0x490>
 800a9ac:	f3af 8000 	nop.w
 800a9b0:	94a03595 	.word	0x94a03595
 800a9b4:	3fdfffff 	.word	0x3fdfffff
 800a9b8:	35afe535 	.word	0x35afe535
 800a9bc:	3fe00000 	.word	0x3fe00000
 800a9c0:	000fffff 	.word	0x000fffff
 800a9c4:	7ff00000 	.word	0x7ff00000
 800a9c8:	7fefffff 	.word	0x7fefffff
 800a9cc:	3ff00000 	.word	0x3ff00000
 800a9d0:	3fe00000 	.word	0x3fe00000
 800a9d4:	7fe00000 	.word	0x7fe00000
 800a9d8:	7c9fffff 	.word	0x7c9fffff
 800a9dc:	bff00000 	.word	0xbff00000
 800a9e0:	9b05      	ldr	r3, [sp, #20]
 800a9e2:	b333      	cbz	r3, 800aa32 <_strtod_l+0xb7a>
 800a9e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a9ea:	d822      	bhi.n	800aa32 <_strtod_l+0xb7a>
 800a9ec:	a328      	add	r3, pc, #160	; (adr r3, 800aa90 <_strtod_l+0xbd8>)
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	f7f5 ffeb 	bl	80009d0 <__aeabi_dcmple>
 800a9fa:	b1a0      	cbz	r0, 800aa26 <_strtod_l+0xb6e>
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f7f6 f842 	bl	8000a88 <__aeabi_d2uiz>
 800aa04:	2801      	cmp	r0, #1
 800aa06:	bf38      	it	cc
 800aa08:	2001      	movcc	r0, #1
 800aa0a:	f7f5 fceb 	bl	80003e4 <__aeabi_ui2d>
 800aa0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa10:	4605      	mov	r5, r0
 800aa12:	460f      	mov	r7, r1
 800aa14:	bb03      	cbnz	r3, 800aa58 <_strtod_l+0xba0>
 800aa16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa1a:	9014      	str	r0, [sp, #80]	; 0x50
 800aa1c:	9315      	str	r3, [sp, #84]	; 0x54
 800aa1e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aa22:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800aa26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa2a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aa2e:	1a9b      	subs	r3, r3, r2
 800aa30:	9311      	str	r3, [sp, #68]	; 0x44
 800aa32:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aa34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa36:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800aa3a:	f7ff f8e9 	bl	8009c10 <__ulp>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4640      	mov	r0, r8
 800aa44:	4649      	mov	r1, r9
 800aa46:	f7f5 fd47 	bl	80004d8 <__aeabi_dmul>
 800aa4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa4e:	f7f5 fb8d 	bl	800016c <__adddf3>
 800aa52:	4680      	mov	r8, r0
 800aa54:	4689      	mov	r9, r1
 800aa56:	e774      	b.n	800a942 <_strtod_l+0xa8a>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800aa60:	e7dd      	b.n	800aa1e <_strtod_l+0xb66>
 800aa62:	a30d      	add	r3, pc, #52	; (adr r3, 800aa98 <_strtod_l+0xbe0>)
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f7f5 ffa8 	bl	80009bc <__aeabi_dcmplt>
 800aa6c:	e79b      	b.n	800a9a6 <_strtod_l+0xaee>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	930e      	str	r3, [sp, #56]	; 0x38
 800aa72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	f7ff ba5b 	b.w	8009f32 <_strtod_l+0x7a>
 800aa7c:	2a65      	cmp	r2, #101	; 0x65
 800aa7e:	f43f ab52 	beq.w	800a126 <_strtod_l+0x26e>
 800aa82:	2a45      	cmp	r2, #69	; 0x45
 800aa84:	f43f ab4f 	beq.w	800a126 <_strtod_l+0x26e>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	f7ff bb87 	b.w	800a19c <_strtod_l+0x2e4>
 800aa8e:	bf00      	nop
 800aa90:	ffc00000 	.word	0xffc00000
 800aa94:	41dfffff 	.word	0x41dfffff
 800aa98:	94a03595 	.word	0x94a03595
 800aa9c:	3fcfffff 	.word	0x3fcfffff

0800aaa0 <_strtod_r>:
 800aaa0:	4b01      	ldr	r3, [pc, #4]	; (800aaa8 <_strtod_r+0x8>)
 800aaa2:	f7ff ba09 	b.w	8009eb8 <_strtod_l>
 800aaa6:	bf00      	nop
 800aaa8:	20000078 	.word	0x20000078

0800aaac <__ssputs_r>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	461f      	mov	r7, r3
 800aab2:	688e      	ldr	r6, [r1, #8]
 800aab4:	4682      	mov	sl, r0
 800aab6:	42be      	cmp	r6, r7
 800aab8:	460c      	mov	r4, r1
 800aaba:	4690      	mov	r8, r2
 800aabc:	680b      	ldr	r3, [r1, #0]
 800aabe:	d82c      	bhi.n	800ab1a <__ssputs_r+0x6e>
 800aac0:	898a      	ldrh	r2, [r1, #12]
 800aac2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aac6:	d026      	beq.n	800ab16 <__ssputs_r+0x6a>
 800aac8:	6965      	ldr	r5, [r4, #20]
 800aaca:	6909      	ldr	r1, [r1, #16]
 800aacc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aad0:	eba3 0901 	sub.w	r9, r3, r1
 800aad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aad8:	1c7b      	adds	r3, r7, #1
 800aada:	444b      	add	r3, r9
 800aadc:	106d      	asrs	r5, r5, #1
 800aade:	429d      	cmp	r5, r3
 800aae0:	bf38      	it	cc
 800aae2:	461d      	movcc	r5, r3
 800aae4:	0553      	lsls	r3, r2, #21
 800aae6:	d527      	bpl.n	800ab38 <__ssputs_r+0x8c>
 800aae8:	4629      	mov	r1, r5
 800aaea:	f7fe fc99 	bl	8009420 <_malloc_r>
 800aaee:	4606      	mov	r6, r0
 800aaf0:	b360      	cbz	r0, 800ab4c <__ssputs_r+0xa0>
 800aaf2:	464a      	mov	r2, r9
 800aaf4:	6921      	ldr	r1, [r4, #16]
 800aaf6:	f7fd fda0 	bl	800863a <memcpy>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	6126      	str	r6, [r4, #16]
 800ab08:	444e      	add	r6, r9
 800ab0a:	6026      	str	r6, [r4, #0]
 800ab0c:	463e      	mov	r6, r7
 800ab0e:	6165      	str	r5, [r4, #20]
 800ab10:	eba5 0509 	sub.w	r5, r5, r9
 800ab14:	60a5      	str	r5, [r4, #8]
 800ab16:	42be      	cmp	r6, r7
 800ab18:	d900      	bls.n	800ab1c <__ssputs_r+0x70>
 800ab1a:	463e      	mov	r6, r7
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	4641      	mov	r1, r8
 800ab20:	6820      	ldr	r0, [r4, #0]
 800ab22:	f000 f9c5 	bl	800aeb0 <memmove>
 800ab26:	2000      	movs	r0, #0
 800ab28:	68a3      	ldr	r3, [r4, #8]
 800ab2a:	1b9b      	subs	r3, r3, r6
 800ab2c:	60a3      	str	r3, [r4, #8]
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	4433      	add	r3, r6
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab38:	462a      	mov	r2, r5
 800ab3a:	f000 fd98 	bl	800b66e <_realloc_r>
 800ab3e:	4606      	mov	r6, r0
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d1e0      	bne.n	800ab06 <__ssputs_r+0x5a>
 800ab44:	4650      	mov	r0, sl
 800ab46:	6921      	ldr	r1, [r4, #16]
 800ab48:	f7fe fbfa 	bl	8009340 <_free_r>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	f8ca 3000 	str.w	r3, [sl]
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f04f 30ff 	mov.w	r0, #4294967295
 800ab58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab5c:	81a3      	strh	r3, [r4, #12]
 800ab5e:	e7e9      	b.n	800ab34 <__ssputs_r+0x88>

0800ab60 <_svfiprintf_r>:
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	4698      	mov	r8, r3
 800ab66:	898b      	ldrh	r3, [r1, #12]
 800ab68:	4607      	mov	r7, r0
 800ab6a:	061b      	lsls	r3, r3, #24
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	4614      	mov	r4, r2
 800ab70:	b09d      	sub	sp, #116	; 0x74
 800ab72:	d50e      	bpl.n	800ab92 <_svfiprintf_r+0x32>
 800ab74:	690b      	ldr	r3, [r1, #16]
 800ab76:	b963      	cbnz	r3, 800ab92 <_svfiprintf_r+0x32>
 800ab78:	2140      	movs	r1, #64	; 0x40
 800ab7a:	f7fe fc51 	bl	8009420 <_malloc_r>
 800ab7e:	6028      	str	r0, [r5, #0]
 800ab80:	6128      	str	r0, [r5, #16]
 800ab82:	b920      	cbnz	r0, 800ab8e <_svfiprintf_r+0x2e>
 800ab84:	230c      	movs	r3, #12
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	e0d0      	b.n	800ad30 <_svfiprintf_r+0x1d0>
 800ab8e:	2340      	movs	r3, #64	; 0x40
 800ab90:	616b      	str	r3, [r5, #20]
 800ab92:	2300      	movs	r3, #0
 800ab94:	9309      	str	r3, [sp, #36]	; 0x24
 800ab96:	2320      	movs	r3, #32
 800ab98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab9c:	2330      	movs	r3, #48	; 0x30
 800ab9e:	f04f 0901 	mov.w	r9, #1
 800aba2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aba6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ad48 <_svfiprintf_r+0x1e8>
 800abaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abae:	4623      	mov	r3, r4
 800abb0:	469a      	mov	sl, r3
 800abb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb6:	b10a      	cbz	r2, 800abbc <_svfiprintf_r+0x5c>
 800abb8:	2a25      	cmp	r2, #37	; 0x25
 800abba:	d1f9      	bne.n	800abb0 <_svfiprintf_r+0x50>
 800abbc:	ebba 0b04 	subs.w	fp, sl, r4
 800abc0:	d00b      	beq.n	800abda <_svfiprintf_r+0x7a>
 800abc2:	465b      	mov	r3, fp
 800abc4:	4622      	mov	r2, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	4638      	mov	r0, r7
 800abca:	f7ff ff6f 	bl	800aaac <__ssputs_r>
 800abce:	3001      	adds	r0, #1
 800abd0:	f000 80a9 	beq.w	800ad26 <_svfiprintf_r+0x1c6>
 800abd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd6:	445a      	add	r2, fp
 800abd8:	9209      	str	r2, [sp, #36]	; 0x24
 800abda:	f89a 3000 	ldrb.w	r3, [sl]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 80a1 	beq.w	800ad26 <_svfiprintf_r+0x1c6>
 800abe4:	2300      	movs	r3, #0
 800abe6:	f04f 32ff 	mov.w	r2, #4294967295
 800abea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abee:	f10a 0a01 	add.w	sl, sl, #1
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	9307      	str	r3, [sp, #28]
 800abf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abfa:	931a      	str	r3, [sp, #104]	; 0x68
 800abfc:	4654      	mov	r4, sl
 800abfe:	2205      	movs	r2, #5
 800ac00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac04:	4850      	ldr	r0, [pc, #320]	; (800ad48 <_svfiprintf_r+0x1e8>)
 800ac06:	f7fd fd0a 	bl	800861e <memchr>
 800ac0a:	9a04      	ldr	r2, [sp, #16]
 800ac0c:	b9d8      	cbnz	r0, 800ac46 <_svfiprintf_r+0xe6>
 800ac0e:	06d0      	lsls	r0, r2, #27
 800ac10:	bf44      	itt	mi
 800ac12:	2320      	movmi	r3, #32
 800ac14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac18:	0711      	lsls	r1, r2, #28
 800ac1a:	bf44      	itt	mi
 800ac1c:	232b      	movmi	r3, #43	; 0x2b
 800ac1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac22:	f89a 3000 	ldrb.w	r3, [sl]
 800ac26:	2b2a      	cmp	r3, #42	; 0x2a
 800ac28:	d015      	beq.n	800ac56 <_svfiprintf_r+0xf6>
 800ac2a:	4654      	mov	r4, sl
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f04f 0c0a 	mov.w	ip, #10
 800ac32:	9a07      	ldr	r2, [sp, #28]
 800ac34:	4621      	mov	r1, r4
 800ac36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac3a:	3b30      	subs	r3, #48	; 0x30
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d94d      	bls.n	800acdc <_svfiprintf_r+0x17c>
 800ac40:	b1b0      	cbz	r0, 800ac70 <_svfiprintf_r+0x110>
 800ac42:	9207      	str	r2, [sp, #28]
 800ac44:	e014      	b.n	800ac70 <_svfiprintf_r+0x110>
 800ac46:	eba0 0308 	sub.w	r3, r0, r8
 800ac4a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	46a2      	mov	sl, r4
 800ac52:	9304      	str	r3, [sp, #16]
 800ac54:	e7d2      	b.n	800abfc <_svfiprintf_r+0x9c>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	1d19      	adds	r1, r3, #4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	9103      	str	r1, [sp, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	bfbb      	ittet	lt
 800ac62:	425b      	neglt	r3, r3
 800ac64:	f042 0202 	orrlt.w	r2, r2, #2
 800ac68:	9307      	strge	r3, [sp, #28]
 800ac6a:	9307      	strlt	r3, [sp, #28]
 800ac6c:	bfb8      	it	lt
 800ac6e:	9204      	strlt	r2, [sp, #16]
 800ac70:	7823      	ldrb	r3, [r4, #0]
 800ac72:	2b2e      	cmp	r3, #46	; 0x2e
 800ac74:	d10c      	bne.n	800ac90 <_svfiprintf_r+0x130>
 800ac76:	7863      	ldrb	r3, [r4, #1]
 800ac78:	2b2a      	cmp	r3, #42	; 0x2a
 800ac7a:	d134      	bne.n	800ace6 <_svfiprintf_r+0x186>
 800ac7c:	9b03      	ldr	r3, [sp, #12]
 800ac7e:	3402      	adds	r4, #2
 800ac80:	1d1a      	adds	r2, r3, #4
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	9203      	str	r2, [sp, #12]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	bfb8      	it	lt
 800ac8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac8e:	9305      	str	r3, [sp, #20]
 800ac90:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ad4c <_svfiprintf_r+0x1ec>
 800ac94:	2203      	movs	r2, #3
 800ac96:	4650      	mov	r0, sl
 800ac98:	7821      	ldrb	r1, [r4, #0]
 800ac9a:	f7fd fcc0 	bl	800861e <memchr>
 800ac9e:	b138      	cbz	r0, 800acb0 <_svfiprintf_r+0x150>
 800aca0:	2240      	movs	r2, #64	; 0x40
 800aca2:	9b04      	ldr	r3, [sp, #16]
 800aca4:	eba0 000a 	sub.w	r0, r0, sl
 800aca8:	4082      	lsls	r2, r0
 800acaa:	4313      	orrs	r3, r2
 800acac:	3401      	adds	r4, #1
 800acae:	9304      	str	r3, [sp, #16]
 800acb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb4:	2206      	movs	r2, #6
 800acb6:	4826      	ldr	r0, [pc, #152]	; (800ad50 <_svfiprintf_r+0x1f0>)
 800acb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acbc:	f7fd fcaf 	bl	800861e <memchr>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d038      	beq.n	800ad36 <_svfiprintf_r+0x1d6>
 800acc4:	4b23      	ldr	r3, [pc, #140]	; (800ad54 <_svfiprintf_r+0x1f4>)
 800acc6:	bb1b      	cbnz	r3, 800ad10 <_svfiprintf_r+0x1b0>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	3307      	adds	r3, #7
 800accc:	f023 0307 	bic.w	r3, r3, #7
 800acd0:	3308      	adds	r3, #8
 800acd2:	9303      	str	r3, [sp, #12]
 800acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd6:	4433      	add	r3, r6
 800acd8:	9309      	str	r3, [sp, #36]	; 0x24
 800acda:	e768      	b.n	800abae <_svfiprintf_r+0x4e>
 800acdc:	460c      	mov	r4, r1
 800acde:	2001      	movs	r0, #1
 800ace0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ace4:	e7a6      	b.n	800ac34 <_svfiprintf_r+0xd4>
 800ace6:	2300      	movs	r3, #0
 800ace8:	f04f 0c0a 	mov.w	ip, #10
 800acec:	4619      	mov	r1, r3
 800acee:	3401      	adds	r4, #1
 800acf0:	9305      	str	r3, [sp, #20]
 800acf2:	4620      	mov	r0, r4
 800acf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf8:	3a30      	subs	r2, #48	; 0x30
 800acfa:	2a09      	cmp	r2, #9
 800acfc:	d903      	bls.n	800ad06 <_svfiprintf_r+0x1a6>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0c6      	beq.n	800ac90 <_svfiprintf_r+0x130>
 800ad02:	9105      	str	r1, [sp, #20]
 800ad04:	e7c4      	b.n	800ac90 <_svfiprintf_r+0x130>
 800ad06:	4604      	mov	r4, r0
 800ad08:	2301      	movs	r3, #1
 800ad0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad0e:	e7f0      	b.n	800acf2 <_svfiprintf_r+0x192>
 800ad10:	ab03      	add	r3, sp, #12
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	462a      	mov	r2, r5
 800ad16:	4638      	mov	r0, r7
 800ad18:	4b0f      	ldr	r3, [pc, #60]	; (800ad58 <_svfiprintf_r+0x1f8>)
 800ad1a:	a904      	add	r1, sp, #16
 800ad1c:	f7fc fcb4 	bl	8007688 <_printf_float>
 800ad20:	1c42      	adds	r2, r0, #1
 800ad22:	4606      	mov	r6, r0
 800ad24:	d1d6      	bne.n	800acd4 <_svfiprintf_r+0x174>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	065b      	lsls	r3, r3, #25
 800ad2a:	f53f af2d 	bmi.w	800ab88 <_svfiprintf_r+0x28>
 800ad2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad30:	b01d      	add	sp, #116	; 0x74
 800ad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad36:	ab03      	add	r3, sp, #12
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <_svfiprintf_r+0x1f8>)
 800ad40:	a904      	add	r1, sp, #16
 800ad42:	f7fc ff41 	bl	8007bc8 <_printf_i>
 800ad46:	e7eb      	b.n	800ad20 <_svfiprintf_r+0x1c0>
 800ad48:	0800c150 	.word	0x0800c150
 800ad4c:	0800c156 	.word	0x0800c156
 800ad50:	0800c15a 	.word	0x0800c15a
 800ad54:	08007689 	.word	0x08007689
 800ad58:	0800aaad 	.word	0x0800aaad

0800ad5c <__sflush_r>:
 800ad5c:	898a      	ldrh	r2, [r1, #12]
 800ad5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad60:	4605      	mov	r5, r0
 800ad62:	0710      	lsls	r0, r2, #28
 800ad64:	460c      	mov	r4, r1
 800ad66:	d457      	bmi.n	800ae18 <__sflush_r+0xbc>
 800ad68:	684b      	ldr	r3, [r1, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	dc04      	bgt.n	800ad78 <__sflush_r+0x1c>
 800ad6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dc01      	bgt.n	800ad78 <__sflush_r+0x1c>
 800ad74:	2000      	movs	r0, #0
 800ad76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad7a:	2e00      	cmp	r6, #0
 800ad7c:	d0fa      	beq.n	800ad74 <__sflush_r+0x18>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad84:	682f      	ldr	r7, [r5, #0]
 800ad86:	6a21      	ldr	r1, [r4, #32]
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	d032      	beq.n	800adf2 <__sflush_r+0x96>
 800ad8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	075a      	lsls	r2, r3, #29
 800ad92:	d505      	bpl.n	800ada0 <__sflush_r+0x44>
 800ad94:	6863      	ldr	r3, [r4, #4]
 800ad96:	1ac0      	subs	r0, r0, r3
 800ad98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad9a:	b10b      	cbz	r3, 800ada0 <__sflush_r+0x44>
 800ad9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad9e:	1ac0      	subs	r0, r0, r3
 800ada0:	2300      	movs	r3, #0
 800ada2:	4602      	mov	r2, r0
 800ada4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ada6:	4628      	mov	r0, r5
 800ada8:	6a21      	ldr	r1, [r4, #32]
 800adaa:	47b0      	blx	r6
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	d106      	bne.n	800adc0 <__sflush_r+0x64>
 800adb2:	6829      	ldr	r1, [r5, #0]
 800adb4:	291d      	cmp	r1, #29
 800adb6:	d82b      	bhi.n	800ae10 <__sflush_r+0xb4>
 800adb8:	4a28      	ldr	r2, [pc, #160]	; (800ae5c <__sflush_r+0x100>)
 800adba:	410a      	asrs	r2, r1
 800adbc:	07d6      	lsls	r6, r2, #31
 800adbe:	d427      	bmi.n	800ae10 <__sflush_r+0xb4>
 800adc0:	2200      	movs	r2, #0
 800adc2:	6062      	str	r2, [r4, #4]
 800adc4:	6922      	ldr	r2, [r4, #16]
 800adc6:	04d9      	lsls	r1, r3, #19
 800adc8:	6022      	str	r2, [r4, #0]
 800adca:	d504      	bpl.n	800add6 <__sflush_r+0x7a>
 800adcc:	1c42      	adds	r2, r0, #1
 800adce:	d101      	bne.n	800add4 <__sflush_r+0x78>
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	b903      	cbnz	r3, 800add6 <__sflush_r+0x7a>
 800add4:	6560      	str	r0, [r4, #84]	; 0x54
 800add6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800add8:	602f      	str	r7, [r5, #0]
 800adda:	2900      	cmp	r1, #0
 800addc:	d0ca      	beq.n	800ad74 <__sflush_r+0x18>
 800adde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ade2:	4299      	cmp	r1, r3
 800ade4:	d002      	beq.n	800adec <__sflush_r+0x90>
 800ade6:	4628      	mov	r0, r5
 800ade8:	f7fe faaa 	bl	8009340 <_free_r>
 800adec:	2000      	movs	r0, #0
 800adee:	6360      	str	r0, [r4, #52]	; 0x34
 800adf0:	e7c1      	b.n	800ad76 <__sflush_r+0x1a>
 800adf2:	2301      	movs	r3, #1
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b0      	blx	r6
 800adf8:	1c41      	adds	r1, r0, #1
 800adfa:	d1c8      	bne.n	800ad8e <__sflush_r+0x32>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0c5      	beq.n	800ad8e <__sflush_r+0x32>
 800ae02:	2b1d      	cmp	r3, #29
 800ae04:	d001      	beq.n	800ae0a <__sflush_r+0xae>
 800ae06:	2b16      	cmp	r3, #22
 800ae08:	d101      	bne.n	800ae0e <__sflush_r+0xb2>
 800ae0a:	602f      	str	r7, [r5, #0]
 800ae0c:	e7b2      	b.n	800ad74 <__sflush_r+0x18>
 800ae0e:	89a3      	ldrh	r3, [r4, #12]
 800ae10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae14:	81a3      	strh	r3, [r4, #12]
 800ae16:	e7ae      	b.n	800ad76 <__sflush_r+0x1a>
 800ae18:	690f      	ldr	r7, [r1, #16]
 800ae1a:	2f00      	cmp	r7, #0
 800ae1c:	d0aa      	beq.n	800ad74 <__sflush_r+0x18>
 800ae1e:	0793      	lsls	r3, r2, #30
 800ae20:	bf18      	it	ne
 800ae22:	2300      	movne	r3, #0
 800ae24:	680e      	ldr	r6, [r1, #0]
 800ae26:	bf08      	it	eq
 800ae28:	694b      	ldreq	r3, [r1, #20]
 800ae2a:	1bf6      	subs	r6, r6, r7
 800ae2c:	600f      	str	r7, [r1, #0]
 800ae2e:	608b      	str	r3, [r1, #8]
 800ae30:	2e00      	cmp	r6, #0
 800ae32:	dd9f      	ble.n	800ad74 <__sflush_r+0x18>
 800ae34:	4633      	mov	r3, r6
 800ae36:	463a      	mov	r2, r7
 800ae38:	4628      	mov	r0, r5
 800ae3a:	6a21      	ldr	r1, [r4, #32]
 800ae3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ae40:	47e0      	blx	ip
 800ae42:	2800      	cmp	r0, #0
 800ae44:	dc06      	bgt.n	800ae54 <__sflush_r+0xf8>
 800ae46:	89a3      	ldrh	r3, [r4, #12]
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	e790      	b.n	800ad76 <__sflush_r+0x1a>
 800ae54:	4407      	add	r7, r0
 800ae56:	1a36      	subs	r6, r6, r0
 800ae58:	e7ea      	b.n	800ae30 <__sflush_r+0xd4>
 800ae5a:	bf00      	nop
 800ae5c:	dfbffffe 	.word	0xdfbffffe

0800ae60 <_fflush_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	690b      	ldr	r3, [r1, #16]
 800ae64:	4605      	mov	r5, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	b913      	cbnz	r3, 800ae70 <_fflush_r+0x10>
 800ae6a:	2500      	movs	r5, #0
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	bd38      	pop	{r3, r4, r5, pc}
 800ae70:	b118      	cbz	r0, 800ae7a <_fflush_r+0x1a>
 800ae72:	6a03      	ldr	r3, [r0, #32]
 800ae74:	b90b      	cbnz	r3, 800ae7a <_fflush_r+0x1a>
 800ae76:	f7fd fa63 	bl	8008340 <__sinit>
 800ae7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0f3      	beq.n	800ae6a <_fflush_r+0xa>
 800ae82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae84:	07d0      	lsls	r0, r2, #31
 800ae86:	d404      	bmi.n	800ae92 <_fflush_r+0x32>
 800ae88:	0599      	lsls	r1, r3, #22
 800ae8a:	d402      	bmi.n	800ae92 <_fflush_r+0x32>
 800ae8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae8e:	f7fd fbc4 	bl	800861a <__retarget_lock_acquire_recursive>
 800ae92:	4628      	mov	r0, r5
 800ae94:	4621      	mov	r1, r4
 800ae96:	f7ff ff61 	bl	800ad5c <__sflush_r>
 800ae9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	07da      	lsls	r2, r3, #31
 800aea0:	d4e4      	bmi.n	800ae6c <_fflush_r+0xc>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	059b      	lsls	r3, r3, #22
 800aea6:	d4e1      	bmi.n	800ae6c <_fflush_r+0xc>
 800aea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeaa:	f7fd fbb7 	bl	800861c <__retarget_lock_release_recursive>
 800aeae:	e7dd      	b.n	800ae6c <_fflush_r+0xc>

0800aeb0 <memmove>:
 800aeb0:	4288      	cmp	r0, r1
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	eb01 0402 	add.w	r4, r1, r2
 800aeb8:	d902      	bls.n	800aec0 <memmove+0x10>
 800aeba:	4284      	cmp	r4, r0
 800aebc:	4623      	mov	r3, r4
 800aebe:	d807      	bhi.n	800aed0 <memmove+0x20>
 800aec0:	1e43      	subs	r3, r0, #1
 800aec2:	42a1      	cmp	r1, r4
 800aec4:	d008      	beq.n	800aed8 <memmove+0x28>
 800aec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aece:	e7f8      	b.n	800aec2 <memmove+0x12>
 800aed0:	4601      	mov	r1, r0
 800aed2:	4402      	add	r2, r0
 800aed4:	428a      	cmp	r2, r1
 800aed6:	d100      	bne.n	800aeda <memmove+0x2a>
 800aed8:	bd10      	pop	{r4, pc}
 800aeda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aee2:	e7f7      	b.n	800aed4 <memmove+0x24>

0800aee4 <strncmp>:
 800aee4:	b510      	push	{r4, lr}
 800aee6:	b16a      	cbz	r2, 800af04 <strncmp+0x20>
 800aee8:	3901      	subs	r1, #1
 800aeea:	1884      	adds	r4, r0, r2
 800aeec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aef0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d103      	bne.n	800af00 <strncmp+0x1c>
 800aef8:	42a0      	cmp	r0, r4
 800aefa:	d001      	beq.n	800af00 <strncmp+0x1c>
 800aefc:	2a00      	cmp	r2, #0
 800aefe:	d1f5      	bne.n	800aeec <strncmp+0x8>
 800af00:	1ad0      	subs	r0, r2, r3
 800af02:	bd10      	pop	{r4, pc}
 800af04:	4610      	mov	r0, r2
 800af06:	e7fc      	b.n	800af02 <strncmp+0x1e>

0800af08 <_sbrk_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	2300      	movs	r3, #0
 800af0c:	4d05      	ldr	r5, [pc, #20]	; (800af24 <_sbrk_r+0x1c>)
 800af0e:	4604      	mov	r4, r0
 800af10:	4608      	mov	r0, r1
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	f7f6 fe8c 	bl	8001c30 <_sbrk>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_sbrk_r+0x1a>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_sbrk_r+0x1a>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	200014b4 	.word	0x200014b4

0800af28 <nan>:
 800af28:	2000      	movs	r0, #0
 800af2a:	4901      	ldr	r1, [pc, #4]	; (800af30 <nan+0x8>)
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	7ff80000 	.word	0x7ff80000

0800af34 <__assert_func>:
 800af34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af36:	4614      	mov	r4, r2
 800af38:	461a      	mov	r2, r3
 800af3a:	4b09      	ldr	r3, [pc, #36]	; (800af60 <__assert_func+0x2c>)
 800af3c:	4605      	mov	r5, r0
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68d8      	ldr	r0, [r3, #12]
 800af42:	b14c      	cbz	r4, 800af58 <__assert_func+0x24>
 800af44:	4b07      	ldr	r3, [pc, #28]	; (800af64 <__assert_func+0x30>)
 800af46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af4a:	9100      	str	r1, [sp, #0]
 800af4c:	462b      	mov	r3, r5
 800af4e:	4906      	ldr	r1, [pc, #24]	; (800af68 <__assert_func+0x34>)
 800af50:	f000 fbca 	bl	800b6e8 <fiprintf>
 800af54:	f000 fbda 	bl	800b70c <abort>
 800af58:	4b04      	ldr	r3, [pc, #16]	; (800af6c <__assert_func+0x38>)
 800af5a:	461c      	mov	r4, r3
 800af5c:	e7f3      	b.n	800af46 <__assert_func+0x12>
 800af5e:	bf00      	nop
 800af60:	20000074 	.word	0x20000074
 800af64:	0800c169 	.word	0x0800c169
 800af68:	0800c176 	.word	0x0800c176
 800af6c:	0800c1a4 	.word	0x0800c1a4

0800af70 <_calloc_r>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	fba1 5402 	umull	r5, r4, r1, r2
 800af76:	b934      	cbnz	r4, 800af86 <_calloc_r+0x16>
 800af78:	4629      	mov	r1, r5
 800af7a:	f7fe fa51 	bl	8009420 <_malloc_r>
 800af7e:	4606      	mov	r6, r0
 800af80:	b928      	cbnz	r0, 800af8e <_calloc_r+0x1e>
 800af82:	4630      	mov	r0, r6
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	220c      	movs	r2, #12
 800af88:	2600      	movs	r6, #0
 800af8a:	6002      	str	r2, [r0, #0]
 800af8c:	e7f9      	b.n	800af82 <_calloc_r+0x12>
 800af8e:	462a      	mov	r2, r5
 800af90:	4621      	mov	r1, r4
 800af92:	f7fd fa6e 	bl	8008472 <memset>
 800af96:	e7f4      	b.n	800af82 <_calloc_r+0x12>

0800af98 <rshift>:
 800af98:	6903      	ldr	r3, [r0, #16]
 800af9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afa2:	f100 0414 	add.w	r4, r0, #20
 800afa6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afaa:	dd46      	ble.n	800b03a <rshift+0xa2>
 800afac:	f011 011f 	ands.w	r1, r1, #31
 800afb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afb8:	d10c      	bne.n	800afd4 <rshift+0x3c>
 800afba:	4629      	mov	r1, r5
 800afbc:	f100 0710 	add.w	r7, r0, #16
 800afc0:	42b1      	cmp	r1, r6
 800afc2:	d335      	bcc.n	800b030 <rshift+0x98>
 800afc4:	1a9b      	subs	r3, r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	1eea      	subs	r2, r5, #3
 800afca:	4296      	cmp	r6, r2
 800afcc:	bf38      	it	cc
 800afce:	2300      	movcc	r3, #0
 800afd0:	4423      	add	r3, r4
 800afd2:	e015      	b.n	800b000 <rshift+0x68>
 800afd4:	46a1      	mov	r9, r4
 800afd6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800afda:	f1c1 0820 	rsb	r8, r1, #32
 800afde:	40cf      	lsrs	r7, r1
 800afe0:	f105 0e04 	add.w	lr, r5, #4
 800afe4:	4576      	cmp	r6, lr
 800afe6:	46f4      	mov	ip, lr
 800afe8:	d816      	bhi.n	800b018 <rshift+0x80>
 800afea:	1a9a      	subs	r2, r3, r2
 800afec:	0092      	lsls	r2, r2, #2
 800afee:	3a04      	subs	r2, #4
 800aff0:	3501      	adds	r5, #1
 800aff2:	42ae      	cmp	r6, r5
 800aff4:	bf38      	it	cc
 800aff6:	2200      	movcc	r2, #0
 800aff8:	18a3      	adds	r3, r4, r2
 800affa:	50a7      	str	r7, [r4, r2]
 800affc:	b107      	cbz	r7, 800b000 <rshift+0x68>
 800affe:	3304      	adds	r3, #4
 800b000:	42a3      	cmp	r3, r4
 800b002:	eba3 0204 	sub.w	r2, r3, r4
 800b006:	bf08      	it	eq
 800b008:	2300      	moveq	r3, #0
 800b00a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b00e:	6102      	str	r2, [r0, #16]
 800b010:	bf08      	it	eq
 800b012:	6143      	streq	r3, [r0, #20]
 800b014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b018:	f8dc c000 	ldr.w	ip, [ip]
 800b01c:	fa0c fc08 	lsl.w	ip, ip, r8
 800b020:	ea4c 0707 	orr.w	r7, ip, r7
 800b024:	f849 7b04 	str.w	r7, [r9], #4
 800b028:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b02c:	40cf      	lsrs	r7, r1
 800b02e:	e7d9      	b.n	800afe4 <rshift+0x4c>
 800b030:	f851 cb04 	ldr.w	ip, [r1], #4
 800b034:	f847 cf04 	str.w	ip, [r7, #4]!
 800b038:	e7c2      	b.n	800afc0 <rshift+0x28>
 800b03a:	4623      	mov	r3, r4
 800b03c:	e7e0      	b.n	800b000 <rshift+0x68>

0800b03e <__hexdig_fun>:
 800b03e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b042:	2b09      	cmp	r3, #9
 800b044:	d802      	bhi.n	800b04c <__hexdig_fun+0xe>
 800b046:	3820      	subs	r0, #32
 800b048:	b2c0      	uxtb	r0, r0
 800b04a:	4770      	bx	lr
 800b04c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b050:	2b05      	cmp	r3, #5
 800b052:	d801      	bhi.n	800b058 <__hexdig_fun+0x1a>
 800b054:	3847      	subs	r0, #71	; 0x47
 800b056:	e7f7      	b.n	800b048 <__hexdig_fun+0xa>
 800b058:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b05c:	2b05      	cmp	r3, #5
 800b05e:	d801      	bhi.n	800b064 <__hexdig_fun+0x26>
 800b060:	3827      	subs	r0, #39	; 0x27
 800b062:	e7f1      	b.n	800b048 <__hexdig_fun+0xa>
 800b064:	2000      	movs	r0, #0
 800b066:	4770      	bx	lr

0800b068 <__gethex>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	4681      	mov	r9, r0
 800b06e:	468a      	mov	sl, r1
 800b070:	4617      	mov	r7, r2
 800b072:	680a      	ldr	r2, [r1, #0]
 800b074:	b085      	sub	sp, #20
 800b076:	f102 0b02 	add.w	fp, r2, #2
 800b07a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b07e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b082:	9302      	str	r3, [sp, #8]
 800b084:	32fe      	adds	r2, #254	; 0xfe
 800b086:	eb02 030b 	add.w	r3, r2, fp
 800b08a:	46d8      	mov	r8, fp
 800b08c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b090:	9301      	str	r3, [sp, #4]
 800b092:	2830      	cmp	r0, #48	; 0x30
 800b094:	d0f7      	beq.n	800b086 <__gethex+0x1e>
 800b096:	f7ff ffd2 	bl	800b03e <__hexdig_fun>
 800b09a:	4604      	mov	r4, r0
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d138      	bne.n	800b112 <__gethex+0xaa>
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	49a7      	ldr	r1, [pc, #668]	; (800b344 <__gethex+0x2dc>)
 800b0a6:	f7ff ff1d 	bl	800aee4 <strncmp>
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d169      	bne.n	800b184 <__gethex+0x11c>
 800b0b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b0b4:	465d      	mov	r5, fp
 800b0b6:	f7ff ffc2 	bl	800b03e <__hexdig_fun>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d064      	beq.n	800b188 <__gethex+0x120>
 800b0be:	465a      	mov	r2, fp
 800b0c0:	7810      	ldrb	r0, [r2, #0]
 800b0c2:	4690      	mov	r8, r2
 800b0c4:	2830      	cmp	r0, #48	; 0x30
 800b0c6:	f102 0201 	add.w	r2, r2, #1
 800b0ca:	d0f9      	beq.n	800b0c0 <__gethex+0x58>
 800b0cc:	f7ff ffb7 	bl	800b03e <__hexdig_fun>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	fab0 f480 	clz	r4, r0
 800b0d6:	465e      	mov	r6, fp
 800b0d8:	0964      	lsrs	r4, r4, #5
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	4642      	mov	r2, r8
 800b0de:	4615      	mov	r5, r2
 800b0e0:	7828      	ldrb	r0, [r5, #0]
 800b0e2:	3201      	adds	r2, #1
 800b0e4:	f7ff ffab 	bl	800b03e <__hexdig_fun>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d1f8      	bne.n	800b0de <__gethex+0x76>
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	4994      	ldr	r1, [pc, #592]	; (800b344 <__gethex+0x2dc>)
 800b0f2:	f7ff fef7 	bl	800aee4 <strncmp>
 800b0f6:	b978      	cbnz	r0, 800b118 <__gethex+0xb0>
 800b0f8:	b946      	cbnz	r6, 800b10c <__gethex+0xa4>
 800b0fa:	1c6e      	adds	r6, r5, #1
 800b0fc:	4632      	mov	r2, r6
 800b0fe:	4615      	mov	r5, r2
 800b100:	7828      	ldrb	r0, [r5, #0]
 800b102:	3201      	adds	r2, #1
 800b104:	f7ff ff9b 	bl	800b03e <__hexdig_fun>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d1f8      	bne.n	800b0fe <__gethex+0x96>
 800b10c:	1b73      	subs	r3, r6, r5
 800b10e:	009e      	lsls	r6, r3, #2
 800b110:	e004      	b.n	800b11c <__gethex+0xb4>
 800b112:	2400      	movs	r4, #0
 800b114:	4626      	mov	r6, r4
 800b116:	e7e1      	b.n	800b0dc <__gethex+0x74>
 800b118:	2e00      	cmp	r6, #0
 800b11a:	d1f7      	bne.n	800b10c <__gethex+0xa4>
 800b11c:	782b      	ldrb	r3, [r5, #0]
 800b11e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b122:	2b50      	cmp	r3, #80	; 0x50
 800b124:	d13d      	bne.n	800b1a2 <__gethex+0x13a>
 800b126:	786b      	ldrb	r3, [r5, #1]
 800b128:	2b2b      	cmp	r3, #43	; 0x2b
 800b12a:	d02f      	beq.n	800b18c <__gethex+0x124>
 800b12c:	2b2d      	cmp	r3, #45	; 0x2d
 800b12e:	d031      	beq.n	800b194 <__gethex+0x12c>
 800b130:	f04f 0b00 	mov.w	fp, #0
 800b134:	1c69      	adds	r1, r5, #1
 800b136:	7808      	ldrb	r0, [r1, #0]
 800b138:	f7ff ff81 	bl	800b03e <__hexdig_fun>
 800b13c:	1e42      	subs	r2, r0, #1
 800b13e:	b2d2      	uxtb	r2, r2
 800b140:	2a18      	cmp	r2, #24
 800b142:	d82e      	bhi.n	800b1a2 <__gethex+0x13a>
 800b144:	f1a0 0210 	sub.w	r2, r0, #16
 800b148:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b14c:	f7ff ff77 	bl	800b03e <__hexdig_fun>
 800b150:	f100 3cff 	add.w	ip, r0, #4294967295
 800b154:	fa5f fc8c 	uxtb.w	ip, ip
 800b158:	f1bc 0f18 	cmp.w	ip, #24
 800b15c:	d91d      	bls.n	800b19a <__gethex+0x132>
 800b15e:	f1bb 0f00 	cmp.w	fp, #0
 800b162:	d000      	beq.n	800b166 <__gethex+0xfe>
 800b164:	4252      	negs	r2, r2
 800b166:	4416      	add	r6, r2
 800b168:	f8ca 1000 	str.w	r1, [sl]
 800b16c:	b1dc      	cbz	r4, 800b1a6 <__gethex+0x13e>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	bf14      	ite	ne
 800b174:	f04f 0800 	movne.w	r8, #0
 800b178:	f04f 0806 	moveq.w	r8, #6
 800b17c:	4640      	mov	r0, r8
 800b17e:	b005      	add	sp, #20
 800b180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b184:	4645      	mov	r5, r8
 800b186:	4626      	mov	r6, r4
 800b188:	2401      	movs	r4, #1
 800b18a:	e7c7      	b.n	800b11c <__gethex+0xb4>
 800b18c:	f04f 0b00 	mov.w	fp, #0
 800b190:	1ca9      	adds	r1, r5, #2
 800b192:	e7d0      	b.n	800b136 <__gethex+0xce>
 800b194:	f04f 0b01 	mov.w	fp, #1
 800b198:	e7fa      	b.n	800b190 <__gethex+0x128>
 800b19a:	230a      	movs	r3, #10
 800b19c:	fb03 0002 	mla	r0, r3, r2, r0
 800b1a0:	e7d0      	b.n	800b144 <__gethex+0xdc>
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	e7e0      	b.n	800b168 <__gethex+0x100>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	eba5 0308 	sub.w	r3, r5, r8
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	2b07      	cmp	r3, #7
 800b1b0:	dc0a      	bgt.n	800b1c8 <__gethex+0x160>
 800b1b2:	4648      	mov	r0, r9
 800b1b4:	f7fe f9c0 	bl	8009538 <_Balloc>
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	b940      	cbnz	r0, 800b1ce <__gethex+0x166>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	21e4      	movs	r1, #228	; 0xe4
 800b1c0:	4b61      	ldr	r3, [pc, #388]	; (800b348 <__gethex+0x2e0>)
 800b1c2:	4862      	ldr	r0, [pc, #392]	; (800b34c <__gethex+0x2e4>)
 800b1c4:	f7ff feb6 	bl	800af34 <__assert_func>
 800b1c8:	3101      	adds	r1, #1
 800b1ca:	105b      	asrs	r3, r3, #1
 800b1cc:	e7ef      	b.n	800b1ae <__gethex+0x146>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	469b      	mov	fp, r3
 800b1d2:	f100 0a14 	add.w	sl, r0, #20
 800b1d6:	f8cd a004 	str.w	sl, [sp, #4]
 800b1da:	45a8      	cmp	r8, r5
 800b1dc:	d344      	bcc.n	800b268 <__gethex+0x200>
 800b1de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b1e2:	4658      	mov	r0, fp
 800b1e4:	f848 bb04 	str.w	fp, [r8], #4
 800b1e8:	eba8 080a 	sub.w	r8, r8, sl
 800b1ec:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800b1f0:	6122      	str	r2, [r4, #16]
 800b1f2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800b1f6:	f7fe fa91 	bl	800971c <__hi0bits>
 800b1fa:	683d      	ldr	r5, [r7, #0]
 800b1fc:	eba8 0800 	sub.w	r8, r8, r0
 800b200:	45a8      	cmp	r8, r5
 800b202:	dd59      	ble.n	800b2b8 <__gethex+0x250>
 800b204:	eba8 0805 	sub.w	r8, r8, r5
 800b208:	4641      	mov	r1, r8
 800b20a:	4620      	mov	r0, r4
 800b20c:	f7fe fe0f 	bl	8009e2e <__any_on>
 800b210:	4683      	mov	fp, r0
 800b212:	b1b8      	cbz	r0, 800b244 <__gethex+0x1dc>
 800b214:	f04f 0b01 	mov.w	fp, #1
 800b218:	f108 33ff 	add.w	r3, r8, #4294967295
 800b21c:	1159      	asrs	r1, r3, #5
 800b21e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b222:	f003 021f 	and.w	r2, r3, #31
 800b226:	fa0b f202 	lsl.w	r2, fp, r2
 800b22a:	420a      	tst	r2, r1
 800b22c:	d00a      	beq.n	800b244 <__gethex+0x1dc>
 800b22e:	455b      	cmp	r3, fp
 800b230:	dd06      	ble.n	800b240 <__gethex+0x1d8>
 800b232:	4620      	mov	r0, r4
 800b234:	f1a8 0102 	sub.w	r1, r8, #2
 800b238:	f7fe fdf9 	bl	8009e2e <__any_on>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d138      	bne.n	800b2b2 <__gethex+0x24a>
 800b240:	f04f 0b02 	mov.w	fp, #2
 800b244:	4641      	mov	r1, r8
 800b246:	4620      	mov	r0, r4
 800b248:	f7ff fea6 	bl	800af98 <rshift>
 800b24c:	4446      	add	r6, r8
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	42b3      	cmp	r3, r6
 800b252:	da41      	bge.n	800b2d8 <__gethex+0x270>
 800b254:	4621      	mov	r1, r4
 800b256:	4648      	mov	r0, r9
 800b258:	f7fe f9ae 	bl	80095b8 <_Bfree>
 800b25c:	2300      	movs	r3, #0
 800b25e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b260:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	e789      	b.n	800b17c <__gethex+0x114>
 800b268:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b26c:	2a2e      	cmp	r2, #46	; 0x2e
 800b26e:	d014      	beq.n	800b29a <__gethex+0x232>
 800b270:	2b20      	cmp	r3, #32
 800b272:	d106      	bne.n	800b282 <__gethex+0x21a>
 800b274:	9b01      	ldr	r3, [sp, #4]
 800b276:	f843 bb04 	str.w	fp, [r3], #4
 800b27a:	f04f 0b00 	mov.w	fp, #0
 800b27e:	9301      	str	r3, [sp, #4]
 800b280:	465b      	mov	r3, fp
 800b282:	7828      	ldrb	r0, [r5, #0]
 800b284:	9303      	str	r3, [sp, #12]
 800b286:	f7ff feda 	bl	800b03e <__hexdig_fun>
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	f000 000f 	and.w	r0, r0, #15
 800b290:	4098      	lsls	r0, r3
 800b292:	ea4b 0b00 	orr.w	fp, fp, r0
 800b296:	3304      	adds	r3, #4
 800b298:	e79f      	b.n	800b1da <__gethex+0x172>
 800b29a:	45a8      	cmp	r8, r5
 800b29c:	d8e8      	bhi.n	800b270 <__gethex+0x208>
 800b29e:	2201      	movs	r2, #1
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	4928      	ldr	r1, [pc, #160]	; (800b344 <__gethex+0x2dc>)
 800b2a4:	9303      	str	r3, [sp, #12]
 800b2a6:	f7ff fe1d 	bl	800aee4 <strncmp>
 800b2aa:	9b03      	ldr	r3, [sp, #12]
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d1df      	bne.n	800b270 <__gethex+0x208>
 800b2b0:	e793      	b.n	800b1da <__gethex+0x172>
 800b2b2:	f04f 0b03 	mov.w	fp, #3
 800b2b6:	e7c5      	b.n	800b244 <__gethex+0x1dc>
 800b2b8:	da0b      	bge.n	800b2d2 <__gethex+0x26a>
 800b2ba:	eba5 0808 	sub.w	r8, r5, r8
 800b2be:	4621      	mov	r1, r4
 800b2c0:	4642      	mov	r2, r8
 800b2c2:	4648      	mov	r0, r9
 800b2c4:	f7fe fb90 	bl	80099e8 <__lshift>
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	eba6 0608 	sub.w	r6, r6, r8
 800b2ce:	f100 0a14 	add.w	sl, r0, #20
 800b2d2:	f04f 0b00 	mov.w	fp, #0
 800b2d6:	e7ba      	b.n	800b24e <__gethex+0x1e6>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	42b3      	cmp	r3, r6
 800b2dc:	dd74      	ble.n	800b3c8 <__gethex+0x360>
 800b2de:	1b9e      	subs	r6, r3, r6
 800b2e0:	42b5      	cmp	r5, r6
 800b2e2:	dc35      	bgt.n	800b350 <__gethex+0x2e8>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d023      	beq.n	800b332 <__gethex+0x2ca>
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	d025      	beq.n	800b33a <__gethex+0x2d2>
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d115      	bne.n	800b31e <__gethex+0x2b6>
 800b2f2:	42b5      	cmp	r5, r6
 800b2f4:	d113      	bne.n	800b31e <__gethex+0x2b6>
 800b2f6:	2d01      	cmp	r5, #1
 800b2f8:	d10b      	bne.n	800b312 <__gethex+0x2aa>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	9a02      	ldr	r2, [sp, #8]
 800b2fe:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	2301      	movs	r3, #1
 800b306:	6123      	str	r3, [r4, #16]
 800b308:	f8ca 3000 	str.w	r3, [sl]
 800b30c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b30e:	601c      	str	r4, [r3, #0]
 800b310:	e734      	b.n	800b17c <__gethex+0x114>
 800b312:	4620      	mov	r0, r4
 800b314:	1e69      	subs	r1, r5, #1
 800b316:	f7fe fd8a 	bl	8009e2e <__any_on>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d1ed      	bne.n	800b2fa <__gethex+0x292>
 800b31e:	4621      	mov	r1, r4
 800b320:	4648      	mov	r0, r9
 800b322:	f7fe f949 	bl	80095b8 <_Bfree>
 800b326:	2300      	movs	r3, #0
 800b328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b32a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	e724      	b.n	800b17c <__gethex+0x114>
 800b332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1f2      	bne.n	800b31e <__gethex+0x2b6>
 800b338:	e7df      	b.n	800b2fa <__gethex+0x292>
 800b33a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1dc      	bne.n	800b2fa <__gethex+0x292>
 800b340:	e7ed      	b.n	800b31e <__gethex+0x2b6>
 800b342:	bf00      	nop
 800b344:	0800c0fc 	.word	0x0800c0fc
 800b348:	0800bf91 	.word	0x0800bf91
 800b34c:	0800c1a5 	.word	0x0800c1a5
 800b350:	f106 38ff 	add.w	r8, r6, #4294967295
 800b354:	f1bb 0f00 	cmp.w	fp, #0
 800b358:	d133      	bne.n	800b3c2 <__gethex+0x35a>
 800b35a:	f1b8 0f00 	cmp.w	r8, #0
 800b35e:	d004      	beq.n	800b36a <__gethex+0x302>
 800b360:	4641      	mov	r1, r8
 800b362:	4620      	mov	r0, r4
 800b364:	f7fe fd63 	bl	8009e2e <__any_on>
 800b368:	4683      	mov	fp, r0
 800b36a:	2301      	movs	r3, #1
 800b36c:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b370:	f008 081f 	and.w	r8, r8, #31
 800b374:	fa03 f308 	lsl.w	r3, r3, r8
 800b378:	f04f 0802 	mov.w	r8, #2
 800b37c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b380:	4631      	mov	r1, r6
 800b382:	4213      	tst	r3, r2
 800b384:	4620      	mov	r0, r4
 800b386:	bf18      	it	ne
 800b388:	f04b 0b02 	orrne.w	fp, fp, #2
 800b38c:	1bad      	subs	r5, r5, r6
 800b38e:	f7ff fe03 	bl	800af98 <rshift>
 800b392:	687e      	ldr	r6, [r7, #4]
 800b394:	f1bb 0f00 	cmp.w	fp, #0
 800b398:	d04a      	beq.n	800b430 <__gethex+0x3c8>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b02      	cmp	r3, #2
 800b39e:	d016      	beq.n	800b3ce <__gethex+0x366>
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d018      	beq.n	800b3d6 <__gethex+0x36e>
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d109      	bne.n	800b3bc <__gethex+0x354>
 800b3a8:	f01b 0f02 	tst.w	fp, #2
 800b3ac:	d006      	beq.n	800b3bc <__gethex+0x354>
 800b3ae:	f8da 3000 	ldr.w	r3, [sl]
 800b3b2:	ea4b 0b03 	orr.w	fp, fp, r3
 800b3b6:	f01b 0f01 	tst.w	fp, #1
 800b3ba:	d10f      	bne.n	800b3dc <__gethex+0x374>
 800b3bc:	f048 0810 	orr.w	r8, r8, #16
 800b3c0:	e036      	b.n	800b430 <__gethex+0x3c8>
 800b3c2:	f04f 0b01 	mov.w	fp, #1
 800b3c6:	e7d0      	b.n	800b36a <__gethex+0x302>
 800b3c8:	f04f 0801 	mov.w	r8, #1
 800b3cc:	e7e2      	b.n	800b394 <__gethex+0x32c>
 800b3ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3d0:	f1c3 0301 	rsb	r3, r3, #1
 800b3d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d0ef      	beq.n	800b3bc <__gethex+0x354>
 800b3dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3e0:	f104 0214 	add.w	r2, r4, #20
 800b3e4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b3e8:	9301      	str	r3, [sp, #4]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b3f0:	4694      	mov	ip, r2
 800b3f2:	f852 1b04 	ldr.w	r1, [r2], #4
 800b3f6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b3fa:	d01e      	beq.n	800b43a <__gethex+0x3d2>
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	f8cc 1000 	str.w	r1, [ip]
 800b402:	f1b8 0f02 	cmp.w	r8, #2
 800b406:	f104 0214 	add.w	r2, r4, #20
 800b40a:	d13d      	bne.n	800b488 <__gethex+0x420>
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	3b01      	subs	r3, #1
 800b410:	42ab      	cmp	r3, r5
 800b412:	d10b      	bne.n	800b42c <__gethex+0x3c4>
 800b414:	2301      	movs	r3, #1
 800b416:	1169      	asrs	r1, r5, #5
 800b418:	f005 051f 	and.w	r5, r5, #31
 800b41c:	fa03 f505 	lsl.w	r5, r3, r5
 800b420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b424:	421d      	tst	r5, r3
 800b426:	bf18      	it	ne
 800b428:	f04f 0801 	movne.w	r8, #1
 800b42c:	f048 0820 	orr.w	r8, r8, #32
 800b430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b432:	601c      	str	r4, [r3, #0]
 800b434:	9b02      	ldr	r3, [sp, #8]
 800b436:	601e      	str	r6, [r3, #0]
 800b438:	e6a0      	b.n	800b17c <__gethex+0x114>
 800b43a:	4290      	cmp	r0, r2
 800b43c:	f842 3c04 	str.w	r3, [r2, #-4]
 800b440:	d8d6      	bhi.n	800b3f0 <__gethex+0x388>
 800b442:	68a2      	ldr	r2, [r4, #8]
 800b444:	4593      	cmp	fp, r2
 800b446:	db17      	blt.n	800b478 <__gethex+0x410>
 800b448:	6861      	ldr	r1, [r4, #4]
 800b44a:	4648      	mov	r0, r9
 800b44c:	3101      	adds	r1, #1
 800b44e:	f7fe f873 	bl	8009538 <_Balloc>
 800b452:	4682      	mov	sl, r0
 800b454:	b918      	cbnz	r0, 800b45e <__gethex+0x3f6>
 800b456:	4602      	mov	r2, r0
 800b458:	2184      	movs	r1, #132	; 0x84
 800b45a:	4b1a      	ldr	r3, [pc, #104]	; (800b4c4 <__gethex+0x45c>)
 800b45c:	e6b1      	b.n	800b1c2 <__gethex+0x15a>
 800b45e:	6922      	ldr	r2, [r4, #16]
 800b460:	f104 010c 	add.w	r1, r4, #12
 800b464:	3202      	adds	r2, #2
 800b466:	0092      	lsls	r2, r2, #2
 800b468:	300c      	adds	r0, #12
 800b46a:	f7fd f8e6 	bl	800863a <memcpy>
 800b46e:	4621      	mov	r1, r4
 800b470:	4648      	mov	r0, r9
 800b472:	f7fe f8a1 	bl	80095b8 <_Bfree>
 800b476:	4654      	mov	r4, sl
 800b478:	6922      	ldr	r2, [r4, #16]
 800b47a:	1c51      	adds	r1, r2, #1
 800b47c:	6121      	str	r1, [r4, #16]
 800b47e:	2101      	movs	r1, #1
 800b480:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b484:	6151      	str	r1, [r2, #20]
 800b486:	e7bc      	b.n	800b402 <__gethex+0x39a>
 800b488:	6921      	ldr	r1, [r4, #16]
 800b48a:	4559      	cmp	r1, fp
 800b48c:	dd0b      	ble.n	800b4a6 <__gethex+0x43e>
 800b48e:	2101      	movs	r1, #1
 800b490:	4620      	mov	r0, r4
 800b492:	f7ff fd81 	bl	800af98 <rshift>
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	3601      	adds	r6, #1
 800b49a:	42b3      	cmp	r3, r6
 800b49c:	f6ff aeda 	blt.w	800b254 <__gethex+0x1ec>
 800b4a0:	f04f 0801 	mov.w	r8, #1
 800b4a4:	e7c2      	b.n	800b42c <__gethex+0x3c4>
 800b4a6:	f015 051f 	ands.w	r5, r5, #31
 800b4aa:	d0f9      	beq.n	800b4a0 <__gethex+0x438>
 800b4ac:	9b01      	ldr	r3, [sp, #4]
 800b4ae:	f1c5 0520 	rsb	r5, r5, #32
 800b4b2:	441a      	add	r2, r3
 800b4b4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b4b8:	f7fe f930 	bl	800971c <__hi0bits>
 800b4bc:	42a8      	cmp	r0, r5
 800b4be:	dbe6      	blt.n	800b48e <__gethex+0x426>
 800b4c0:	e7ee      	b.n	800b4a0 <__gethex+0x438>
 800b4c2:	bf00      	nop
 800b4c4:	0800bf91 	.word	0x0800bf91

0800b4c8 <L_shift>:
 800b4c8:	f1c2 0208 	rsb	r2, r2, #8
 800b4cc:	0092      	lsls	r2, r2, #2
 800b4ce:	b570      	push	{r4, r5, r6, lr}
 800b4d0:	f1c2 0620 	rsb	r6, r2, #32
 800b4d4:	6843      	ldr	r3, [r0, #4]
 800b4d6:	6804      	ldr	r4, [r0, #0]
 800b4d8:	fa03 f506 	lsl.w	r5, r3, r6
 800b4dc:	432c      	orrs	r4, r5
 800b4de:	40d3      	lsrs	r3, r2
 800b4e0:	6004      	str	r4, [r0, #0]
 800b4e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4e6:	4288      	cmp	r0, r1
 800b4e8:	d3f4      	bcc.n	800b4d4 <L_shift+0xc>
 800b4ea:	bd70      	pop	{r4, r5, r6, pc}

0800b4ec <__match>:
 800b4ec:	b530      	push	{r4, r5, lr}
 800b4ee:	6803      	ldr	r3, [r0, #0]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4f6:	b914      	cbnz	r4, 800b4fe <__match+0x12>
 800b4f8:	6003      	str	r3, [r0, #0]
 800b4fa:	2001      	movs	r0, #1
 800b4fc:	bd30      	pop	{r4, r5, pc}
 800b4fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b502:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b506:	2d19      	cmp	r5, #25
 800b508:	bf98      	it	ls
 800b50a:	3220      	addls	r2, #32
 800b50c:	42a2      	cmp	r2, r4
 800b50e:	d0f0      	beq.n	800b4f2 <__match+0x6>
 800b510:	2000      	movs	r0, #0
 800b512:	e7f3      	b.n	800b4fc <__match+0x10>

0800b514 <__hexnan>:
 800b514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b518:	2500      	movs	r5, #0
 800b51a:	680b      	ldr	r3, [r1, #0]
 800b51c:	4682      	mov	sl, r0
 800b51e:	115e      	asrs	r6, r3, #5
 800b520:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b524:	f013 031f 	ands.w	r3, r3, #31
 800b528:	bf18      	it	ne
 800b52a:	3604      	addne	r6, #4
 800b52c:	1f37      	subs	r7, r6, #4
 800b52e:	4690      	mov	r8, r2
 800b530:	46b9      	mov	r9, r7
 800b532:	463c      	mov	r4, r7
 800b534:	46ab      	mov	fp, r5
 800b536:	b087      	sub	sp, #28
 800b538:	6801      	ldr	r1, [r0, #0]
 800b53a:	9301      	str	r3, [sp, #4]
 800b53c:	f846 5c04 	str.w	r5, [r6, #-4]
 800b540:	9502      	str	r5, [sp, #8]
 800b542:	784a      	ldrb	r2, [r1, #1]
 800b544:	1c4b      	adds	r3, r1, #1
 800b546:	9303      	str	r3, [sp, #12]
 800b548:	b342      	cbz	r2, 800b59c <__hexnan+0x88>
 800b54a:	4610      	mov	r0, r2
 800b54c:	9105      	str	r1, [sp, #20]
 800b54e:	9204      	str	r2, [sp, #16]
 800b550:	f7ff fd75 	bl	800b03e <__hexdig_fun>
 800b554:	2800      	cmp	r0, #0
 800b556:	d14f      	bne.n	800b5f8 <__hexnan+0xe4>
 800b558:	9a04      	ldr	r2, [sp, #16]
 800b55a:	9905      	ldr	r1, [sp, #20]
 800b55c:	2a20      	cmp	r2, #32
 800b55e:	d818      	bhi.n	800b592 <__hexnan+0x7e>
 800b560:	9b02      	ldr	r3, [sp, #8]
 800b562:	459b      	cmp	fp, r3
 800b564:	dd13      	ble.n	800b58e <__hexnan+0x7a>
 800b566:	454c      	cmp	r4, r9
 800b568:	d206      	bcs.n	800b578 <__hexnan+0x64>
 800b56a:	2d07      	cmp	r5, #7
 800b56c:	dc04      	bgt.n	800b578 <__hexnan+0x64>
 800b56e:	462a      	mov	r2, r5
 800b570:	4649      	mov	r1, r9
 800b572:	4620      	mov	r0, r4
 800b574:	f7ff ffa8 	bl	800b4c8 <L_shift>
 800b578:	4544      	cmp	r4, r8
 800b57a:	d950      	bls.n	800b61e <__hexnan+0x10a>
 800b57c:	2300      	movs	r3, #0
 800b57e:	f1a4 0904 	sub.w	r9, r4, #4
 800b582:	f844 3c04 	str.w	r3, [r4, #-4]
 800b586:	461d      	mov	r5, r3
 800b588:	464c      	mov	r4, r9
 800b58a:	f8cd b008 	str.w	fp, [sp, #8]
 800b58e:	9903      	ldr	r1, [sp, #12]
 800b590:	e7d7      	b.n	800b542 <__hexnan+0x2e>
 800b592:	2a29      	cmp	r2, #41	; 0x29
 800b594:	d155      	bne.n	800b642 <__hexnan+0x12e>
 800b596:	3102      	adds	r1, #2
 800b598:	f8ca 1000 	str.w	r1, [sl]
 800b59c:	f1bb 0f00 	cmp.w	fp, #0
 800b5a0:	d04f      	beq.n	800b642 <__hexnan+0x12e>
 800b5a2:	454c      	cmp	r4, r9
 800b5a4:	d206      	bcs.n	800b5b4 <__hexnan+0xa0>
 800b5a6:	2d07      	cmp	r5, #7
 800b5a8:	dc04      	bgt.n	800b5b4 <__hexnan+0xa0>
 800b5aa:	462a      	mov	r2, r5
 800b5ac:	4649      	mov	r1, r9
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7ff ff8a 	bl	800b4c8 <L_shift>
 800b5b4:	4544      	cmp	r4, r8
 800b5b6:	d934      	bls.n	800b622 <__hexnan+0x10e>
 800b5b8:	4623      	mov	r3, r4
 800b5ba:	f1a8 0204 	sub.w	r2, r8, #4
 800b5be:	f853 1b04 	ldr.w	r1, [r3], #4
 800b5c2:	429f      	cmp	r7, r3
 800b5c4:	f842 1f04 	str.w	r1, [r2, #4]!
 800b5c8:	d2f9      	bcs.n	800b5be <__hexnan+0xaa>
 800b5ca:	1b3b      	subs	r3, r7, r4
 800b5cc:	f023 0303 	bic.w	r3, r3, #3
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	3e03      	subs	r6, #3
 800b5d4:	3401      	adds	r4, #1
 800b5d6:	42a6      	cmp	r6, r4
 800b5d8:	bf38      	it	cc
 800b5da:	2304      	movcc	r3, #4
 800b5dc:	2200      	movs	r2, #0
 800b5de:	4443      	add	r3, r8
 800b5e0:	f843 2b04 	str.w	r2, [r3], #4
 800b5e4:	429f      	cmp	r7, r3
 800b5e6:	d2fb      	bcs.n	800b5e0 <__hexnan+0xcc>
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	b91b      	cbnz	r3, 800b5f4 <__hexnan+0xe0>
 800b5ec:	4547      	cmp	r7, r8
 800b5ee:	d126      	bne.n	800b63e <__hexnan+0x12a>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	603b      	str	r3, [r7, #0]
 800b5f4:	2005      	movs	r0, #5
 800b5f6:	e025      	b.n	800b644 <__hexnan+0x130>
 800b5f8:	3501      	adds	r5, #1
 800b5fa:	2d08      	cmp	r5, #8
 800b5fc:	f10b 0b01 	add.w	fp, fp, #1
 800b600:	dd06      	ble.n	800b610 <__hexnan+0xfc>
 800b602:	4544      	cmp	r4, r8
 800b604:	d9c3      	bls.n	800b58e <__hexnan+0x7a>
 800b606:	2300      	movs	r3, #0
 800b608:	2501      	movs	r5, #1
 800b60a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b60e:	3c04      	subs	r4, #4
 800b610:	6822      	ldr	r2, [r4, #0]
 800b612:	f000 000f 	and.w	r0, r0, #15
 800b616:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b61a:	6020      	str	r0, [r4, #0]
 800b61c:	e7b7      	b.n	800b58e <__hexnan+0x7a>
 800b61e:	2508      	movs	r5, #8
 800b620:	e7b5      	b.n	800b58e <__hexnan+0x7a>
 800b622:	9b01      	ldr	r3, [sp, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d0df      	beq.n	800b5e8 <__hexnan+0xd4>
 800b628:	f04f 32ff 	mov.w	r2, #4294967295
 800b62c:	f1c3 0320 	rsb	r3, r3, #32
 800b630:	40da      	lsrs	r2, r3
 800b632:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b636:	4013      	ands	r3, r2
 800b638:	f846 3c04 	str.w	r3, [r6, #-4]
 800b63c:	e7d4      	b.n	800b5e8 <__hexnan+0xd4>
 800b63e:	3f04      	subs	r7, #4
 800b640:	e7d2      	b.n	800b5e8 <__hexnan+0xd4>
 800b642:	2004      	movs	r0, #4
 800b644:	b007      	add	sp, #28
 800b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b64a <__ascii_mbtowc>:
 800b64a:	b082      	sub	sp, #8
 800b64c:	b901      	cbnz	r1, 800b650 <__ascii_mbtowc+0x6>
 800b64e:	a901      	add	r1, sp, #4
 800b650:	b142      	cbz	r2, 800b664 <__ascii_mbtowc+0x1a>
 800b652:	b14b      	cbz	r3, 800b668 <__ascii_mbtowc+0x1e>
 800b654:	7813      	ldrb	r3, [r2, #0]
 800b656:	600b      	str	r3, [r1, #0]
 800b658:	7812      	ldrb	r2, [r2, #0]
 800b65a:	1e10      	subs	r0, r2, #0
 800b65c:	bf18      	it	ne
 800b65e:	2001      	movne	r0, #1
 800b660:	b002      	add	sp, #8
 800b662:	4770      	bx	lr
 800b664:	4610      	mov	r0, r2
 800b666:	e7fb      	b.n	800b660 <__ascii_mbtowc+0x16>
 800b668:	f06f 0001 	mvn.w	r0, #1
 800b66c:	e7f8      	b.n	800b660 <__ascii_mbtowc+0x16>

0800b66e <_realloc_r>:
 800b66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b672:	4680      	mov	r8, r0
 800b674:	4614      	mov	r4, r2
 800b676:	460e      	mov	r6, r1
 800b678:	b921      	cbnz	r1, 800b684 <_realloc_r+0x16>
 800b67a:	4611      	mov	r1, r2
 800b67c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b680:	f7fd bece 	b.w	8009420 <_malloc_r>
 800b684:	b92a      	cbnz	r2, 800b692 <_realloc_r+0x24>
 800b686:	f7fd fe5b 	bl	8009340 <_free_r>
 800b68a:	4625      	mov	r5, r4
 800b68c:	4628      	mov	r0, r5
 800b68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b692:	f000 f842 	bl	800b71a <_malloc_usable_size_r>
 800b696:	4284      	cmp	r4, r0
 800b698:	4607      	mov	r7, r0
 800b69a:	d802      	bhi.n	800b6a2 <_realloc_r+0x34>
 800b69c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6a0:	d812      	bhi.n	800b6c8 <_realloc_r+0x5a>
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	f7fd febb 	bl	8009420 <_malloc_r>
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d0ed      	beq.n	800b68c <_realloc_r+0x1e>
 800b6b0:	42bc      	cmp	r4, r7
 800b6b2:	4622      	mov	r2, r4
 800b6b4:	4631      	mov	r1, r6
 800b6b6:	bf28      	it	cs
 800b6b8:	463a      	movcs	r2, r7
 800b6ba:	f7fc ffbe 	bl	800863a <memcpy>
 800b6be:	4631      	mov	r1, r6
 800b6c0:	4640      	mov	r0, r8
 800b6c2:	f7fd fe3d 	bl	8009340 <_free_r>
 800b6c6:	e7e1      	b.n	800b68c <_realloc_r+0x1e>
 800b6c8:	4635      	mov	r5, r6
 800b6ca:	e7df      	b.n	800b68c <_realloc_r+0x1e>

0800b6cc <__ascii_wctomb>:
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	b141      	cbz	r1, 800b6e4 <__ascii_wctomb+0x18>
 800b6d2:	2aff      	cmp	r2, #255	; 0xff
 800b6d4:	d904      	bls.n	800b6e0 <__ascii_wctomb+0x14>
 800b6d6:	228a      	movs	r2, #138	; 0x8a
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	4770      	bx	lr
 800b6e0:	2001      	movs	r0, #1
 800b6e2:	700a      	strb	r2, [r1, #0]
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <fiprintf>:
 800b6e8:	b40e      	push	{r1, r2, r3}
 800b6ea:	b503      	push	{r0, r1, lr}
 800b6ec:	4601      	mov	r1, r0
 800b6ee:	ab03      	add	r3, sp, #12
 800b6f0:	4805      	ldr	r0, [pc, #20]	; (800b708 <fiprintf+0x20>)
 800b6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f6:	6800      	ldr	r0, [r0, #0]
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	f000 f83d 	bl	800b778 <_vfiprintf_r>
 800b6fe:	b002      	add	sp, #8
 800b700:	f85d eb04 	ldr.w	lr, [sp], #4
 800b704:	b003      	add	sp, #12
 800b706:	4770      	bx	lr
 800b708:	20000074 	.word	0x20000074

0800b70c <abort>:
 800b70c:	2006      	movs	r0, #6
 800b70e:	b508      	push	{r3, lr}
 800b710:	f000 fa0a 	bl	800bb28 <raise>
 800b714:	2001      	movs	r0, #1
 800b716:	f7f6 fa18 	bl	8001b4a <_exit>

0800b71a <_malloc_usable_size_r>:
 800b71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b71e:	1f18      	subs	r0, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	bfbc      	itt	lt
 800b724:	580b      	ldrlt	r3, [r1, r0]
 800b726:	18c0      	addlt	r0, r0, r3
 800b728:	4770      	bx	lr

0800b72a <__sfputc_r>:
 800b72a:	6893      	ldr	r3, [r2, #8]
 800b72c:	b410      	push	{r4}
 800b72e:	3b01      	subs	r3, #1
 800b730:	2b00      	cmp	r3, #0
 800b732:	6093      	str	r3, [r2, #8]
 800b734:	da07      	bge.n	800b746 <__sfputc_r+0x1c>
 800b736:	6994      	ldr	r4, [r2, #24]
 800b738:	42a3      	cmp	r3, r4
 800b73a:	db01      	blt.n	800b740 <__sfputc_r+0x16>
 800b73c:	290a      	cmp	r1, #10
 800b73e:	d102      	bne.n	800b746 <__sfputc_r+0x1c>
 800b740:	bc10      	pop	{r4}
 800b742:	f000 b933 	b.w	800b9ac <__swbuf_r>
 800b746:	6813      	ldr	r3, [r2, #0]
 800b748:	1c58      	adds	r0, r3, #1
 800b74a:	6010      	str	r0, [r2, #0]
 800b74c:	7019      	strb	r1, [r3, #0]
 800b74e:	4608      	mov	r0, r1
 800b750:	bc10      	pop	{r4}
 800b752:	4770      	bx	lr

0800b754 <__sfputs_r>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	4606      	mov	r6, r0
 800b758:	460f      	mov	r7, r1
 800b75a:	4614      	mov	r4, r2
 800b75c:	18d5      	adds	r5, r2, r3
 800b75e:	42ac      	cmp	r4, r5
 800b760:	d101      	bne.n	800b766 <__sfputs_r+0x12>
 800b762:	2000      	movs	r0, #0
 800b764:	e007      	b.n	800b776 <__sfputs_r+0x22>
 800b766:	463a      	mov	r2, r7
 800b768:	4630      	mov	r0, r6
 800b76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76e:	f7ff ffdc 	bl	800b72a <__sfputc_r>
 800b772:	1c43      	adds	r3, r0, #1
 800b774:	d1f3      	bne.n	800b75e <__sfputs_r+0xa>
 800b776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b778 <_vfiprintf_r>:
 800b778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77c:	460d      	mov	r5, r1
 800b77e:	4614      	mov	r4, r2
 800b780:	4698      	mov	r8, r3
 800b782:	4606      	mov	r6, r0
 800b784:	b09d      	sub	sp, #116	; 0x74
 800b786:	b118      	cbz	r0, 800b790 <_vfiprintf_r+0x18>
 800b788:	6a03      	ldr	r3, [r0, #32]
 800b78a:	b90b      	cbnz	r3, 800b790 <_vfiprintf_r+0x18>
 800b78c:	f7fc fdd8 	bl	8008340 <__sinit>
 800b790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b792:	07d9      	lsls	r1, r3, #31
 800b794:	d405      	bmi.n	800b7a2 <_vfiprintf_r+0x2a>
 800b796:	89ab      	ldrh	r3, [r5, #12]
 800b798:	059a      	lsls	r2, r3, #22
 800b79a:	d402      	bmi.n	800b7a2 <_vfiprintf_r+0x2a>
 800b79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b79e:	f7fc ff3c 	bl	800861a <__retarget_lock_acquire_recursive>
 800b7a2:	89ab      	ldrh	r3, [r5, #12]
 800b7a4:	071b      	lsls	r3, r3, #28
 800b7a6:	d501      	bpl.n	800b7ac <_vfiprintf_r+0x34>
 800b7a8:	692b      	ldr	r3, [r5, #16]
 800b7aa:	b99b      	cbnz	r3, 800b7d4 <_vfiprintf_r+0x5c>
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	f000 f93a 	bl	800ba28 <__swsetup_r>
 800b7b4:	b170      	cbz	r0, 800b7d4 <_vfiprintf_r+0x5c>
 800b7b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7b8:	07dc      	lsls	r4, r3, #31
 800b7ba:	d504      	bpl.n	800b7c6 <_vfiprintf_r+0x4e>
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c0:	b01d      	add	sp, #116	; 0x74
 800b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	0598      	lsls	r0, r3, #22
 800b7ca:	d4f7      	bmi.n	800b7bc <_vfiprintf_r+0x44>
 800b7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ce:	f7fc ff25 	bl	800861c <__retarget_lock_release_recursive>
 800b7d2:	e7f3      	b.n	800b7bc <_vfiprintf_r+0x44>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d8:	2320      	movs	r3, #32
 800b7da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7de:	2330      	movs	r3, #48	; 0x30
 800b7e0:	f04f 0901 	mov.w	r9, #1
 800b7e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b998 <_vfiprintf_r+0x220>
 800b7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7f0:	4623      	mov	r3, r4
 800b7f2:	469a      	mov	sl, r3
 800b7f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f8:	b10a      	cbz	r2, 800b7fe <_vfiprintf_r+0x86>
 800b7fa:	2a25      	cmp	r2, #37	; 0x25
 800b7fc:	d1f9      	bne.n	800b7f2 <_vfiprintf_r+0x7a>
 800b7fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b802:	d00b      	beq.n	800b81c <_vfiprintf_r+0xa4>
 800b804:	465b      	mov	r3, fp
 800b806:	4622      	mov	r2, r4
 800b808:	4629      	mov	r1, r5
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7ff ffa2 	bl	800b754 <__sfputs_r>
 800b810:	3001      	adds	r0, #1
 800b812:	f000 80a9 	beq.w	800b968 <_vfiprintf_r+0x1f0>
 800b816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b818:	445a      	add	r2, fp
 800b81a:	9209      	str	r2, [sp, #36]	; 0x24
 800b81c:	f89a 3000 	ldrb.w	r3, [sl]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 80a1 	beq.w	800b968 <_vfiprintf_r+0x1f0>
 800b826:	2300      	movs	r3, #0
 800b828:	f04f 32ff 	mov.w	r2, #4294967295
 800b82c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b830:	f10a 0a01 	add.w	sl, sl, #1
 800b834:	9304      	str	r3, [sp, #16]
 800b836:	9307      	str	r3, [sp, #28]
 800b838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b83c:	931a      	str	r3, [sp, #104]	; 0x68
 800b83e:	4654      	mov	r4, sl
 800b840:	2205      	movs	r2, #5
 800b842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b846:	4854      	ldr	r0, [pc, #336]	; (800b998 <_vfiprintf_r+0x220>)
 800b848:	f7fc fee9 	bl	800861e <memchr>
 800b84c:	9a04      	ldr	r2, [sp, #16]
 800b84e:	b9d8      	cbnz	r0, 800b888 <_vfiprintf_r+0x110>
 800b850:	06d1      	lsls	r1, r2, #27
 800b852:	bf44      	itt	mi
 800b854:	2320      	movmi	r3, #32
 800b856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b85a:	0713      	lsls	r3, r2, #28
 800b85c:	bf44      	itt	mi
 800b85e:	232b      	movmi	r3, #43	; 0x2b
 800b860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b864:	f89a 3000 	ldrb.w	r3, [sl]
 800b868:	2b2a      	cmp	r3, #42	; 0x2a
 800b86a:	d015      	beq.n	800b898 <_vfiprintf_r+0x120>
 800b86c:	4654      	mov	r4, sl
 800b86e:	2000      	movs	r0, #0
 800b870:	f04f 0c0a 	mov.w	ip, #10
 800b874:	9a07      	ldr	r2, [sp, #28]
 800b876:	4621      	mov	r1, r4
 800b878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b87c:	3b30      	subs	r3, #48	; 0x30
 800b87e:	2b09      	cmp	r3, #9
 800b880:	d94d      	bls.n	800b91e <_vfiprintf_r+0x1a6>
 800b882:	b1b0      	cbz	r0, 800b8b2 <_vfiprintf_r+0x13a>
 800b884:	9207      	str	r2, [sp, #28]
 800b886:	e014      	b.n	800b8b2 <_vfiprintf_r+0x13a>
 800b888:	eba0 0308 	sub.w	r3, r0, r8
 800b88c:	fa09 f303 	lsl.w	r3, r9, r3
 800b890:	4313      	orrs	r3, r2
 800b892:	46a2      	mov	sl, r4
 800b894:	9304      	str	r3, [sp, #16]
 800b896:	e7d2      	b.n	800b83e <_vfiprintf_r+0xc6>
 800b898:	9b03      	ldr	r3, [sp, #12]
 800b89a:	1d19      	adds	r1, r3, #4
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	9103      	str	r1, [sp, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	bfbb      	ittet	lt
 800b8a4:	425b      	neglt	r3, r3
 800b8a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8aa:	9307      	strge	r3, [sp, #28]
 800b8ac:	9307      	strlt	r3, [sp, #28]
 800b8ae:	bfb8      	it	lt
 800b8b0:	9204      	strlt	r2, [sp, #16]
 800b8b2:	7823      	ldrb	r3, [r4, #0]
 800b8b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b8b6:	d10c      	bne.n	800b8d2 <_vfiprintf_r+0x15a>
 800b8b8:	7863      	ldrb	r3, [r4, #1]
 800b8ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b8bc:	d134      	bne.n	800b928 <_vfiprintf_r+0x1b0>
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	3402      	adds	r4, #2
 800b8c2:	1d1a      	adds	r2, r3, #4
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	9203      	str	r2, [sp, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	bfb8      	it	lt
 800b8cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b99c <_vfiprintf_r+0x224>
 800b8d6:	2203      	movs	r2, #3
 800b8d8:	4650      	mov	r0, sl
 800b8da:	7821      	ldrb	r1, [r4, #0]
 800b8dc:	f7fc fe9f 	bl	800861e <memchr>
 800b8e0:	b138      	cbz	r0, 800b8f2 <_vfiprintf_r+0x17a>
 800b8e2:	2240      	movs	r2, #64	; 0x40
 800b8e4:	9b04      	ldr	r3, [sp, #16]
 800b8e6:	eba0 000a 	sub.w	r0, r0, sl
 800b8ea:	4082      	lsls	r2, r0
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	3401      	adds	r4, #1
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f6:	2206      	movs	r2, #6
 800b8f8:	4829      	ldr	r0, [pc, #164]	; (800b9a0 <_vfiprintf_r+0x228>)
 800b8fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8fe:	f7fc fe8e 	bl	800861e <memchr>
 800b902:	2800      	cmp	r0, #0
 800b904:	d03f      	beq.n	800b986 <_vfiprintf_r+0x20e>
 800b906:	4b27      	ldr	r3, [pc, #156]	; (800b9a4 <_vfiprintf_r+0x22c>)
 800b908:	bb1b      	cbnz	r3, 800b952 <_vfiprintf_r+0x1da>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	3307      	adds	r3, #7
 800b90e:	f023 0307 	bic.w	r3, r3, #7
 800b912:	3308      	adds	r3, #8
 800b914:	9303      	str	r3, [sp, #12]
 800b916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b918:	443b      	add	r3, r7
 800b91a:	9309      	str	r3, [sp, #36]	; 0x24
 800b91c:	e768      	b.n	800b7f0 <_vfiprintf_r+0x78>
 800b91e:	460c      	mov	r4, r1
 800b920:	2001      	movs	r0, #1
 800b922:	fb0c 3202 	mla	r2, ip, r2, r3
 800b926:	e7a6      	b.n	800b876 <_vfiprintf_r+0xfe>
 800b928:	2300      	movs	r3, #0
 800b92a:	f04f 0c0a 	mov.w	ip, #10
 800b92e:	4619      	mov	r1, r3
 800b930:	3401      	adds	r4, #1
 800b932:	9305      	str	r3, [sp, #20]
 800b934:	4620      	mov	r0, r4
 800b936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b93a:	3a30      	subs	r2, #48	; 0x30
 800b93c:	2a09      	cmp	r2, #9
 800b93e:	d903      	bls.n	800b948 <_vfiprintf_r+0x1d0>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0c6      	beq.n	800b8d2 <_vfiprintf_r+0x15a>
 800b944:	9105      	str	r1, [sp, #20]
 800b946:	e7c4      	b.n	800b8d2 <_vfiprintf_r+0x15a>
 800b948:	4604      	mov	r4, r0
 800b94a:	2301      	movs	r3, #1
 800b94c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b950:	e7f0      	b.n	800b934 <_vfiprintf_r+0x1bc>
 800b952:	ab03      	add	r3, sp, #12
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	462a      	mov	r2, r5
 800b958:	4630      	mov	r0, r6
 800b95a:	4b13      	ldr	r3, [pc, #76]	; (800b9a8 <_vfiprintf_r+0x230>)
 800b95c:	a904      	add	r1, sp, #16
 800b95e:	f7fb fe93 	bl	8007688 <_printf_float>
 800b962:	4607      	mov	r7, r0
 800b964:	1c78      	adds	r0, r7, #1
 800b966:	d1d6      	bne.n	800b916 <_vfiprintf_r+0x19e>
 800b968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b96a:	07d9      	lsls	r1, r3, #31
 800b96c:	d405      	bmi.n	800b97a <_vfiprintf_r+0x202>
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	059a      	lsls	r2, r3, #22
 800b972:	d402      	bmi.n	800b97a <_vfiprintf_r+0x202>
 800b974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b976:	f7fc fe51 	bl	800861c <__retarget_lock_release_recursive>
 800b97a:	89ab      	ldrh	r3, [r5, #12]
 800b97c:	065b      	lsls	r3, r3, #25
 800b97e:	f53f af1d 	bmi.w	800b7bc <_vfiprintf_r+0x44>
 800b982:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b984:	e71c      	b.n	800b7c0 <_vfiprintf_r+0x48>
 800b986:	ab03      	add	r3, sp, #12
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	462a      	mov	r2, r5
 800b98c:	4630      	mov	r0, r6
 800b98e:	4b06      	ldr	r3, [pc, #24]	; (800b9a8 <_vfiprintf_r+0x230>)
 800b990:	a904      	add	r1, sp, #16
 800b992:	f7fc f919 	bl	8007bc8 <_printf_i>
 800b996:	e7e4      	b.n	800b962 <_vfiprintf_r+0x1ea>
 800b998:	0800c150 	.word	0x0800c150
 800b99c:	0800c156 	.word	0x0800c156
 800b9a0:	0800c15a 	.word	0x0800c15a
 800b9a4:	08007689 	.word	0x08007689
 800b9a8:	0800b755 	.word	0x0800b755

0800b9ac <__swbuf_r>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	460e      	mov	r6, r1
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	b118      	cbz	r0, 800b9be <__swbuf_r+0x12>
 800b9b6:	6a03      	ldr	r3, [r0, #32]
 800b9b8:	b90b      	cbnz	r3, 800b9be <__swbuf_r+0x12>
 800b9ba:	f7fc fcc1 	bl	8008340 <__sinit>
 800b9be:	69a3      	ldr	r3, [r4, #24]
 800b9c0:	60a3      	str	r3, [r4, #8]
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	071a      	lsls	r2, r3, #28
 800b9c6:	d525      	bpl.n	800ba14 <__swbuf_r+0x68>
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	b31b      	cbz	r3, 800ba14 <__swbuf_r+0x68>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	6922      	ldr	r2, [r4, #16]
 800b9d0:	b2f6      	uxtb	r6, r6
 800b9d2:	1a98      	subs	r0, r3, r2
 800b9d4:	6963      	ldr	r3, [r4, #20]
 800b9d6:	4637      	mov	r7, r6
 800b9d8:	4283      	cmp	r3, r0
 800b9da:	dc04      	bgt.n	800b9e6 <__swbuf_r+0x3a>
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4628      	mov	r0, r5
 800b9e0:	f7ff fa3e 	bl	800ae60 <_fflush_r>
 800b9e4:	b9e0      	cbnz	r0, 800ba20 <__swbuf_r+0x74>
 800b9e6:	68a3      	ldr	r3, [r4, #8]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	60a3      	str	r3, [r4, #8]
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	6022      	str	r2, [r4, #0]
 800b9f2:	701e      	strb	r6, [r3, #0]
 800b9f4:	6962      	ldr	r2, [r4, #20]
 800b9f6:	1c43      	adds	r3, r0, #1
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d004      	beq.n	800ba06 <__swbuf_r+0x5a>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	07db      	lsls	r3, r3, #31
 800ba00:	d506      	bpl.n	800ba10 <__swbuf_r+0x64>
 800ba02:	2e0a      	cmp	r6, #10
 800ba04:	d104      	bne.n	800ba10 <__swbuf_r+0x64>
 800ba06:	4621      	mov	r1, r4
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f7ff fa29 	bl	800ae60 <_fflush_r>
 800ba0e:	b938      	cbnz	r0, 800ba20 <__swbuf_r+0x74>
 800ba10:	4638      	mov	r0, r7
 800ba12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba14:	4621      	mov	r1, r4
 800ba16:	4628      	mov	r0, r5
 800ba18:	f000 f806 	bl	800ba28 <__swsetup_r>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d0d5      	beq.n	800b9cc <__swbuf_r+0x20>
 800ba20:	f04f 37ff 	mov.w	r7, #4294967295
 800ba24:	e7f4      	b.n	800ba10 <__swbuf_r+0x64>
	...

0800ba28 <__swsetup_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4b2a      	ldr	r3, [pc, #168]	; (800bad4 <__swsetup_r+0xac>)
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	6818      	ldr	r0, [r3, #0]
 800ba30:	460c      	mov	r4, r1
 800ba32:	b118      	cbz	r0, 800ba3c <__swsetup_r+0x14>
 800ba34:	6a03      	ldr	r3, [r0, #32]
 800ba36:	b90b      	cbnz	r3, 800ba3c <__swsetup_r+0x14>
 800ba38:	f7fc fc82 	bl	8008340 <__sinit>
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba42:	0718      	lsls	r0, r3, #28
 800ba44:	d422      	bmi.n	800ba8c <__swsetup_r+0x64>
 800ba46:	06d9      	lsls	r1, r3, #27
 800ba48:	d407      	bmi.n	800ba5a <__swsetup_r+0x32>
 800ba4a:	2309      	movs	r3, #9
 800ba4c:	602b      	str	r3, [r5, #0]
 800ba4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba52:	f04f 30ff 	mov.w	r0, #4294967295
 800ba56:	81a3      	strh	r3, [r4, #12]
 800ba58:	e034      	b.n	800bac4 <__swsetup_r+0x9c>
 800ba5a:	0758      	lsls	r0, r3, #29
 800ba5c:	d512      	bpl.n	800ba84 <__swsetup_r+0x5c>
 800ba5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba60:	b141      	cbz	r1, 800ba74 <__swsetup_r+0x4c>
 800ba62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba66:	4299      	cmp	r1, r3
 800ba68:	d002      	beq.n	800ba70 <__swsetup_r+0x48>
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f7fd fc68 	bl	8009340 <_free_r>
 800ba70:	2300      	movs	r3, #0
 800ba72:	6363      	str	r3, [r4, #52]	; 0x34
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	6063      	str	r3, [r4, #4]
 800ba80:	6923      	ldr	r3, [r4, #16]
 800ba82:	6023      	str	r3, [r4, #0]
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	f043 0308 	orr.w	r3, r3, #8
 800ba8a:	81a3      	strh	r3, [r4, #12]
 800ba8c:	6923      	ldr	r3, [r4, #16]
 800ba8e:	b94b      	cbnz	r3, 800baa4 <__swsetup_r+0x7c>
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba9a:	d003      	beq.n	800baa4 <__swsetup_r+0x7c>
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 f883 	bl	800bbaa <__smakebuf_r>
 800baa4:	89a0      	ldrh	r0, [r4, #12]
 800baa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baaa:	f010 0301 	ands.w	r3, r0, #1
 800baae:	d00a      	beq.n	800bac6 <__swsetup_r+0x9e>
 800bab0:	2300      	movs	r3, #0
 800bab2:	60a3      	str	r3, [r4, #8]
 800bab4:	6963      	ldr	r3, [r4, #20]
 800bab6:	425b      	negs	r3, r3
 800bab8:	61a3      	str	r3, [r4, #24]
 800baba:	6923      	ldr	r3, [r4, #16]
 800babc:	b943      	cbnz	r3, 800bad0 <__swsetup_r+0xa8>
 800babe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bac2:	d1c4      	bne.n	800ba4e <__swsetup_r+0x26>
 800bac4:	bd38      	pop	{r3, r4, r5, pc}
 800bac6:	0781      	lsls	r1, r0, #30
 800bac8:	bf58      	it	pl
 800baca:	6963      	ldrpl	r3, [r4, #20]
 800bacc:	60a3      	str	r3, [r4, #8]
 800bace:	e7f4      	b.n	800baba <__swsetup_r+0x92>
 800bad0:	2000      	movs	r0, #0
 800bad2:	e7f7      	b.n	800bac4 <__swsetup_r+0x9c>
 800bad4:	20000074 	.word	0x20000074

0800bad8 <_raise_r>:
 800bad8:	291f      	cmp	r1, #31
 800bada:	b538      	push	{r3, r4, r5, lr}
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	d904      	bls.n	800baec <_raise_r+0x14>
 800bae2:	2316      	movs	r3, #22
 800bae4:	6003      	str	r3, [r0, #0]
 800bae6:	f04f 30ff 	mov.w	r0, #4294967295
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800baee:	b112      	cbz	r2, 800baf6 <_raise_r+0x1e>
 800baf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baf4:	b94b      	cbnz	r3, 800bb0a <_raise_r+0x32>
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 f830 	bl	800bb5c <_getpid_r>
 800bafc:	462a      	mov	r2, r5
 800bafe:	4601      	mov	r1, r0
 800bb00:	4620      	mov	r0, r4
 800bb02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb06:	f000 b817 	b.w	800bb38 <_kill_r>
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d00a      	beq.n	800bb24 <_raise_r+0x4c>
 800bb0e:	1c59      	adds	r1, r3, #1
 800bb10:	d103      	bne.n	800bb1a <_raise_r+0x42>
 800bb12:	2316      	movs	r3, #22
 800bb14:	6003      	str	r3, [r0, #0]
 800bb16:	2001      	movs	r0, #1
 800bb18:	e7e7      	b.n	800baea <_raise_r+0x12>
 800bb1a:	2400      	movs	r4, #0
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb22:	4798      	blx	r3
 800bb24:	2000      	movs	r0, #0
 800bb26:	e7e0      	b.n	800baea <_raise_r+0x12>

0800bb28 <raise>:
 800bb28:	4b02      	ldr	r3, [pc, #8]	; (800bb34 <raise+0xc>)
 800bb2a:	4601      	mov	r1, r0
 800bb2c:	6818      	ldr	r0, [r3, #0]
 800bb2e:	f7ff bfd3 	b.w	800bad8 <_raise_r>
 800bb32:	bf00      	nop
 800bb34:	20000074 	.word	0x20000074

0800bb38 <_kill_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	4d06      	ldr	r5, [pc, #24]	; (800bb58 <_kill_r+0x20>)
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4608      	mov	r0, r1
 800bb42:	4611      	mov	r1, r2
 800bb44:	602b      	str	r3, [r5, #0]
 800bb46:	f7f5 fff0 	bl	8001b2a <_kill>
 800bb4a:	1c43      	adds	r3, r0, #1
 800bb4c:	d102      	bne.n	800bb54 <_kill_r+0x1c>
 800bb4e:	682b      	ldr	r3, [r5, #0]
 800bb50:	b103      	cbz	r3, 800bb54 <_kill_r+0x1c>
 800bb52:	6023      	str	r3, [r4, #0]
 800bb54:	bd38      	pop	{r3, r4, r5, pc}
 800bb56:	bf00      	nop
 800bb58:	200014b4 	.word	0x200014b4

0800bb5c <_getpid_r>:
 800bb5c:	f7f5 bfde 	b.w	8001b1c <_getpid>

0800bb60 <__swhatbuf_r>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	460c      	mov	r4, r1
 800bb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb68:	4615      	mov	r5, r2
 800bb6a:	2900      	cmp	r1, #0
 800bb6c:	461e      	mov	r6, r3
 800bb6e:	b096      	sub	sp, #88	; 0x58
 800bb70:	da0c      	bge.n	800bb8c <__swhatbuf_r+0x2c>
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	2100      	movs	r1, #0
 800bb76:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb7a:	bf0c      	ite	eq
 800bb7c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bb80:	2340      	movne	r3, #64	; 0x40
 800bb82:	2000      	movs	r0, #0
 800bb84:	6031      	str	r1, [r6, #0]
 800bb86:	602b      	str	r3, [r5, #0]
 800bb88:	b016      	add	sp, #88	; 0x58
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}
 800bb8c:	466a      	mov	r2, sp
 800bb8e:	f000 f849 	bl	800bc24 <_fstat_r>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	dbed      	blt.n	800bb72 <__swhatbuf_r+0x12>
 800bb96:	9901      	ldr	r1, [sp, #4]
 800bb98:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb9c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bba0:	4259      	negs	r1, r3
 800bba2:	4159      	adcs	r1, r3
 800bba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bba8:	e7eb      	b.n	800bb82 <__swhatbuf_r+0x22>

0800bbaa <__smakebuf_r>:
 800bbaa:	898b      	ldrh	r3, [r1, #12]
 800bbac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbae:	079d      	lsls	r5, r3, #30
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	d507      	bpl.n	800bbc6 <__smakebuf_r+0x1c>
 800bbb6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbba:	6023      	str	r3, [r4, #0]
 800bbbc:	6123      	str	r3, [r4, #16]
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	6163      	str	r3, [r4, #20]
 800bbc2:	b002      	add	sp, #8
 800bbc4:	bd70      	pop	{r4, r5, r6, pc}
 800bbc6:	466a      	mov	r2, sp
 800bbc8:	ab01      	add	r3, sp, #4
 800bbca:	f7ff ffc9 	bl	800bb60 <__swhatbuf_r>
 800bbce:	9900      	ldr	r1, [sp, #0]
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f7fd fc24 	bl	8009420 <_malloc_r>
 800bbd8:	b948      	cbnz	r0, 800bbee <__smakebuf_r+0x44>
 800bbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbde:	059a      	lsls	r2, r3, #22
 800bbe0:	d4ef      	bmi.n	800bbc2 <__smakebuf_r+0x18>
 800bbe2:	f023 0303 	bic.w	r3, r3, #3
 800bbe6:	f043 0302 	orr.w	r3, r3, #2
 800bbea:	81a3      	strh	r3, [r4, #12]
 800bbec:	e7e3      	b.n	800bbb6 <__smakebuf_r+0xc>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	6020      	str	r0, [r4, #0]
 800bbf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	9b00      	ldr	r3, [sp, #0]
 800bbfa:	6120      	str	r0, [r4, #16]
 800bbfc:	6163      	str	r3, [r4, #20]
 800bbfe:	9b01      	ldr	r3, [sp, #4]
 800bc00:	b15b      	cbz	r3, 800bc1a <__smakebuf_r+0x70>
 800bc02:	4630      	mov	r0, r6
 800bc04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc08:	f000 f81e 	bl	800bc48 <_isatty_r>
 800bc0c:	b128      	cbz	r0, 800bc1a <__smakebuf_r+0x70>
 800bc0e:	89a3      	ldrh	r3, [r4, #12]
 800bc10:	f023 0303 	bic.w	r3, r3, #3
 800bc14:	f043 0301 	orr.w	r3, r3, #1
 800bc18:	81a3      	strh	r3, [r4, #12]
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	431d      	orrs	r5, r3
 800bc1e:	81a5      	strh	r5, [r4, #12]
 800bc20:	e7cf      	b.n	800bbc2 <__smakebuf_r+0x18>
	...

0800bc24 <_fstat_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	2300      	movs	r3, #0
 800bc28:	4d06      	ldr	r5, [pc, #24]	; (800bc44 <_fstat_r+0x20>)
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	4611      	mov	r1, r2
 800bc30:	602b      	str	r3, [r5, #0]
 800bc32:	f7f5 ffd8 	bl	8001be6 <_fstat>
 800bc36:	1c43      	adds	r3, r0, #1
 800bc38:	d102      	bne.n	800bc40 <_fstat_r+0x1c>
 800bc3a:	682b      	ldr	r3, [r5, #0]
 800bc3c:	b103      	cbz	r3, 800bc40 <_fstat_r+0x1c>
 800bc3e:	6023      	str	r3, [r4, #0]
 800bc40:	bd38      	pop	{r3, r4, r5, pc}
 800bc42:	bf00      	nop
 800bc44:	200014b4 	.word	0x200014b4

0800bc48 <_isatty_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	4d05      	ldr	r5, [pc, #20]	; (800bc64 <_isatty_r+0x1c>)
 800bc4e:	4604      	mov	r4, r0
 800bc50:	4608      	mov	r0, r1
 800bc52:	602b      	str	r3, [r5, #0]
 800bc54:	f7f5 ffd6 	bl	8001c04 <_isatty>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	d102      	bne.n	800bc62 <_isatty_r+0x1a>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	b103      	cbz	r3, 800bc62 <_isatty_r+0x1a>
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	200014b4 	.word	0x200014b4

0800bc68 <_init>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	bf00      	nop
 800bc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc6e:	bc08      	pop	{r3}
 800bc70:	469e      	mov	lr, r3
 800bc72:	4770      	bx	lr

0800bc74 <_fini>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	bf00      	nop
 800bc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7a:	bc08      	pop	{r3}
 800bc7c:	469e      	mov	lr, r3
 800bc7e:	4770      	bx	lr
